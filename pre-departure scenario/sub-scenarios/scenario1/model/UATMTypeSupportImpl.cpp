/* Generated by C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\bin\opendds_idl version 3.29.1 (ACE version 6.5.21) running on input file UATM.idl */
#include "UATMTypeSupportImpl.h"

#include <cstring>
#include <stdexcept>
#include "dds/DCPS/BuiltInTopicUtils.h"
#include "dds/DCPS/ContentFilteredTopicImpl.h"
#include "dds/DCPS/DataReaderImpl_T.h"
#include "dds/DCPS/DataWriterImpl_T.h"
#include "dds/DCPS/FilterEvaluator.h"
#include "dds/DCPS/MultiTopicDataReader_T.h"
#include "dds/DCPS/PoolAllocator.h"
#include "dds/DCPS/PublicationInstance.h"
#include "dds/DCPS/PublisherImpl.h"
#include "dds/DCPS/Qos_Helper.h"
#include "dds/DCPS/RakeData.h"
#include "dds/DCPS/RakeResults_T.h"
#include "dds/DCPS/ReceivedDataElementList.h"
#include "dds/DCPS/Registered_Data_Types.h"
#include "dds/DCPS/Service_Participant.h"
#include "dds/DCPS/SubscriberImpl.h"
#include "dds/DCPS/Util.h"
#include "dds/DCPS/XTypes/TypeObject.h"
#include "dds/DCPS/debug.h"
#include "dds/DdsDcpsDomainC.h"
#include "dds/DCPS/JsonValueReader.h"
#include "dds/DCPS/JsonValueWriter.h"

#ifdef OPENDDS_IDL_FILE_SPECIFIC
#  undef OPENDDS_IDL_FILE_SPECIFIC
#endif
#define OPENDDS_IDL_FILE_SPECIFIC(base, index) opendds_idl_generated_uatmtypesupportimpl_cpp_qi7gqr##_##base##index



/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: UATM */



/* Begin STRUCT-FWD: availabilityInfo */


/* End STRUCT-FWD: availabilityInfo */


/* Begin STRUCT-FWD: bookingFlightRequest */


/* End STRUCT-FWD: bookingFlightRequest */

/* End MODULE: UATM */


/* Begin MODULE: UATM */



/* Begin STRUCT: availabilityInfo */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> const XTypes::TypeIdentifier& getMinimalTypeIdentifier<UATM_availabilityInfo_xtag>()
{
  static XTypes::TypeIdentifier ti;
  ACE_GUARD_RETURN(ACE_Thread_Mutex, guard, TheServiceParticipant->get_static_xtypes_lock(), ti);
  if (ti.kind() == XTypes::TK_NONE) {
    ti = XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(148, 232, 5, 214, 13, 177, 200, 185, 42, 66, 38, 223, 9, 149));
  }
  return ti;
}

static const XTypes::TypeMap& OPENDDS_IDL_FILE_SPECIFIC(get_minimal_type_map, 0)();
template<> const XTypes::TypeMap& getMinimalTypeMap<UATM_availabilityInfo_xtag>()
{
  return OPENDDS_IDL_FILE_SPECIFIC(get_minimal_type_map, 0)();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool vread(OpenDDS::DCPS::ValueReader& value_reader,  ::UATM::availabilityInfo& value)
{
  ACE_UNUSED_ARG(value_reader);
  ACE_UNUSED_ARG(value);
  static const ListMemberHelper::Pair pairs[] = {{"resource_id",0},{"resource_type",1},{"available",2},{"skyport_id",3},{"availability_time",4},{0,0}};
  ListMemberHelper helper(pairs);
  if (!value_reader.begin_struct(OpenDDS::DCPS::APPENDABLE)) return false;
  XTypes::MemberId member_id;
  while (value_reader.members_remaining()) {
    if (!value_reader.begin_struct_member(member_id, helper)) return false;
    switch (member_id) {
    case 0: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.resource_id = x.c_str();
      }
      break;
    }
    case 1: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.resource_type = x.c_str();
      }
      break;
    }
    case 2: {
      {
         ::CORBA::Boolean bx;
        if (!value_reader.read_boolean(bx)) return false;
        value.available = bx;
      }
      break;
    }
    case 3: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.skyport_id = x.c_str();
      }
      break;
    }
    case 4: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.availability_time = x.c_str();
      }
      break;
    }
    }
    if (!value_reader.end_struct_member()) return false;
  }
  if (!value_reader.end_struct()) return false;
  return true;
}

bool vread(OpenDDS::DCPS::ValueReader& value_reader, const NestedKeyOnly< ::UATM::availabilityInfo>& value)
{
  ACE_UNUSED_ARG(value_reader);
  ACE_UNUSED_ARG(value);
  static const ListMemberHelper::Pair pairs[] = {{"resource_id",0},{"resource_type",1},{"available",2},{"skyport_id",3},{"availability_time",4},{0,0}};
  ListMemberHelper helper(pairs);
  if (!value_reader.begin_struct(OpenDDS::DCPS::APPENDABLE)) return false;
  XTypes::MemberId member_id;
  while (value_reader.members_remaining()) {
    if (!value_reader.begin_struct_member(member_id, helper)) return false;
    switch (member_id) {
    case 0: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.value.resource_id = x.c_str();
      }
      break;
    }
    case 1: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.value.resource_type = x.c_str();
      }
      break;
    }
    case 2: {
      {
         ::CORBA::Boolean bx;
        if (!value_reader.read_boolean(bx)) return false;
        value.value.available = bx;
      }
      break;
    }
    case 3: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.value.skyport_id = x.c_str();
      }
      break;
    }
    case 4: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.value.availability_time = x.c_str();
      }
      break;
    }
    }
    if (!value_reader.end_struct_member()) return false;
  }
  if (!value_reader.end_struct()) return false;
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const  ::UATM::availabilityInfo& value)
{
  ACE_UNUSED_ARG(value_writer);
  ACE_UNUSED_ARG(value);
  if (!value_writer.begin_struct(OpenDDS::DCPS::APPENDABLE)) {
    return false;
  }
  {
    MemberParam param(0, false, "resource_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.resource_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(1, false, "resource_type", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.resource_type)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(2, false, "available", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_boolean(value.available)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(3, false, "skyport_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.skyport_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(4, false, "availability_time", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.availability_time)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  return value_writer.end_struct();
}

bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const NestedKeyOnly<const  ::UATM::availabilityInfo>& value)
{
  ACE_UNUSED_ARG(value_writer);
  ACE_UNUSED_ARG(value);
  if (!value_writer.begin_struct(OpenDDS::DCPS::APPENDABLE)) {
    return false;
  }
  {
    MemberParam param(0, false, "resource_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.value.resource_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(1, false, "resource_type", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.value.resource_type)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(2, false, "available", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_boolean(value.value.available)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(3, false, "skyport_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.value.skyport_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(4, false, "availability_time", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.value.availability_time)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  return value_writer.end_struct();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> void set_default( ::UATM::availabilityInfo& stru)
{
  ACE_UNUSED_ARG(stru);
  stru.resource_id = "";
  stru.resource_type = "";
  stru.available = 0;
  stru.skyport_id = "";
  stru.availability_time = "";
}

void serialized_size(const Encoding& encoding, size_t& size, const ::UATM::availabilityInfo& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.resource_id.in()) + 1;
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.resource_type.in()) + 1;
  primitive_serialized_size(encoding, size, ACE_OutputCDR::from_boolean(stru.available));
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.skyport_id.in()) + 1;
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.availability_time.in()) + 1;
}

bool operator<<(Serializer& strm, const ::UATM::availabilityInfo& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
  return (strm << ACE_OutputCDR::from_string(stru.resource_id.in(), 10))
    && (strm << ACE_OutputCDR::from_string(stru.resource_type.in(), 10))
    && (strm << ACE_OutputCDR::from_boolean(stru.available))
    && (strm << ACE_OutputCDR::from_string(stru.skyport_id.in(), 20))
    && (strm << ACE_OutputCDR::from_string(stru.availability_time.in(), 10));
}

bool operator>>(Serializer& strm,  ::UATM::availabilityInfo& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  bool reached_end_of_struct = false;
  ACE_UNUSED_ARG(reached_end_of_struct);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.resource_id = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.resource_id.out(), 10))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.resource_type = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.resource_type.out(), 10))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.available = 0;
  } else {
    if (!(strm >> ACE_InputCDR::to_boolean(stru.available))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.skyport_id = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.skyport_id.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.availability_time = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.availability_time.out(), 10))) {
      return false;
    }
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const ::UATM::availabilityInfo>& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.value.resource_id.in()) + 1;
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.value.resource_type.in()) + 1;
  primitive_serialized_size(encoding, size, ACE_OutputCDR::from_boolean(stru.value.available));
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.value.skyport_id.in()) + 1;
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.value.availability_time.in()) + 1;
}

bool operator<<(Serializer& strm, const NestedKeyOnly<const ::UATM::availabilityInfo>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
  return (strm << ACE_OutputCDR::from_string(stru.value.resource_id.in(), 10))
    && (strm << ACE_OutputCDR::from_string(stru.value.resource_type.in(), 10))
    && (strm << ACE_OutputCDR::from_boolean(stru.value.available))
    && (strm << ACE_OutputCDR::from_string(stru.value.skyport_id.in(), 20))
    && (strm << ACE_OutputCDR::from_string(stru.value.availability_time.in(), 10));
}

bool operator>>(Serializer& strm, const NestedKeyOnly< ::UATM::availabilityInfo>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  bool reached_end_of_struct = false;
  ACE_UNUSED_ARG(reached_end_of_struct);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.resource_id = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.value.resource_id.out(), 10))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.resource_type = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.value.resource_type.out(), 10))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.available = 0;
  } else {
    if (!(strm >> ACE_InputCDR::to_boolean(stru.value.available))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.skyport_id = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.value.skyport_id.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.availability_time = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.value.availability_time.out(), 10))) {
      return false;
    }
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

void serialized_size(const Encoding& encoding, size_t& size, const KeyOnly<const  ::UATM::availabilityInfo> stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  switch (encoding.xcdr_version()) {
  case Encoding::XCDR_VERSION_1:
    {
    primitive_serialized_size_ulong(encoding, size);
    size += ACE_OS::strlen(stru.value.resource_id.in()) + 1;
    break;
    }
  case Encoding::XCDR_VERSION_2:
    {
    primitive_serialized_size_ulong(encoding, size);
    size += ACE_OS::strlen(stru.value.resource_id.in()) + 1;
    break;
    }
  case Encoding::XCDR_VERSION_NONE:
    {
    primitive_serialized_size_ulong(encoding, size);
    size += ACE_OS::strlen(stru.value.resource_id.in()) + 1;
    break;
    }
  }
}

bool operator<<(Serializer& strm, KeyOnly<const  ::UATM::availabilityInfo> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << ACE_OutputCDR::from_string(stru.value.resource_id.in(), 10));
}

bool operator>>(Serializer& strm, KeyOnly< ::UATM::availabilityInfo> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> ACE_InputCDR::to_string(stru.value.resource_id.out(), 10));
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace DCPS {
bool DDSTraits< ::UATM::availabilityInfo>::is_key(const char* field)
{
  ACE_UNUSED_ARG(field);
  if (!ACE_OS::strcmp(field, "resource_id")) {
    return true;
  }
  return false;
}
} // namespace DCPS
} // namespace OpenDDS
OPENDDS_END_VERSIONED_NAMESPACE_DECL

namespace UATM {
::DDS::DataWriter_ptr availabilityInfoTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<availabilityInfo> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}

::DDS::DataReader_ptr availabilityInfoTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<availabilityInfo> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}

#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr availabilityInfoTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<availabilityInfo> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<availabilityInfo, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */

#ifndef OPENDDS_SAFETY_PROFILE
availabilityInfo* availabilityInfoTypeSupportImpl::create_sample(::DDS::DynamicData_ptr src)
{
  availabilityInfo* value = new availabilityInfo;
  const ::DDS::ReturnCode_t rc = OpenDDS::DCPS::TypeSupportImpl_T<availabilityInfo>::create_sample_rc(*value, src);
  if (rc != ::DDS::RETCODE_OK && OpenDDS::DCPS::log_level >= OpenDDS::DCPS::LogLevel::Warning) {
    ACE_ERROR((LM_WARNING, "(%P|%t) WARNING: availabilityInfoTypeSupportImpl::create_sample: "
      "create_sample_rc failed: %C\n", OpenDDS::DCPS::retcode_to_string(rc)));
  }
  return value;
}
#endif

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& availabilityInfoTypeSupportImpl::getMetaStructForType() const
{
  return OpenDDS::DCPS::getMetaStruct<availabilityInfo>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */

namespace {
  OpenDDS::DCPS::TypeSupportInitializer<availabilityInfoTypeSupportImpl> ts_init_UATM_availabilityInfo;
}

const OpenDDS::XTypes::TypeIdentifier& availabilityInfoTypeSupportImpl::getMinimalTypeIdentifier() const
{
  return OpenDDS::DCPS::getMinimalTypeIdentifier<OpenDDS::DCPS::UATM_availabilityInfo_xtag>();
}

const OpenDDS::XTypes::TypeMap& availabilityInfoTypeSupportImpl::getMinimalTypeMap() const
{
  return OpenDDS::DCPS::getMinimalTypeMap<OpenDDS::DCPS::UATM_availabilityInfo_xtag>();
}

const OpenDDS::XTypes::TypeIdentifier& availabilityInfoTypeSupportImpl::getCompleteTypeIdentifier() const
{
  static OpenDDS::XTypes::TypeIdentifier ti;
  return ti;
}

const OpenDDS::XTypes::TypeMap& availabilityInfoTypeSupportImpl::getCompleteTypeMap() const
{
  static OpenDDS::XTypes::TypeMap tm;
  return tm;
}

::DDS::ReturnCode_t availabilityInfoTypeSupportImpl::encode_to_string(const availabilityInfo& in, CORBA::String_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
#if OPENDDS_HAS_JSON_VALUE_WRITER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    rapidjson::StringBuffer buffer;
    rapidjson::Writer<rapidjson::StringBuffer> writer(buffer);
    OpenDDS::DCPS::JsonValueWriter<rapidjson::Writer<rapidjson::StringBuffer> > jvw(writer);
    if (!vwrite(jvw, in)) {
      return ::DDS::RETCODE_ERROR;
    }
    out = buffer.GetString();
    return ::DDS::RETCODE_OK;
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  out = "";
  return ::DDS::RETCODE_UNSUPPORTED;
}

::DDS::ReturnCode_t availabilityInfoTypeSupportImpl::encode_to_bytes(const availabilityInfo& in, ::DDS::OctetSeq_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
#if OPENDDS_HAS_JSON_VALUE_WRITER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    CORBA::String_var buffer;
    const ::DDS::ReturnCode_t ret = encode_to_string(in, buffer, format);
    if (ret == ::DDS::RETCODE_OK) {
      const ::DDS::UInt32 len = static_cast< ::DDS::UInt32>(std::strlen(buffer));
      out = new ::DDS::OctetSeq(len);
      out->length(len);
      std::memcpy(out->get_buffer(), buffer, len);
      return ::DDS::RETCODE_OK;
    } else {
      out = new ::DDS::OctetSeq();
      return ret;
    }
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  out = new ::DDS::OctetSeq();
  return ::DDS::RETCODE_UNSUPPORTED;
}

::DDS::ReturnCode_t availabilityInfoTypeSupportImpl::decode_from_string(const char* in, availabilityInfo_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
  out = new availabilityInfo;
  OpenDDS::DCPS::set_default(*out);
#if OPENDDS_HAS_JSON_VALUE_READER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    rapidjson::StringStream buffer(in);
    OpenDDS::DCPS::JsonValueReader<> jvr(buffer);
    return vread(jvr, *out) ? ::DDS::RETCODE_OK : ::DDS::RETCODE_ERROR;
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  return ::DDS::RETCODE_UNSUPPORTED;
}

::DDS::ReturnCode_t availabilityInfoTypeSupportImpl::decode_from_bytes(const ::DDS::OctetSeq& in, availabilityInfo_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
#if OPENDDS_HAS_JSON_VALUE_READER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    return decode_from_string(reinterpret_cast<const char*>(in.get_buffer()), out, format);
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  out = new availabilityInfo();
  return ::DDS::RETCODE_UNSUPPORTED;
}

availabilityInfoTypeSupport::_ptr_type availabilityInfoTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl< ::UATM::availabilityInfo> : MetaStruct {
  typedef  ::UATM::availabilityInfo T;

#ifndef OPENDDS_NO_MULTI_TOPIC
  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 1; }

#endif /* OPENDDS_NO_MULTI_TOPIC */

  Value getValue(const void* stru, const char* field) const
  {
    const ::UATM::availabilityInfo& typed = *static_cast<const ::UATM::availabilityInfo*>(stru);
    ACE_UNUSED_ARG(typed);
    if (std::strcmp(field, "resource_id") == 0) {
      return typed.resource_id.in();
    }
    if (std::strcmp(field, "resource_type") == 0) {
      return typed.resource_type.in();
    }
    if (std::strcmp(field, "available") == 0) {
      return typed.available;
    }
    if (std::strcmp(field, "skyport_id") == 0) {
      return typed.skyport_id.in();
    }
    if (std::strcmp(field, "availability_time") == 0) {
      return typed.availability_time.in();
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::availabilityInfo)");
  }

  Value getValue(Serializer& strm, const char* field, TypeSupportImpl* = 0) const
  {
    const Encoding& encoding = strm.encoding();
    ACE_UNUSED_ARG(encoding);
    size_t total_size = 0;
    if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
      if (!strm.read_delimiter(total_size)) {
        throw std::runtime_error("Unable to reader delimiter in getValue");
      }
    }
    std::string base_field = field;
    const size_t index = base_field.find('.');
    std::string subfield;
    if (index != std::string::npos) {
      subfield = base_field.substr(index + 1);
      base_field = base_field.substr(0, index);
    }
    if (base_field == "resource_id") {
      TAO::String_Manager val;
      if (!(strm >> val.out())) {
        throw std::runtime_error("Field 'resource_id' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(strm >> len)) {
        throw std::runtime_error("String 'resource_id' length could not be deserialized");
      }
      if (!strm.skip(len)) {
        throw std::runtime_error("String 'resource_id' contents could not be skipped");
      }
    }
    if (base_field == "resource_type") {
      TAO::String_Manager val;
      if (!(strm >> val.out())) {
        throw std::runtime_error("Field 'resource_type' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(strm >> len)) {
        throw std::runtime_error("String 'resource_type' length could not be deserialized");
      }
      if (!strm.skip(len)) {
        throw std::runtime_error("String 'resource_type' contents could not be skipped");
      }
    }
    if (base_field == "available") {
      ACE_CDR::Boolean val;
      if (!(strm >> ACE_InputCDR::to_boolean(val))) {
        throw std::runtime_error("Field 'available' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  1 )) {
        throw std::runtime_error("Field 'available' could not be skipped");
      }
    }
    if (base_field == "skyport_id") {
      TAO::String_Manager val;
      if (!(strm >> val.out())) {
        throw std::runtime_error("Field 'skyport_id' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(strm >> len)) {
        throw std::runtime_error("String 'skyport_id' length could not be deserialized");
      }
      if (!strm.skip(len)) {
        throw std::runtime_error("String 'skyport_id' contents could not be skipped");
      }
    }
    if (base_field == "availability_time") {
      TAO::String_Manager val;
      if (!(strm >> val.out())) {
        throw std::runtime_error("Field 'availability_time' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(strm >> len)) {
        throw std::runtime_error("String 'availability_time' length could not be deserialized");
      }
      if (!strm.skip(len)) {
        throw std::runtime_error("String 'availability_time' contents could not be skipped");
      }
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Did not find field in getValue");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "resource_id") == 0) {
      return make_field_cmp(&T::resource_id, next);
    }
    if (std::strcmp(field, "resource_type") == 0) {
      return make_field_cmp(&T::resource_type, next);
    }
    if (std::strcmp(field, "available") == 0) {
      return make_field_cmp(&T::available, next);
    }
    if (std::strcmp(field, "skyport_id") == 0) {
      return make_field_cmp(&T::skyport_id, next);
    }
    if (std::strcmp(field, "availability_time") == 0) {
      return make_field_cmp(&T::availability_time, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::availabilityInfo)");
  }

#ifndef OPENDDS_NO_MULTI_TOPIC
  const char** getFieldNames() const
  {
    static const char* names[] = {"resource_id", "resource_type", "available", "skyport_id", "availability_time", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "resource_id") == 0) {
      return &static_cast<const T*>(stru)->resource_id;
    }
    if (std::strcmp(field, "resource_type") == 0) {
      return &static_cast<const T*>(stru)->resource_type;
    }
    if (std::strcmp(field, "available") == 0) {
      return &static_cast<const T*>(stru)->available;
    }
    if (std::strcmp(field, "skyport_id") == 0) {
      return &static_cast<const T*>(stru)->skyport_id;
    }
    if (std::strcmp(field, "availability_time") == 0) {
      return &static_cast<const T*>(stru)->availability_time;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::availabilityInfo)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "resource_id") == 0) {
      static_cast<T*>(lhs)->resource_id = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "resource_type") == 0) {
      static_cast<T*>(lhs)->resource_type = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "available") == 0) {
      static_cast<T*>(lhs)->available = *static_cast<const  ::CORBA::Boolean*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "skyport_id") == 0) {
      static_cast<T*>(lhs)->skyport_id = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "availability_time") == 0) {
      static_cast<T*>(lhs)->availability_time = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::availabilityInfo)");
  }

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "resource_id") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->resource_id.in(), static_cast<const T*>(rhs)->resource_id.in());
    }
    if (std::strcmp(field, "resource_type") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->resource_type.in(), static_cast<const T*>(rhs)->resource_type.in());
    }
    if (std::strcmp(field, "available") == 0) {
      return static_cast<const T*>(lhs)->available == static_cast<const T*>(rhs)->available;
    }
    if (std::strcmp(field, "skyport_id") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->skyport_id.in(), static_cast<const T*>(rhs)->skyport_id.in());
    }
    if (std::strcmp(field, "availability_time") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->availability_time.in(), static_cast<const T*>(rhs)->availability_time.in());
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::availabilityInfo)");
  }
#endif /* OPENDDS_NO_MULTI_TOPIC */

};

template<>
const MetaStruct& getMetaStruct< ::UATM::availabilityInfo>()
{
  static MetaStructImpl< ::UATM::availabilityInfo> msi;
  return msi;
}

bool gen_skip_over(Serializer& ser,  ::UATM::availabilityInfo*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl< ::UATM::availabilityInfo>().getValue(ser, "");
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif // ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace XTypes {

#ifndef OPENDDS_SAFETY_PROFILE
#if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
template <>
class DynamicDataAdapterImpl< ::UATM::availabilityInfo,  ::UATM::availabilityInfo > : public DynamicDataAdapter_T< ::UATM::availabilityInfo> {
public:
  DynamicDataAdapterImpl(DDS::DynamicType_ptr type,  ::UATM::availabilityInfo& value)
    : DynamicDataAdapter_T< ::UATM::availabilityInfo>(type, value)
  {
  }

  DynamicDataAdapterImpl(DDS::DynamicType_ptr type, const  ::UATM::availabilityInfo& value)
    : DynamicDataAdapter_T< ::UATM::availabilityInfo>(type, value)
  {
  }

  DDS::ReturnCode_t clear_all_values()
  {
    const DDS::ReturnCode_t rc = assert_mutable("DynamicDataAdapter::clear_all_values");
    if (rc == DDS::RETCODE_OK) {
      OpenDDS::DCPS::set_default(value_);
    }
    return rc;
  }

  DDS::UInt32 get_item_count()
  {
    return 5;
  }

  bool serialized_size(const OpenDDS::DCPS::Encoding& enc, size_t& size, OpenDDS::DCPS::Sample::Extent ext) const
  {
    using namespace OpenDDS::DCPS;
    if (ext == Sample::Full) {
      DCPS::serialized_size(enc, size, value_);
    } else if (ext == Sample::NestedKeyOnly) {
      const NestedKeyOnly<const  ::UATM::availabilityInfo> nested_key_only(value_);
      DCPS::serialized_size(enc, size, nested_key_only);
    } else {
      return false; // Non-topic type
    }
    return true;
  }

  bool serialize(OpenDDS::DCPS::Serializer& ser, OpenDDS::DCPS::Sample::Extent ext) const
  {
    using namespace OpenDDS::DCPS;
    if (ext == Sample::Full) {
      return ser << value_;
    } else if (ext == Sample::NestedKeyOnly) {
      NestedKeyOnly<const  ::UATM::availabilityInfo> nested_key_only(value_);
      return ser << nested_key_only;
    } else {
      return false; // Non-topic type
    }
  }

protected:
  DDS::ReturnCode_t get_raw_value(const char* method, void* dest, DDS::TypeKind tk, DDS::MemberId id)
  {
    switch (id) {
    case 0:
      {
        return get_s8_raw_value(method, dest, tk, value_.resource_id, id);
      }
    case 1:
      {
        return get_s8_raw_value(method, dest, tk, value_.resource_type, id);
      }
    case 2:
      {
        return get_simple_raw_value(method, dest, tk, value_.available, id);
      }
    case 3:
      {
        return get_s8_raw_value(method, dest, tk, value_.skyport_id, id);
      }
    case 4:
      {
        return get_s8_raw_value(method, dest, tk, value_.availability_time, id);
      }
    default:
      return invalid_id(method, id);
    }
  }

  DDS::ReturnCode_t set_raw_value(const char* method, DDS::MemberId id, const void* source, DDS::TypeKind tk)
  {
    DDS::ReturnCode_t rc = assert_mutable(method);
    if (rc != DDS::RETCODE_OK) {
      return rc;
    }
    switch (id) {
    case 0:
      {
        return set_s8_raw_value(method, value_.resource_id.inout(), id, source, tk);
      }
    case 1:
      {
        return set_s8_raw_value(method, value_.resource_type.inout(), id, source, tk);
      }
    case 2:
      {
        return set_simple_raw_value(method, value_.available, id, source, tk);
      }
    case 3:
      {
        return set_s8_raw_value(method, value_.skyport_id.inout(), id, source, tk);
      }
    case 4:
      {
        return set_s8_raw_value(method, value_.availability_time.inout(), id, source, tk);
      }
    default:
      return invalid_id(method, id);
    }
  }
};

#endif // if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER

template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::availabilityInfo,  ::UATM::availabilityInfo>(DDS::DynamicType_ptr type, const  ::UATM::availabilityInfo& value)
{
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  if (type) {
    return new DynamicDataAdapterImpl< ::UATM::availabilityInfo,  ::UATM::availabilityInfo>(type, value);
  }
#  else
  ACE_UNUSED_ARG(type);
  ACE_UNUSED_ARG(value);
#  endif
  return 0;
}

template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::availabilityInfo,  ::UATM::availabilityInfo>(DDS::DynamicType_ptr type,  ::UATM::availabilityInfo& value)
{
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  if (type) {
    return new DynamicDataAdapterImpl< ::UATM::availabilityInfo,  ::UATM::availabilityInfo>(type, value);
  }
#  else
  ACE_UNUSED_ARG(type);
  ACE_UNUSED_ARG(value);
#  endif
  return 0;
}

template <>
const  ::UATM::availabilityInfo* get_dynamic_data_adapter_value< ::UATM::availabilityInfo,  ::UATM::availabilityInfo>(DDS::DynamicData_ptr dd)
{
  ACE_UNUSED_ARG(dd);
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  typedef DynamicDataAdapterImpl< ::UATM::availabilityInfo,  ::UATM::availabilityInfo> Dda;
  const Dda* const dda = dynamic_cast<Dda*>(dd);
  if (dda) {
    return &dda->wrapped();
  }
#  endif
  return 0;
}
#endif // ifndef OPENDDS_SAFETY_PROFILE

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End STRUCT: availabilityInfo */

/* End MODULE: UATM */


/* Begin MODULE: UATM */



/* Begin STRUCT: bookingFlightRequest */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> const XTypes::TypeIdentifier& getMinimalTypeIdentifier<UATM_bookingFlightRequest_xtag>()
{
  static XTypes::TypeIdentifier ti;
  ACE_GUARD_RETURN(ACE_Thread_Mutex, guard, TheServiceParticipant->get_static_xtypes_lock(), ti);
  if (ti.kind() == XTypes::TK_NONE) {
    ti = XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(43, 93, 40, 52, 166, 179, 254, 144, 146, 112, 150, 225, 171, 85));
  }
  return ti;
}

template<> const XTypes::TypeMap& getMinimalTypeMap<UATM_bookingFlightRequest_xtag>()
{
  return OPENDDS_IDL_FILE_SPECIFIC(get_minimal_type_map, 0)();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool vread(OpenDDS::DCPS::ValueReader& value_reader,  ::UATM::bookingFlightRequest& value)
{
  ACE_UNUSED_ARG(value_reader);
  ACE_UNUSED_ARG(value);
  static const ListMemberHelper::Pair pairs[] = {{"booking_id",0},{"costumer_id",1},{"flight_id",2},{"skyport_id",3},{0,0}};
  ListMemberHelper helper(pairs);
  if (!value_reader.begin_struct(OpenDDS::DCPS::APPENDABLE)) return false;
  XTypes::MemberId member_id;
  while (value_reader.members_remaining()) {
    if (!value_reader.begin_struct_member(member_id, helper)) return false;
    switch (member_id) {
    case 0: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.booking_id = x.c_str();
      }
      break;
    }
    case 1: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.costumer_id = x.c_str();
      }
      break;
    }
    case 2: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.flight_id = x.c_str();
      }
      break;
    }
    case 3: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.skyport_id = x.c_str();
      }
      break;
    }
    }
    if (!value_reader.end_struct_member()) return false;
  }
  if (!value_reader.end_struct()) return false;
  return true;
}

bool vread(OpenDDS::DCPS::ValueReader& value_reader, const NestedKeyOnly< ::UATM::bookingFlightRequest>& value)
{
  ACE_UNUSED_ARG(value_reader);
  ACE_UNUSED_ARG(value);
  static const ListMemberHelper::Pair pairs[] = {{"booking_id",0},{"costumer_id",1},{"flight_id",2},{"skyport_id",3},{0,0}};
  ListMemberHelper helper(pairs);
  if (!value_reader.begin_struct(OpenDDS::DCPS::APPENDABLE)) return false;
  XTypes::MemberId member_id;
  while (value_reader.members_remaining()) {
    if (!value_reader.begin_struct_member(member_id, helper)) return false;
    switch (member_id) {
    case 0: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.value.booking_id = x.c_str();
      }
      break;
    }
    case 1: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.value.costumer_id = x.c_str();
      }
      break;
    }
    case 2: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.value.flight_id = x.c_str();
      }
      break;
    }
    case 3: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.value.skyport_id = x.c_str();
      }
      break;
    }
    }
    if (!value_reader.end_struct_member()) return false;
  }
  if (!value_reader.end_struct()) return false;
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const  ::UATM::bookingFlightRequest& value)
{
  ACE_UNUSED_ARG(value_writer);
  ACE_UNUSED_ARG(value);
  if (!value_writer.begin_struct(OpenDDS::DCPS::APPENDABLE)) {
    return false;
  }
  {
    MemberParam param(0, false, "booking_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.booking_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(1, false, "costumer_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.costumer_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(2, false, "flight_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.flight_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(3, false, "skyport_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.skyport_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  return value_writer.end_struct();
}

bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const NestedKeyOnly<const  ::UATM::bookingFlightRequest>& value)
{
  ACE_UNUSED_ARG(value_writer);
  ACE_UNUSED_ARG(value);
  if (!value_writer.begin_struct(OpenDDS::DCPS::APPENDABLE)) {
    return false;
  }
  {
    MemberParam param(0, false, "booking_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.value.booking_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(1, false, "costumer_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.value.costumer_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(2, false, "flight_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.value.flight_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(3, false, "skyport_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.value.skyport_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  return value_writer.end_struct();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> void set_default( ::UATM::bookingFlightRequest& stru)
{
  ACE_UNUSED_ARG(stru);
  stru.booking_id = "";
  stru.costumer_id = "";
  stru.flight_id = "";
  stru.skyport_id = "";
}

void serialized_size(const Encoding& encoding, size_t& size, const ::UATM::bookingFlightRequest& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.booking_id.in()) + 1;
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.costumer_id.in()) + 1;
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.flight_id.in()) + 1;
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.skyport_id.in()) + 1;
}

bool operator<<(Serializer& strm, const ::UATM::bookingFlightRequest& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
  return (strm << ACE_OutputCDR::from_string(stru.booking_id.in(), 20))
    && (strm << ACE_OutputCDR::from_string(stru.costumer_id.in(), 20))
    && (strm << ACE_OutputCDR::from_string(stru.flight_id.in(), 20))
    && (strm << ACE_OutputCDR::from_string(stru.skyport_id.in(), 20));
}

bool operator>>(Serializer& strm,  ::UATM::bookingFlightRequest& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  bool reached_end_of_struct = false;
  ACE_UNUSED_ARG(reached_end_of_struct);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.booking_id = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.booking_id.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.costumer_id = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.costumer_id.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.flight_id = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.flight_id.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.skyport_id = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.skyport_id.out(), 20))) {
      return false;
    }
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const ::UATM::bookingFlightRequest>& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.value.booking_id.in()) + 1;
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.value.costumer_id.in()) + 1;
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.value.flight_id.in()) + 1;
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.value.skyport_id.in()) + 1;
}

bool operator<<(Serializer& strm, const NestedKeyOnly<const ::UATM::bookingFlightRequest>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
  return (strm << ACE_OutputCDR::from_string(stru.value.booking_id.in(), 20))
    && (strm << ACE_OutputCDR::from_string(stru.value.costumer_id.in(), 20))
    && (strm << ACE_OutputCDR::from_string(stru.value.flight_id.in(), 20))
    && (strm << ACE_OutputCDR::from_string(stru.value.skyport_id.in(), 20));
}

bool operator>>(Serializer& strm, const NestedKeyOnly< ::UATM::bookingFlightRequest>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  bool reached_end_of_struct = false;
  ACE_UNUSED_ARG(reached_end_of_struct);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.booking_id = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.value.booking_id.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.costumer_id = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.value.costumer_id.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.flight_id = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.value.flight_id.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.skyport_id = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.value.skyport_id.out(), 20))) {
      return false;
    }
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

void serialized_size(const Encoding& encoding, size_t& size, const KeyOnly<const  ::UATM::bookingFlightRequest> stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  switch (encoding.xcdr_version()) {
  case Encoding::XCDR_VERSION_1:
    {
    primitive_serialized_size_ulong(encoding, size);
    size += ACE_OS::strlen(stru.value.booking_id.in()) + 1;
    break;
    }
  case Encoding::XCDR_VERSION_2:
    {
    primitive_serialized_size_ulong(encoding, size);
    size += ACE_OS::strlen(stru.value.booking_id.in()) + 1;
    break;
    }
  case Encoding::XCDR_VERSION_NONE:
    {
    primitive_serialized_size_ulong(encoding, size);
    size += ACE_OS::strlen(stru.value.booking_id.in()) + 1;
    break;
    }
  }
}

bool operator<<(Serializer& strm, KeyOnly<const  ::UATM::bookingFlightRequest> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << ACE_OutputCDR::from_string(stru.value.booking_id.in(), 20));
}

bool operator>>(Serializer& strm, KeyOnly< ::UATM::bookingFlightRequest> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> ACE_InputCDR::to_string(stru.value.booking_id.out(), 20));
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace DCPS {
bool DDSTraits< ::UATM::bookingFlightRequest>::is_key(const char* field)
{
  ACE_UNUSED_ARG(field);
  if (!ACE_OS::strcmp(field, "booking_id")) {
    return true;
  }
  return false;
}
} // namespace DCPS
} // namespace OpenDDS
OPENDDS_END_VERSIONED_NAMESPACE_DECL

namespace UATM {
::DDS::DataWriter_ptr bookingFlightRequestTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<bookingFlightRequest> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}

::DDS::DataReader_ptr bookingFlightRequestTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<bookingFlightRequest> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}

#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr bookingFlightRequestTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<bookingFlightRequest> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<bookingFlightRequest, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */

#ifndef OPENDDS_SAFETY_PROFILE
bookingFlightRequest* bookingFlightRequestTypeSupportImpl::create_sample(::DDS::DynamicData_ptr src)
{
  bookingFlightRequest* value = new bookingFlightRequest;
  const ::DDS::ReturnCode_t rc = OpenDDS::DCPS::TypeSupportImpl_T<bookingFlightRequest>::create_sample_rc(*value, src);
  if (rc != ::DDS::RETCODE_OK && OpenDDS::DCPS::log_level >= OpenDDS::DCPS::LogLevel::Warning) {
    ACE_ERROR((LM_WARNING, "(%P|%t) WARNING: bookingFlightRequestTypeSupportImpl::create_sample: "
      "create_sample_rc failed: %C\n", OpenDDS::DCPS::retcode_to_string(rc)));
  }
  return value;
}
#endif

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& bookingFlightRequestTypeSupportImpl::getMetaStructForType() const
{
  return OpenDDS::DCPS::getMetaStruct<bookingFlightRequest>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */

namespace {
  OpenDDS::DCPS::TypeSupportInitializer<bookingFlightRequestTypeSupportImpl> ts_init_UATM_bookingFlightRequest;
}

const OpenDDS::XTypes::TypeIdentifier& bookingFlightRequestTypeSupportImpl::getMinimalTypeIdentifier() const
{
  return OpenDDS::DCPS::getMinimalTypeIdentifier<OpenDDS::DCPS::UATM_bookingFlightRequest_xtag>();
}

const OpenDDS::XTypes::TypeMap& bookingFlightRequestTypeSupportImpl::getMinimalTypeMap() const
{
  return OpenDDS::DCPS::getMinimalTypeMap<OpenDDS::DCPS::UATM_bookingFlightRequest_xtag>();
}

const OpenDDS::XTypes::TypeIdentifier& bookingFlightRequestTypeSupportImpl::getCompleteTypeIdentifier() const
{
  static OpenDDS::XTypes::TypeIdentifier ti;
  return ti;
}

const OpenDDS::XTypes::TypeMap& bookingFlightRequestTypeSupportImpl::getCompleteTypeMap() const
{
  static OpenDDS::XTypes::TypeMap tm;
  return tm;
}

::DDS::ReturnCode_t bookingFlightRequestTypeSupportImpl::encode_to_string(const bookingFlightRequest& in, CORBA::String_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
#if OPENDDS_HAS_JSON_VALUE_WRITER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    rapidjson::StringBuffer buffer;
    rapidjson::Writer<rapidjson::StringBuffer> writer(buffer);
    OpenDDS::DCPS::JsonValueWriter<rapidjson::Writer<rapidjson::StringBuffer> > jvw(writer);
    if (!vwrite(jvw, in)) {
      return ::DDS::RETCODE_ERROR;
    }
    out = buffer.GetString();
    return ::DDS::RETCODE_OK;
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  out = "";
  return ::DDS::RETCODE_UNSUPPORTED;
}

::DDS::ReturnCode_t bookingFlightRequestTypeSupportImpl::encode_to_bytes(const bookingFlightRequest& in, ::DDS::OctetSeq_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
#if OPENDDS_HAS_JSON_VALUE_WRITER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    CORBA::String_var buffer;
    const ::DDS::ReturnCode_t ret = encode_to_string(in, buffer, format);
    if (ret == ::DDS::RETCODE_OK) {
      const ::DDS::UInt32 len = static_cast< ::DDS::UInt32>(std::strlen(buffer));
      out = new ::DDS::OctetSeq(len);
      out->length(len);
      std::memcpy(out->get_buffer(), buffer, len);
      return ::DDS::RETCODE_OK;
    } else {
      out = new ::DDS::OctetSeq();
      return ret;
    }
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  out = new ::DDS::OctetSeq();
  return ::DDS::RETCODE_UNSUPPORTED;
}

::DDS::ReturnCode_t bookingFlightRequestTypeSupportImpl::decode_from_string(const char* in, bookingFlightRequest_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
  out = new bookingFlightRequest;
  OpenDDS::DCPS::set_default(*out);
#if OPENDDS_HAS_JSON_VALUE_READER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    rapidjson::StringStream buffer(in);
    OpenDDS::DCPS::JsonValueReader<> jvr(buffer);
    return vread(jvr, *out) ? ::DDS::RETCODE_OK : ::DDS::RETCODE_ERROR;
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  return ::DDS::RETCODE_UNSUPPORTED;
}

::DDS::ReturnCode_t bookingFlightRequestTypeSupportImpl::decode_from_bytes(const ::DDS::OctetSeq& in, bookingFlightRequest_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
#if OPENDDS_HAS_JSON_VALUE_READER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    return decode_from_string(reinterpret_cast<const char*>(in.get_buffer()), out, format);
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  out = new bookingFlightRequest();
  return ::DDS::RETCODE_UNSUPPORTED;
}

bookingFlightRequestTypeSupport::_ptr_type bookingFlightRequestTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl< ::UATM::bookingFlightRequest> : MetaStruct {
  typedef  ::UATM::bookingFlightRequest T;

#ifndef OPENDDS_NO_MULTI_TOPIC
  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 1; }

#endif /* OPENDDS_NO_MULTI_TOPIC */

  Value getValue(const void* stru, const char* field) const
  {
    const ::UATM::bookingFlightRequest& typed = *static_cast<const ::UATM::bookingFlightRequest*>(stru);
    ACE_UNUSED_ARG(typed);
    if (std::strcmp(field, "booking_id") == 0) {
      return typed.booking_id.in();
    }
    if (std::strcmp(field, "costumer_id") == 0) {
      return typed.costumer_id.in();
    }
    if (std::strcmp(field, "flight_id") == 0) {
      return typed.flight_id.in();
    }
    if (std::strcmp(field, "skyport_id") == 0) {
      return typed.skyport_id.in();
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::bookingFlightRequest)");
  }

  Value getValue(Serializer& strm, const char* field, TypeSupportImpl* = 0) const
  {
    const Encoding& encoding = strm.encoding();
    ACE_UNUSED_ARG(encoding);
    size_t total_size = 0;
    if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
      if (!strm.read_delimiter(total_size)) {
        throw std::runtime_error("Unable to reader delimiter in getValue");
      }
    }
    std::string base_field = field;
    const size_t index = base_field.find('.');
    std::string subfield;
    if (index != std::string::npos) {
      subfield = base_field.substr(index + 1);
      base_field = base_field.substr(0, index);
    }
    if (base_field == "booking_id") {
      TAO::String_Manager val;
      if (!(strm >> val.out())) {
        throw std::runtime_error("Field 'booking_id' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(strm >> len)) {
        throw std::runtime_error("String 'booking_id' length could not be deserialized");
      }
      if (!strm.skip(len)) {
        throw std::runtime_error("String 'booking_id' contents could not be skipped");
      }
    }
    if (base_field == "costumer_id") {
      TAO::String_Manager val;
      if (!(strm >> val.out())) {
        throw std::runtime_error("Field 'costumer_id' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(strm >> len)) {
        throw std::runtime_error("String 'costumer_id' length could not be deserialized");
      }
      if (!strm.skip(len)) {
        throw std::runtime_error("String 'costumer_id' contents could not be skipped");
      }
    }
    if (base_field == "flight_id") {
      TAO::String_Manager val;
      if (!(strm >> val.out())) {
        throw std::runtime_error("Field 'flight_id' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(strm >> len)) {
        throw std::runtime_error("String 'flight_id' length could not be deserialized");
      }
      if (!strm.skip(len)) {
        throw std::runtime_error("String 'flight_id' contents could not be skipped");
      }
    }
    if (base_field == "skyport_id") {
      TAO::String_Manager val;
      if (!(strm >> val.out())) {
        throw std::runtime_error("Field 'skyport_id' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(strm >> len)) {
        throw std::runtime_error("String 'skyport_id' length could not be deserialized");
      }
      if (!strm.skip(len)) {
        throw std::runtime_error("String 'skyport_id' contents could not be skipped");
      }
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Did not find field in getValue");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "booking_id") == 0) {
      return make_field_cmp(&T::booking_id, next);
    }
    if (std::strcmp(field, "costumer_id") == 0) {
      return make_field_cmp(&T::costumer_id, next);
    }
    if (std::strcmp(field, "flight_id") == 0) {
      return make_field_cmp(&T::flight_id, next);
    }
    if (std::strcmp(field, "skyport_id") == 0) {
      return make_field_cmp(&T::skyport_id, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::bookingFlightRequest)");
  }

#ifndef OPENDDS_NO_MULTI_TOPIC
  const char** getFieldNames() const
  {
    static const char* names[] = {"booking_id", "costumer_id", "flight_id", "skyport_id", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "booking_id") == 0) {
      return &static_cast<const T*>(stru)->booking_id;
    }
    if (std::strcmp(field, "costumer_id") == 0) {
      return &static_cast<const T*>(stru)->costumer_id;
    }
    if (std::strcmp(field, "flight_id") == 0) {
      return &static_cast<const T*>(stru)->flight_id;
    }
    if (std::strcmp(field, "skyport_id") == 0) {
      return &static_cast<const T*>(stru)->skyport_id;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::bookingFlightRequest)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "booking_id") == 0) {
      static_cast<T*>(lhs)->booking_id = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "costumer_id") == 0) {
      static_cast<T*>(lhs)->costumer_id = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "flight_id") == 0) {
      static_cast<T*>(lhs)->flight_id = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "skyport_id") == 0) {
      static_cast<T*>(lhs)->skyport_id = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::bookingFlightRequest)");
  }

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "booking_id") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->booking_id.in(), static_cast<const T*>(rhs)->booking_id.in());
    }
    if (std::strcmp(field, "costumer_id") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->costumer_id.in(), static_cast<const T*>(rhs)->costumer_id.in());
    }
    if (std::strcmp(field, "flight_id") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->flight_id.in(), static_cast<const T*>(rhs)->flight_id.in());
    }
    if (std::strcmp(field, "skyport_id") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->skyport_id.in(), static_cast<const T*>(rhs)->skyport_id.in());
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::bookingFlightRequest)");
  }
#endif /* OPENDDS_NO_MULTI_TOPIC */

};

template<>
const MetaStruct& getMetaStruct< ::UATM::bookingFlightRequest>()
{
  static MetaStructImpl< ::UATM::bookingFlightRequest> msi;
  return msi;
}

bool gen_skip_over(Serializer& ser,  ::UATM::bookingFlightRequest*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl< ::UATM::bookingFlightRequest>().getValue(ser, "");
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif // ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace XTypes {

#ifndef OPENDDS_SAFETY_PROFILE
#if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
template <>
class DynamicDataAdapterImpl< ::UATM::bookingFlightRequest,  ::UATM::bookingFlightRequest > : public DynamicDataAdapter_T< ::UATM::bookingFlightRequest> {
public:
  DynamicDataAdapterImpl(DDS::DynamicType_ptr type,  ::UATM::bookingFlightRequest& value)
    : DynamicDataAdapter_T< ::UATM::bookingFlightRequest>(type, value)
  {
  }

  DynamicDataAdapterImpl(DDS::DynamicType_ptr type, const  ::UATM::bookingFlightRequest& value)
    : DynamicDataAdapter_T< ::UATM::bookingFlightRequest>(type, value)
  {
  }

  DDS::ReturnCode_t clear_all_values()
  {
    const DDS::ReturnCode_t rc = assert_mutable("DynamicDataAdapter::clear_all_values");
    if (rc == DDS::RETCODE_OK) {
      OpenDDS::DCPS::set_default(value_);
    }
    return rc;
  }

  DDS::UInt32 get_item_count()
  {
    return 4;
  }

  bool serialized_size(const OpenDDS::DCPS::Encoding& enc, size_t& size, OpenDDS::DCPS::Sample::Extent ext) const
  {
    using namespace OpenDDS::DCPS;
    if (ext == Sample::Full) {
      DCPS::serialized_size(enc, size, value_);
    } else if (ext == Sample::NestedKeyOnly) {
      const NestedKeyOnly<const  ::UATM::bookingFlightRequest> nested_key_only(value_);
      DCPS::serialized_size(enc, size, nested_key_only);
    } else {
      return false; // Non-topic type
    }
    return true;
  }

  bool serialize(OpenDDS::DCPS::Serializer& ser, OpenDDS::DCPS::Sample::Extent ext) const
  {
    using namespace OpenDDS::DCPS;
    if (ext == Sample::Full) {
      return ser << value_;
    } else if (ext == Sample::NestedKeyOnly) {
      NestedKeyOnly<const  ::UATM::bookingFlightRequest> nested_key_only(value_);
      return ser << nested_key_only;
    } else {
      return false; // Non-topic type
    }
  }

protected:
  DDS::ReturnCode_t get_raw_value(const char* method, void* dest, DDS::TypeKind tk, DDS::MemberId id)
  {
    switch (id) {
    case 0:
      {
        return get_s8_raw_value(method, dest, tk, value_.booking_id, id);
      }
    case 1:
      {
        return get_s8_raw_value(method, dest, tk, value_.costumer_id, id);
      }
    case 2:
      {
        return get_s8_raw_value(method, dest, tk, value_.flight_id, id);
      }
    case 3:
      {
        return get_s8_raw_value(method, dest, tk, value_.skyport_id, id);
      }
    default:
      return invalid_id(method, id);
    }
  }

  DDS::ReturnCode_t set_raw_value(const char* method, DDS::MemberId id, const void* source, DDS::TypeKind tk)
  {
    DDS::ReturnCode_t rc = assert_mutable(method);
    if (rc != DDS::RETCODE_OK) {
      return rc;
    }
    switch (id) {
    case 0:
      {
        return set_s8_raw_value(method, value_.booking_id.inout(), id, source, tk);
      }
    case 1:
      {
        return set_s8_raw_value(method, value_.costumer_id.inout(), id, source, tk);
      }
    case 2:
      {
        return set_s8_raw_value(method, value_.flight_id.inout(), id, source, tk);
      }
    case 3:
      {
        return set_s8_raw_value(method, value_.skyport_id.inout(), id, source, tk);
      }
    default:
      return invalid_id(method, id);
    }
  }
};

#endif // if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER

template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::bookingFlightRequest,  ::UATM::bookingFlightRequest>(DDS::DynamicType_ptr type, const  ::UATM::bookingFlightRequest& value)
{
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  if (type) {
    return new DynamicDataAdapterImpl< ::UATM::bookingFlightRequest,  ::UATM::bookingFlightRequest>(type, value);
  }
#  else
  ACE_UNUSED_ARG(type);
  ACE_UNUSED_ARG(value);
#  endif
  return 0;
}

template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::bookingFlightRequest,  ::UATM::bookingFlightRequest>(DDS::DynamicType_ptr type,  ::UATM::bookingFlightRequest& value)
{
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  if (type) {
    return new DynamicDataAdapterImpl< ::UATM::bookingFlightRequest,  ::UATM::bookingFlightRequest>(type, value);
  }
#  else
  ACE_UNUSED_ARG(type);
  ACE_UNUSED_ARG(value);
#  endif
  return 0;
}

template <>
const  ::UATM::bookingFlightRequest* get_dynamic_data_adapter_value< ::UATM::bookingFlightRequest,  ::UATM::bookingFlightRequest>(DDS::DynamicData_ptr dd)
{
  ACE_UNUSED_ARG(dd);
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  typedef DynamicDataAdapterImpl< ::UATM::bookingFlightRequest,  ::UATM::bookingFlightRequest> Dda;
  const Dda* const dda = dynamic_cast<Dda*>(dd);
  if (dda) {
    return &dda->wrapped();
  }
#  endif
  return 0;
}
#endif // ifndef OPENDDS_SAFETY_PROFILE

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End STRUCT: bookingFlightRequest */

/* End MODULE: UATM */


/* Begin MODULE: UATM */



/* Begin TYPEDEF: ArrayString */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> const XTypes::TypeIdentifier& getMinimalTypeIdentifier<UATM_ArrayString_xtag>()
{
  static XTypes::TypeIdentifier ti;
  ACE_GUARD_RETURN(ACE_Thread_Mutex, guard, TheServiceParticipant->get_static_xtypes_lock(), ti);
  if (ti.kind() == XTypes::TK_NONE) {
    ti = XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(126, 198, 253, 33, 84, 187, 219, 157, 152, 51, 230, 44, 169, 26));
  }
  return ti;
}

template<> const XTypes::TypeMap& getMinimalTypeMap<UATM_ArrayString_xtag>()
{
  return OPENDDS_IDL_FILE_SPECIFIC(get_minimal_type_map, 0)();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> void set_default( ::UATM::ArrayString_forany& arr)
{
  ACE_UNUSED_ARG(arr);
  for (CORBA::ULong i0 = 0; i0 < 2; ++i0) {
    arr[i0] = "";
  }
}

void serialized_size(const Encoding& encoding, size_t& size, const  ::UATM::ArrayString_forany& arr)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(arr);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
  for (CORBA::ULong i0 = 0; i0 < 2; ++i0) {
    primitive_serialized_size_ulong(encoding, size);
    size += ACE_OS::strlen(arr[i0].in()) + 1;
  }
}

bool operator<<(Serializer& strm, const  ::UATM::ArrayString_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
serialized_size(encoding, total_size, arr);if (!strm.write_delimiter(total_size)) {  return false;}  }
  for (CORBA::ULong i0 = 0; i0 < 2; ++i0) {
    if (!(strm << arr[i0])) {
      return false;
    }
  }
  return true;
}

bool operator>>(Serializer& strm,  ::UATM::ArrayString_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  bool discard_flag = false;
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_arr = strm.rpos() + total_size;
  for (CORBA::ULong i0 = 0; i0 < 2; ++i0) {
    if (!(strm >> ACE_InputCDR::to_string(arr[i0].out(), 10))) {
      if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
        strm.set_construction_status(Serializer::ElementConstructionFailure);
        strm.skip(end_of_arr - strm.rpos());
        return false;
      } else {
        strm.set_construction_status(Serializer::ConstructionSuccessful);
        discard_flag = true;
      }
    }
  }
  if (discard_flag) {
    strm.set_construction_status(Serializer::ElementConstructionFailure);
    return false;
  }
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser,  ::UATM::ArrayString_forany*)
{
  ACE_UNUSED_ARG(ser);
  const Encoding& encoding = ser.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!ser.read_delimiter(total_size)) {
      return false;
    }
  }
  for (ACE_CDR::ULong i = 0; i < 2; ++i) {
    ACE_CDR::ULong strlength;
    if (!(ser >> strlength && ser.skip(strlength))) return false;
  }
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif // ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace XTypes {

#ifndef OPENDDS_SAFETY_PROFILE
#if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
template <>
class DynamicDataAdapterImpl< ::UATM::ArrayString, UATM_ArrayString_dda_tag > : public DynamicDataAdapter_T< ::UATM::ArrayString> {
public:
  DynamicDataAdapterImpl(DDS::DynamicType_ptr type,  ::UATM::ArrayString& value)
    : DynamicDataAdapter_T< ::UATM::ArrayString>(type, value)
  {
  }

  DynamicDataAdapterImpl(DDS::DynamicType_ptr type, const  ::UATM::ArrayString& value)
    : DynamicDataAdapter_T< ::UATM::ArrayString>(type, value)
  {
  }

  DDS::ReturnCode_t clear_all_values()
  {
    const DDS::ReturnCode_t rc = assert_mutable("DynamicDataAdapter::clear_all_values");
    if (rc == DDS::RETCODE_OK) {
      OpenDDS::DCPS::set_default(value_);
    }
    return rc;
  }

  DDS::UInt32 get_item_count()
  {
    return 2;
  }

  bool serialized_size(const OpenDDS::DCPS::Encoding& enc, size_t& size, OpenDDS::DCPS::Sample::Extent ext) const
  {
    ACE_UNUSED_ARG(ext);
    OpenDDS::DCPS::serialized_size(enc, size,  ::UATM::ArrayString_forany(value_));
    return true;
  }

  bool serialize(OpenDDS::DCPS::Serializer& ser, OpenDDS::DCPS::Sample::Extent ext) const
  {
    ACE_UNUSED_ARG(ext);
    using namespace OpenDDS::DCPS;
    return ser <<  ::UATM::ArrayString_forany(value_);
  }

protected:
  DDS::ReturnCode_t get_raw_value(const char* method, void* dest, DDS::TypeKind tk, DDS::MemberId id)
  {
    const DDS::ReturnCode_t rc = check_index(method, id, 2);
    if (rc != DDS::RETCODE_OK) {
      return rc;
    }
    return get_s8_raw_value(method, dest, tk, (&value_[0])[id], id);
  }

  DDS::ReturnCode_t set_raw_value(const char* method, DDS::MemberId id, const void* source, DDS::TypeKind tk)
  {
    DDS::ReturnCode_t rc = assert_mutable(method);
    if (rc != DDS::RETCODE_OK) {
      return rc;
    }
    rc = check_index(method, id, 2);
    if (rc != DDS::RETCODE_OK) {
      return rc;
    }
    return set_s8_raw_value(method, (&value_[0])[id].inout(), id, source, tk);
  }
};

#endif // if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER

template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::ArrayString, UATM_ArrayString_dda_tag>(DDS::DynamicType_ptr type, const  ::UATM::ArrayString& value)
{
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  if (type) {
    return new DynamicDataAdapterImpl< ::UATM::ArrayString, UATM_ArrayString_dda_tag>(type, value);
  }
#  else
  ACE_UNUSED_ARG(type);
  ACE_UNUSED_ARG(value);
#  endif
  return 0;
}

template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::ArrayString, UATM_ArrayString_dda_tag>(DDS::DynamicType_ptr type,  ::UATM::ArrayString& value)
{
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  if (type) {
    return new DynamicDataAdapterImpl< ::UATM::ArrayString, UATM_ArrayString_dda_tag>(type, value);
  }
#  else
  ACE_UNUSED_ARG(type);
  ACE_UNUSED_ARG(value);
#  endif
  return 0;
}

template <>
const  ::UATM::ArrayString* get_dynamic_data_adapter_value< ::UATM::ArrayString, UATM_ArrayString_dda_tag>(DDS::DynamicData_ptr dd)
{
  ACE_UNUSED_ARG(dd);
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  typedef DynamicDataAdapterImpl< ::UATM::ArrayString, UATM_ArrayString_dda_tag> Dda;
  const Dda* const dda = dynamic_cast<Dda*>(dd);
  if (dda) {
    return &dda->wrapped();
  }
#  endif
  return 0;
}
#endif // ifndef OPENDDS_SAFETY_PROFILE

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End TYPEDEF: ArrayString */

/* End MODULE: UATM */
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

namespace {
XTypes::TypeObject OPENDDS_IDL_FILE_SPECIFIC(minimal_to, 0)()
{
  static const unsigned char to_bytes[] = { 84, 0, 0, 0, 241, 81, 10, 0, 1, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 4, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 112, 20, 176, 6, 10, 247, 12, 0, 0, 0, 1, 0, 0, 0, 1, 0, 112, 20, 171, 226, 100, 145, 12, 0, 0, 0, 2, 0, 0, 0, 1, 0, 112, 20, 114, 20, 76, 242, 12, 0, 0, 0, 3, 0, 0, 0, 1, 0, 112, 20, 1, 103, 53, 119  };
  XTypes::TypeObject to;
  if (!to_type_object(to_bytes, sizeof(to_bytes), to)) {
    throw std::runtime_error("Could not deserialize minimal Type Object 0");
  }
  return to;
}

XTypes::TypeObject OPENDDS_IDL_FILE_SPECIFIC(minimal_to, 1)()
{
  static const unsigned char to_bytes[] = { 27, 0, 0, 0, 241, 48, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 144, 243, 1, 0, 0, 0, 1, 0, 0, 0, 2, 112, 10  };
  XTypes::TypeObject to;
  if (!to_type_object(to_bytes, sizeof(to_bytes), to)) {
    throw std::runtime_error("Could not deserialize minimal Type Object 1");
  }
  return to;
}

XTypes::TypeObject OPENDDS_IDL_FILE_SPECIFIC(minimal_to, 2)()
{
  static const unsigned char to_bytes[] = { 100, 0, 0, 0, 241, 81, 10, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 0, 0, 0, 5, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 112, 10, 226, 243, 239, 91, 12, 0, 0, 0, 1, 0, 0, 0, 1, 0, 112, 10, 69, 98, 240, 208, 11, 0, 0, 0, 2, 0, 0, 0, 1, 0, 1, 228, 137, 76, 161, 0, 12, 0, 0, 0, 3, 0, 0, 0, 1, 0, 112, 20, 1, 103, 53, 119, 12, 0, 0, 0, 4, 0, 0, 0, 1, 0, 112, 10, 209, 235, 16, 141  };
  XTypes::TypeObject to;
  if (!to_type_object(to_bytes, sizeof(to_bytes), to)) {
    throw std::runtime_error("Could not deserialize minimal Type Object 2");
  }
  return to;
}

XTypes::TypeMap OPENDDS_IDL_FILE_SPECIFIC(get_minimal_type_map_private, 0)()
{
  XTypes::TypeMap tm;
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(43, 93, 40, 52, 166, 179, 254, 144, 146, 112, 150, 225, 171, 85))] = OPENDDS_IDL_FILE_SPECIFIC(minimal_to, 0)();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(126, 198, 253, 33, 84, 187, 219, 157, 152, 51, 230, 44, 169, 26))] = OPENDDS_IDL_FILE_SPECIFIC(minimal_to, 1)();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(148, 232, 5, 214, 13, 177, 200, 185, 42, 66, 38, 223, 9, 149))] = OPENDDS_IDL_FILE_SPECIFIC(minimal_to, 2)();
  return tm;
}

}

const XTypes::TypeMap& OPENDDS_IDL_FILE_SPECIFIC(get_minimal_type_map, 0)()
{
  static XTypes::TypeMap tm;
  ACE_GUARD_RETURN(ACE_Thread_Mutex, guard, TheServiceParticipant->get_static_xtypes_lock(), tm);
  if (tm.empty()) {
    tm = OPENDDS_IDL_FILE_SPECIFIC(get_minimal_type_map_private, 0)();
  }
  return tm;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

