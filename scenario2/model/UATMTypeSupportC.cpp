// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.5.21
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_codegen.cpp:372


#include "UATMTypeSupportC.h"
#include "tao/CDR.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "UATMTypeSupportC.inl"
#endif /* !defined INLINE */
// TAO_IDL - Generated from
// C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_interface\interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for UATM::availabilityInfoTypeSupport.

UATM::availabilityInfoTypeSupport_ptr
TAO::Objref_Traits<UATM::availabilityInfoTypeSupport>::duplicate (
    UATM::availabilityInfoTypeSupport_ptr p)
{
  return UATM::availabilityInfoTypeSupport::_duplicate (p);
}

void
TAO::Objref_Traits<UATM::availabilityInfoTypeSupport>::release (
    UATM::availabilityInfoTypeSupport_ptr p)
{
  ::CORBA::release (p);
}

UATM::availabilityInfoTypeSupport_ptr
TAO::Objref_Traits<UATM::availabilityInfoTypeSupport>::nil (void)
{
  return UATM::availabilityInfoTypeSupport::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<UATM::availabilityInfoTypeSupport>::marshal (
    const UATM::availabilityInfoTypeSupport_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



UATM::availabilityInfoTypeSupport::availabilityInfoTypeSupport (void)
{}

UATM::availabilityInfoTypeSupport::~availabilityInfoTypeSupport (void)
{
}

UATM::availabilityInfoTypeSupport_ptr
UATM::availabilityInfoTypeSupport::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return availabilityInfoTypeSupport::_duplicate (
      dynamic_cast<availabilityInfoTypeSupport_ptr> (_tao_objref));
}

UATM::availabilityInfoTypeSupport_ptr
UATM::availabilityInfoTypeSupport::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return availabilityInfoTypeSupport::_duplicate (
      dynamic_cast<availabilityInfoTypeSupport_ptr> (_tao_objref));
}

UATM::availabilityInfoTypeSupport_ptr
UATM::availabilityInfoTypeSupport::_nil (void)
{
  return 0;
}

UATM::availabilityInfoTypeSupport_ptr
UATM::availabilityInfoTypeSupport::_duplicate (availabilityInfoTypeSupport_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
UATM::availabilityInfoTypeSupport::_tao_release (availabilityInfoTypeSupport_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
UATM::availabilityInfoTypeSupport::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/TypeSupport:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:OpenDDS/DCPS/TypeSupport:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:UATM/availabilityInfoTypeSupport:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* UATM::availabilityInfoTypeSupport::_interface_repository_id (void) const
{
  return "IDL:UATM/availabilityInfoTypeSupport:1.0";
}

::CORBA::Boolean
UATM::availabilityInfoTypeSupport::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_interface\interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for UATM::availabilityInfoDataWriter.

UATM::availabilityInfoDataWriter_ptr
TAO::Objref_Traits<UATM::availabilityInfoDataWriter>::duplicate (
    UATM::availabilityInfoDataWriter_ptr p)
{
  return UATM::availabilityInfoDataWriter::_duplicate (p);
}

void
TAO::Objref_Traits<UATM::availabilityInfoDataWriter>::release (
    UATM::availabilityInfoDataWriter_ptr p)
{
  ::CORBA::release (p);
}

UATM::availabilityInfoDataWriter_ptr
TAO::Objref_Traits<UATM::availabilityInfoDataWriter>::nil (void)
{
  return UATM::availabilityInfoDataWriter::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<UATM::availabilityInfoDataWriter>::marshal (
    const UATM::availabilityInfoDataWriter_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



UATM::availabilityInfoDataWriter::availabilityInfoDataWriter (void)
{}

UATM::availabilityInfoDataWriter::~availabilityInfoDataWriter (void)
{
}

UATM::availabilityInfoDataWriter_ptr
UATM::availabilityInfoDataWriter::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return availabilityInfoDataWriter::_duplicate (
      dynamic_cast<availabilityInfoDataWriter_ptr> (_tao_objref));
}

UATM::availabilityInfoDataWriter_ptr
UATM::availabilityInfoDataWriter::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return availabilityInfoDataWriter::_duplicate (
      dynamic_cast<availabilityInfoDataWriter_ptr> (_tao_objref));
}

UATM::availabilityInfoDataWriter_ptr
UATM::availabilityInfoDataWriter::_nil (void)
{
  return 0;
}

UATM::availabilityInfoDataWriter_ptr
UATM::availabilityInfoDataWriter::_duplicate (availabilityInfoDataWriter_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
UATM::availabilityInfoDataWriter::_tao_release (availabilityInfoDataWriter_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
UATM::availabilityInfoDataWriter::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/Entity:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:DDS/DataWriter:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:UATM/availabilityInfoDataWriter:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* UATM::availabilityInfoDataWriter::_interface_repository_id (void) const
{
  return "IDL:UATM/availabilityInfoDataWriter:1.0";
}

::CORBA::Boolean
UATM::availabilityInfoDataWriter::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_interface\interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for UATM::availabilityInfoDataReader.

UATM::availabilityInfoDataReader_ptr
TAO::Objref_Traits<UATM::availabilityInfoDataReader>::duplicate (
    UATM::availabilityInfoDataReader_ptr p)
{
  return UATM::availabilityInfoDataReader::_duplicate (p);
}

void
TAO::Objref_Traits<UATM::availabilityInfoDataReader>::release (
    UATM::availabilityInfoDataReader_ptr p)
{
  ::CORBA::release (p);
}

UATM::availabilityInfoDataReader_ptr
TAO::Objref_Traits<UATM::availabilityInfoDataReader>::nil (void)
{
  return UATM::availabilityInfoDataReader::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<UATM::availabilityInfoDataReader>::marshal (
    const UATM::availabilityInfoDataReader_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



UATM::availabilityInfoDataReader::availabilityInfoDataReader (void)
{}

UATM::availabilityInfoDataReader::~availabilityInfoDataReader (void)
{
}

UATM::availabilityInfoDataReader_ptr
UATM::availabilityInfoDataReader::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return availabilityInfoDataReader::_duplicate (
      dynamic_cast<availabilityInfoDataReader_ptr> (_tao_objref));
}

UATM::availabilityInfoDataReader_ptr
UATM::availabilityInfoDataReader::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return availabilityInfoDataReader::_duplicate (
      dynamic_cast<availabilityInfoDataReader_ptr> (_tao_objref));
}

UATM::availabilityInfoDataReader_ptr
UATM::availabilityInfoDataReader::_nil (void)
{
  return 0;
}

UATM::availabilityInfoDataReader_ptr
UATM::availabilityInfoDataReader::_duplicate (availabilityInfoDataReader_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
UATM::availabilityInfoDataReader::_tao_release (availabilityInfoDataReader_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
UATM::availabilityInfoDataReader::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/Entity:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:DDS/DataReader:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:OpenDDS/DCPS/DataReaderEx:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:UATM/availabilityInfoDataReader:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* UATM::availabilityInfoDataReader::_interface_repository_id (void) const
{
  return "IDL:UATM/availabilityInfoDataReader:1.0";
}

::CORBA::Boolean
UATM::availabilityInfoDataReader::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_interface\interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for UATM::weatherInfoTypeSupport.

UATM::weatherInfoTypeSupport_ptr
TAO::Objref_Traits<UATM::weatherInfoTypeSupport>::duplicate (
    UATM::weatherInfoTypeSupport_ptr p)
{
  return UATM::weatherInfoTypeSupport::_duplicate (p);
}

void
TAO::Objref_Traits<UATM::weatherInfoTypeSupport>::release (
    UATM::weatherInfoTypeSupport_ptr p)
{
  ::CORBA::release (p);
}

UATM::weatherInfoTypeSupport_ptr
TAO::Objref_Traits<UATM::weatherInfoTypeSupport>::nil (void)
{
  return UATM::weatherInfoTypeSupport::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<UATM::weatherInfoTypeSupport>::marshal (
    const UATM::weatherInfoTypeSupport_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



UATM::weatherInfoTypeSupport::weatherInfoTypeSupport (void)
{}

UATM::weatherInfoTypeSupport::~weatherInfoTypeSupport (void)
{
}

UATM::weatherInfoTypeSupport_ptr
UATM::weatherInfoTypeSupport::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return weatherInfoTypeSupport::_duplicate (
      dynamic_cast<weatherInfoTypeSupport_ptr> (_tao_objref));
}

UATM::weatherInfoTypeSupport_ptr
UATM::weatherInfoTypeSupport::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return weatherInfoTypeSupport::_duplicate (
      dynamic_cast<weatherInfoTypeSupport_ptr> (_tao_objref));
}

UATM::weatherInfoTypeSupport_ptr
UATM::weatherInfoTypeSupport::_nil (void)
{
  return 0;
}

UATM::weatherInfoTypeSupport_ptr
UATM::weatherInfoTypeSupport::_duplicate (weatherInfoTypeSupport_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
UATM::weatherInfoTypeSupport::_tao_release (weatherInfoTypeSupport_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
UATM::weatherInfoTypeSupport::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/TypeSupport:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:OpenDDS/DCPS/TypeSupport:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:UATM/weatherInfoTypeSupport:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* UATM::weatherInfoTypeSupport::_interface_repository_id (void) const
{
  return "IDL:UATM/weatherInfoTypeSupport:1.0";
}

::CORBA::Boolean
UATM::weatherInfoTypeSupport::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_interface\interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for UATM::weatherInfoDataWriter.

UATM::weatherInfoDataWriter_ptr
TAO::Objref_Traits<UATM::weatherInfoDataWriter>::duplicate (
    UATM::weatherInfoDataWriter_ptr p)
{
  return UATM::weatherInfoDataWriter::_duplicate (p);
}

void
TAO::Objref_Traits<UATM::weatherInfoDataWriter>::release (
    UATM::weatherInfoDataWriter_ptr p)
{
  ::CORBA::release (p);
}

UATM::weatherInfoDataWriter_ptr
TAO::Objref_Traits<UATM::weatherInfoDataWriter>::nil (void)
{
  return UATM::weatherInfoDataWriter::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<UATM::weatherInfoDataWriter>::marshal (
    const UATM::weatherInfoDataWriter_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



UATM::weatherInfoDataWriter::weatherInfoDataWriter (void)
{}

UATM::weatherInfoDataWriter::~weatherInfoDataWriter (void)
{
}

UATM::weatherInfoDataWriter_ptr
UATM::weatherInfoDataWriter::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return weatherInfoDataWriter::_duplicate (
      dynamic_cast<weatherInfoDataWriter_ptr> (_tao_objref));
}

UATM::weatherInfoDataWriter_ptr
UATM::weatherInfoDataWriter::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return weatherInfoDataWriter::_duplicate (
      dynamic_cast<weatherInfoDataWriter_ptr> (_tao_objref));
}

UATM::weatherInfoDataWriter_ptr
UATM::weatherInfoDataWriter::_nil (void)
{
  return 0;
}

UATM::weatherInfoDataWriter_ptr
UATM::weatherInfoDataWriter::_duplicate (weatherInfoDataWriter_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
UATM::weatherInfoDataWriter::_tao_release (weatherInfoDataWriter_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
UATM::weatherInfoDataWriter::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/Entity:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:DDS/DataWriter:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:UATM/weatherInfoDataWriter:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* UATM::weatherInfoDataWriter::_interface_repository_id (void) const
{
  return "IDL:UATM/weatherInfoDataWriter:1.0";
}

::CORBA::Boolean
UATM::weatherInfoDataWriter::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_interface\interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for UATM::weatherInfoDataReader.

UATM::weatherInfoDataReader_ptr
TAO::Objref_Traits<UATM::weatherInfoDataReader>::duplicate (
    UATM::weatherInfoDataReader_ptr p)
{
  return UATM::weatherInfoDataReader::_duplicate (p);
}

void
TAO::Objref_Traits<UATM::weatherInfoDataReader>::release (
    UATM::weatherInfoDataReader_ptr p)
{
  ::CORBA::release (p);
}

UATM::weatherInfoDataReader_ptr
TAO::Objref_Traits<UATM::weatherInfoDataReader>::nil (void)
{
  return UATM::weatherInfoDataReader::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<UATM::weatherInfoDataReader>::marshal (
    const UATM::weatherInfoDataReader_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



UATM::weatherInfoDataReader::weatherInfoDataReader (void)
{}

UATM::weatherInfoDataReader::~weatherInfoDataReader (void)
{
}

UATM::weatherInfoDataReader_ptr
UATM::weatherInfoDataReader::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return weatherInfoDataReader::_duplicate (
      dynamic_cast<weatherInfoDataReader_ptr> (_tao_objref));
}

UATM::weatherInfoDataReader_ptr
UATM::weatherInfoDataReader::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return weatherInfoDataReader::_duplicate (
      dynamic_cast<weatherInfoDataReader_ptr> (_tao_objref));
}

UATM::weatherInfoDataReader_ptr
UATM::weatherInfoDataReader::_nil (void)
{
  return 0;
}

UATM::weatherInfoDataReader_ptr
UATM::weatherInfoDataReader::_duplicate (weatherInfoDataReader_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
UATM::weatherInfoDataReader::_tao_release (weatherInfoDataReader_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
UATM::weatherInfoDataReader::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/Entity:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:DDS/DataReader:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:OpenDDS/DCPS/DataReaderEx:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:UATM/weatherInfoDataReader:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* UATM::weatherInfoDataReader::_interface_repository_id (void) const
{
  return "IDL:UATM/weatherInfoDataReader:1.0";
}

::CORBA::Boolean
UATM::weatherInfoDataReader::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_interface\interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for UATM::flightRoutesInfoTypeSupport.

UATM::flightRoutesInfoTypeSupport_ptr
TAO::Objref_Traits<UATM::flightRoutesInfoTypeSupport>::duplicate (
    UATM::flightRoutesInfoTypeSupport_ptr p)
{
  return UATM::flightRoutesInfoTypeSupport::_duplicate (p);
}

void
TAO::Objref_Traits<UATM::flightRoutesInfoTypeSupport>::release (
    UATM::flightRoutesInfoTypeSupport_ptr p)
{
  ::CORBA::release (p);
}

UATM::flightRoutesInfoTypeSupport_ptr
TAO::Objref_Traits<UATM::flightRoutesInfoTypeSupport>::nil (void)
{
  return UATM::flightRoutesInfoTypeSupport::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<UATM::flightRoutesInfoTypeSupport>::marshal (
    const UATM::flightRoutesInfoTypeSupport_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



UATM::flightRoutesInfoTypeSupport::flightRoutesInfoTypeSupport (void)
{}

UATM::flightRoutesInfoTypeSupport::~flightRoutesInfoTypeSupport (void)
{
}

UATM::flightRoutesInfoTypeSupport_ptr
UATM::flightRoutesInfoTypeSupport::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return flightRoutesInfoTypeSupport::_duplicate (
      dynamic_cast<flightRoutesInfoTypeSupport_ptr> (_tao_objref));
}

UATM::flightRoutesInfoTypeSupport_ptr
UATM::flightRoutesInfoTypeSupport::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return flightRoutesInfoTypeSupport::_duplicate (
      dynamic_cast<flightRoutesInfoTypeSupport_ptr> (_tao_objref));
}

UATM::flightRoutesInfoTypeSupport_ptr
UATM::flightRoutesInfoTypeSupport::_nil (void)
{
  return 0;
}

UATM::flightRoutesInfoTypeSupport_ptr
UATM::flightRoutesInfoTypeSupport::_duplicate (flightRoutesInfoTypeSupport_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
UATM::flightRoutesInfoTypeSupport::_tao_release (flightRoutesInfoTypeSupport_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
UATM::flightRoutesInfoTypeSupport::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/TypeSupport:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:OpenDDS/DCPS/TypeSupport:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:UATM/flightRoutesInfoTypeSupport:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* UATM::flightRoutesInfoTypeSupport::_interface_repository_id (void) const
{
  return "IDL:UATM/flightRoutesInfoTypeSupport:1.0";
}

::CORBA::Boolean
UATM::flightRoutesInfoTypeSupport::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_interface\interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for UATM::flightRoutesInfoDataWriter.

UATM::flightRoutesInfoDataWriter_ptr
TAO::Objref_Traits<UATM::flightRoutesInfoDataWriter>::duplicate (
    UATM::flightRoutesInfoDataWriter_ptr p)
{
  return UATM::flightRoutesInfoDataWriter::_duplicate (p);
}

void
TAO::Objref_Traits<UATM::flightRoutesInfoDataWriter>::release (
    UATM::flightRoutesInfoDataWriter_ptr p)
{
  ::CORBA::release (p);
}

UATM::flightRoutesInfoDataWriter_ptr
TAO::Objref_Traits<UATM::flightRoutesInfoDataWriter>::nil (void)
{
  return UATM::flightRoutesInfoDataWriter::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<UATM::flightRoutesInfoDataWriter>::marshal (
    const UATM::flightRoutesInfoDataWriter_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



UATM::flightRoutesInfoDataWriter::flightRoutesInfoDataWriter (void)
{}

UATM::flightRoutesInfoDataWriter::~flightRoutesInfoDataWriter (void)
{
}

UATM::flightRoutesInfoDataWriter_ptr
UATM::flightRoutesInfoDataWriter::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return flightRoutesInfoDataWriter::_duplicate (
      dynamic_cast<flightRoutesInfoDataWriter_ptr> (_tao_objref));
}

UATM::flightRoutesInfoDataWriter_ptr
UATM::flightRoutesInfoDataWriter::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return flightRoutesInfoDataWriter::_duplicate (
      dynamic_cast<flightRoutesInfoDataWriter_ptr> (_tao_objref));
}

UATM::flightRoutesInfoDataWriter_ptr
UATM::flightRoutesInfoDataWriter::_nil (void)
{
  return 0;
}

UATM::flightRoutesInfoDataWriter_ptr
UATM::flightRoutesInfoDataWriter::_duplicate (flightRoutesInfoDataWriter_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
UATM::flightRoutesInfoDataWriter::_tao_release (flightRoutesInfoDataWriter_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
UATM::flightRoutesInfoDataWriter::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/Entity:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:DDS/DataWriter:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:UATM/flightRoutesInfoDataWriter:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* UATM::flightRoutesInfoDataWriter::_interface_repository_id (void) const
{
  return "IDL:UATM/flightRoutesInfoDataWriter:1.0";
}

::CORBA::Boolean
UATM::flightRoutesInfoDataWriter::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_interface\interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for UATM::flightRoutesInfoDataReader.

UATM::flightRoutesInfoDataReader_ptr
TAO::Objref_Traits<UATM::flightRoutesInfoDataReader>::duplicate (
    UATM::flightRoutesInfoDataReader_ptr p)
{
  return UATM::flightRoutesInfoDataReader::_duplicate (p);
}

void
TAO::Objref_Traits<UATM::flightRoutesInfoDataReader>::release (
    UATM::flightRoutesInfoDataReader_ptr p)
{
  ::CORBA::release (p);
}

UATM::flightRoutesInfoDataReader_ptr
TAO::Objref_Traits<UATM::flightRoutesInfoDataReader>::nil (void)
{
  return UATM::flightRoutesInfoDataReader::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<UATM::flightRoutesInfoDataReader>::marshal (
    const UATM::flightRoutesInfoDataReader_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



UATM::flightRoutesInfoDataReader::flightRoutesInfoDataReader (void)
{}

UATM::flightRoutesInfoDataReader::~flightRoutesInfoDataReader (void)
{
}

UATM::flightRoutesInfoDataReader_ptr
UATM::flightRoutesInfoDataReader::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return flightRoutesInfoDataReader::_duplicate (
      dynamic_cast<flightRoutesInfoDataReader_ptr> (_tao_objref));
}

UATM::flightRoutesInfoDataReader_ptr
UATM::flightRoutesInfoDataReader::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return flightRoutesInfoDataReader::_duplicate (
      dynamic_cast<flightRoutesInfoDataReader_ptr> (_tao_objref));
}

UATM::flightRoutesInfoDataReader_ptr
UATM::flightRoutesInfoDataReader::_nil (void)
{
  return 0;
}

UATM::flightRoutesInfoDataReader_ptr
UATM::flightRoutesInfoDataReader::_duplicate (flightRoutesInfoDataReader_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
UATM::flightRoutesInfoDataReader::_tao_release (flightRoutesInfoDataReader_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
UATM::flightRoutesInfoDataReader::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/Entity:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:DDS/DataReader:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:OpenDDS/DCPS/DataReaderEx:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:UATM/flightRoutesInfoDataReader:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* UATM::flightRoutesInfoDataReader::_interface_repository_id (void) const
{
  return "IDL:UATM/flightRoutesInfoDataReader:1.0";
}

::CORBA::Boolean
UATM::flightRoutesInfoDataReader::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_interface\interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for UATM::flightAssignTypeSupport.

UATM::flightAssignTypeSupport_ptr
TAO::Objref_Traits<UATM::flightAssignTypeSupport>::duplicate (
    UATM::flightAssignTypeSupport_ptr p)
{
  return UATM::flightAssignTypeSupport::_duplicate (p);
}

void
TAO::Objref_Traits<UATM::flightAssignTypeSupport>::release (
    UATM::flightAssignTypeSupport_ptr p)
{
  ::CORBA::release (p);
}

UATM::flightAssignTypeSupport_ptr
TAO::Objref_Traits<UATM::flightAssignTypeSupport>::nil (void)
{
  return UATM::flightAssignTypeSupport::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<UATM::flightAssignTypeSupport>::marshal (
    const UATM::flightAssignTypeSupport_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



UATM::flightAssignTypeSupport::flightAssignTypeSupport (void)
{}

UATM::flightAssignTypeSupport::~flightAssignTypeSupport (void)
{
}

UATM::flightAssignTypeSupport_ptr
UATM::flightAssignTypeSupport::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return flightAssignTypeSupport::_duplicate (
      dynamic_cast<flightAssignTypeSupport_ptr> (_tao_objref));
}

UATM::flightAssignTypeSupport_ptr
UATM::flightAssignTypeSupport::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return flightAssignTypeSupport::_duplicate (
      dynamic_cast<flightAssignTypeSupport_ptr> (_tao_objref));
}

UATM::flightAssignTypeSupport_ptr
UATM::flightAssignTypeSupport::_nil (void)
{
  return 0;
}

UATM::flightAssignTypeSupport_ptr
UATM::flightAssignTypeSupport::_duplicate (flightAssignTypeSupport_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
UATM::flightAssignTypeSupport::_tao_release (flightAssignTypeSupport_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
UATM::flightAssignTypeSupport::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/TypeSupport:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:OpenDDS/DCPS/TypeSupport:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:UATM/flightAssignTypeSupport:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* UATM::flightAssignTypeSupport::_interface_repository_id (void) const
{
  return "IDL:UATM/flightAssignTypeSupport:1.0";
}

::CORBA::Boolean
UATM::flightAssignTypeSupport::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_interface\interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for UATM::flightAssignDataWriter.

UATM::flightAssignDataWriter_ptr
TAO::Objref_Traits<UATM::flightAssignDataWriter>::duplicate (
    UATM::flightAssignDataWriter_ptr p)
{
  return UATM::flightAssignDataWriter::_duplicate (p);
}

void
TAO::Objref_Traits<UATM::flightAssignDataWriter>::release (
    UATM::flightAssignDataWriter_ptr p)
{
  ::CORBA::release (p);
}

UATM::flightAssignDataWriter_ptr
TAO::Objref_Traits<UATM::flightAssignDataWriter>::nil (void)
{
  return UATM::flightAssignDataWriter::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<UATM::flightAssignDataWriter>::marshal (
    const UATM::flightAssignDataWriter_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



UATM::flightAssignDataWriter::flightAssignDataWriter (void)
{}

UATM::flightAssignDataWriter::~flightAssignDataWriter (void)
{
}

UATM::flightAssignDataWriter_ptr
UATM::flightAssignDataWriter::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return flightAssignDataWriter::_duplicate (
      dynamic_cast<flightAssignDataWriter_ptr> (_tao_objref));
}

UATM::flightAssignDataWriter_ptr
UATM::flightAssignDataWriter::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return flightAssignDataWriter::_duplicate (
      dynamic_cast<flightAssignDataWriter_ptr> (_tao_objref));
}

UATM::flightAssignDataWriter_ptr
UATM::flightAssignDataWriter::_nil (void)
{
  return 0;
}

UATM::flightAssignDataWriter_ptr
UATM::flightAssignDataWriter::_duplicate (flightAssignDataWriter_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
UATM::flightAssignDataWriter::_tao_release (flightAssignDataWriter_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
UATM::flightAssignDataWriter::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/Entity:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:DDS/DataWriter:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:UATM/flightAssignDataWriter:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* UATM::flightAssignDataWriter::_interface_repository_id (void) const
{
  return "IDL:UATM/flightAssignDataWriter:1.0";
}

::CORBA::Boolean
UATM::flightAssignDataWriter::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_interface\interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for UATM::flightAssignDataReader.

UATM::flightAssignDataReader_ptr
TAO::Objref_Traits<UATM::flightAssignDataReader>::duplicate (
    UATM::flightAssignDataReader_ptr p)
{
  return UATM::flightAssignDataReader::_duplicate (p);
}

void
TAO::Objref_Traits<UATM::flightAssignDataReader>::release (
    UATM::flightAssignDataReader_ptr p)
{
  ::CORBA::release (p);
}

UATM::flightAssignDataReader_ptr
TAO::Objref_Traits<UATM::flightAssignDataReader>::nil (void)
{
  return UATM::flightAssignDataReader::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<UATM::flightAssignDataReader>::marshal (
    const UATM::flightAssignDataReader_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



UATM::flightAssignDataReader::flightAssignDataReader (void)
{}

UATM::flightAssignDataReader::~flightAssignDataReader (void)
{
}

UATM::flightAssignDataReader_ptr
UATM::flightAssignDataReader::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return flightAssignDataReader::_duplicate (
      dynamic_cast<flightAssignDataReader_ptr> (_tao_objref));
}

UATM::flightAssignDataReader_ptr
UATM::flightAssignDataReader::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return flightAssignDataReader::_duplicate (
      dynamic_cast<flightAssignDataReader_ptr> (_tao_objref));
}

UATM::flightAssignDataReader_ptr
UATM::flightAssignDataReader::_nil (void)
{
  return 0;
}

UATM::flightAssignDataReader_ptr
UATM::flightAssignDataReader::_duplicate (flightAssignDataReader_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
UATM::flightAssignDataReader::_tao_release (flightAssignDataReader_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
UATM::flightAssignDataReader::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/Entity:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:DDS/DataReader:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:OpenDDS/DCPS/DataReaderEx:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:UATM/flightAssignDataReader:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* UATM::flightAssignDataReader::_interface_repository_id (void) const
{
  return "IDL:UATM/flightAssignDataReader:1.0";
}

::CORBA::Boolean
UATM::flightAssignDataReader::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}

