/* Generated by C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\bin\opendds_idl version 3.29.1 (ACE version 6.5.21) running on input file UATM.idl */
#include "UATMTypeSupportImpl.h"

#include <cstring>
#include <stdexcept>
#include "dds/DCPS/BuiltInTopicUtils.h"
#include "dds/DCPS/ContentFilteredTopicImpl.h"
#include "dds/DCPS/DataReaderImpl_T.h"
#include "dds/DCPS/DataWriterImpl_T.h"
#include "dds/DCPS/FilterEvaluator.h"
#include "dds/DCPS/MultiTopicDataReader_T.h"
#include "dds/DCPS/PoolAllocator.h"
#include "dds/DCPS/PublicationInstance.h"
#include "dds/DCPS/PublisherImpl.h"
#include "dds/DCPS/Qos_Helper.h"
#include "dds/DCPS/RakeData.h"
#include "dds/DCPS/RakeResults_T.h"
#include "dds/DCPS/ReceivedDataElementList.h"
#include "dds/DCPS/Registered_Data_Types.h"
#include "dds/DCPS/Service_Participant.h"
#include "dds/DCPS/SubscriberImpl.h"
#include "dds/DCPS/Util.h"
#include "dds/DCPS/XTypes/TypeObject.h"
#include "dds/DCPS/debug.h"
#include "dds/DdsDcpsDomainC.h"
#include "dds/DCPS/JsonValueReader.h"
#include "dds/DCPS/JsonValueWriter.h"

#ifdef OPENDDS_IDL_FILE_SPECIFIC
#  undef OPENDDS_IDL_FILE_SPECIFIC
#endif
#define OPENDDS_IDL_FILE_SPECIFIC(base, index) opendds_idl_generated_uatmtypesupportimpl_cpp_1ddlb6##_##base##index



/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: UATM */



/* Begin STRUCT-FWD: availabilityInfo */


/* End STRUCT-FWD: availabilityInfo */


/* Begin STRUCT-FWD: weatherInfo */


/* End STRUCT-FWD: weatherInfo */


/* Begin STRUCT-FWD: flightRoutesInfo */


/* End STRUCT-FWD: flightRoutesInfo */


/* Begin STRUCT-FWD: flightAssign */


/* End STRUCT-FWD: flightAssign */

/* End MODULE: UATM */


/* Begin MODULE: UATM */



/* Begin STRUCT: availabilityInfo */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> const XTypes::TypeIdentifier& getMinimalTypeIdentifier<UATM_availabilityInfo_xtag>()
{
  static XTypes::TypeIdentifier ti;
  ACE_GUARD_RETURN(ACE_Thread_Mutex, guard, TheServiceParticipant->get_static_xtypes_lock(), ti);
  if (ti.kind() == XTypes::TK_NONE) {
    ti = XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(19, 168, 58, 29, 6, 237, 50, 67, 22, 43, 153, 216, 181, 78));
  }
  return ti;
}

static const XTypes::TypeMap& OPENDDS_IDL_FILE_SPECIFIC(get_minimal_type_map, 0)();
template<> const XTypes::TypeMap& getMinimalTypeMap<UATM_availabilityInfo_xtag>()
{
  return OPENDDS_IDL_FILE_SPECIFIC(get_minimal_type_map, 0)();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool vread(OpenDDS::DCPS::ValueReader& value_reader,  ::UATM::availabilityInfo& value)
{
  ACE_UNUSED_ARG(value_reader);
  ACE_UNUSED_ARG(value);
  static const ListMemberHelper::Pair pairs[] = {{"resource_id",0},{"resource_type",1},{"status",2},{"location",3},{"availability_time",4},{0,0}};
  ListMemberHelper helper(pairs);
  if (!value_reader.begin_struct(OpenDDS::DCPS::APPENDABLE)) return false;
  XTypes::MemberId member_id;
  while (value_reader.members_remaining()) {
    if (!value_reader.begin_struct_member(member_id, helper)) return false;
    switch (member_id) {
    case 0: {
      if (!value_reader.read_int32(value.resource_id)) return false;
      break;
    }
    case 1: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.resource_type = x.c_str();
      }
      break;
    }
    case 2: {
      {
         ::CORBA::Boolean bx;
        if (!value_reader.read_boolean(bx)) return false;
        value.status = bx;
      }
      break;
    }
    case 3: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.location = x.c_str();
      }
      break;
    }
    case 4: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.availability_time = x.c_str();
      }
      break;
    }
    }
    if (!value_reader.end_struct_member()) return false;
  }
  if (!value_reader.end_struct()) return false;
  return true;
}

bool vread(OpenDDS::DCPS::ValueReader& value_reader, const NestedKeyOnly< ::UATM::availabilityInfo>& value)
{
  ACE_UNUSED_ARG(value_reader);
  ACE_UNUSED_ARG(value);
  static const ListMemberHelper::Pair pairs[] = {{"resource_id",0},{"resource_type",1},{"status",2},{"location",3},{"availability_time",4},{0,0}};
  ListMemberHelper helper(pairs);
  if (!value_reader.begin_struct(OpenDDS::DCPS::APPENDABLE)) return false;
  XTypes::MemberId member_id;
  while (value_reader.members_remaining()) {
    if (!value_reader.begin_struct_member(member_id, helper)) return false;
    switch (member_id) {
    case 0: {
      if (!value_reader.read_int32(value.value.resource_id)) return false;
      break;
    }
    case 1: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.value.resource_type = x.c_str();
      }
      break;
    }
    case 2: {
      {
         ::CORBA::Boolean bx;
        if (!value_reader.read_boolean(bx)) return false;
        value.value.status = bx;
      }
      break;
    }
    case 3: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.value.location = x.c_str();
      }
      break;
    }
    case 4: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.value.availability_time = x.c_str();
      }
      break;
    }
    }
    if (!value_reader.end_struct_member()) return false;
  }
  if (!value_reader.end_struct()) return false;
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const  ::UATM::availabilityInfo& value)
{
  ACE_UNUSED_ARG(value_writer);
  ACE_UNUSED_ARG(value);
  if (!value_writer.begin_struct(OpenDDS::DCPS::APPENDABLE)) {
    return false;
  }
  {
    MemberParam param(0, false, "resource_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.resource_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(1, false, "resource_type", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.resource_type)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(2, false, "status", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_boolean(value.status)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(3, false, "location", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.location)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(4, false, "availability_time", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.availability_time)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  return value_writer.end_struct();
}

bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const NestedKeyOnly<const  ::UATM::availabilityInfo>& value)
{
  ACE_UNUSED_ARG(value_writer);
  ACE_UNUSED_ARG(value);
  if (!value_writer.begin_struct(OpenDDS::DCPS::APPENDABLE)) {
    return false;
  }
  {
    MemberParam param(0, false, "resource_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.value.resource_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(1, false, "resource_type", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.value.resource_type)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(2, false, "status", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_boolean(value.value.status)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(3, false, "location", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.value.location)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(4, false, "availability_time", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.value.availability_time)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  return value_writer.end_struct();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> void set_default( ::UATM::availabilityInfo& stru)
{
  ACE_UNUSED_ARG(stru);
  stru.resource_id = 0;
  stru.resource_type = "";
  stru.status = 0;
  stru.location = "";
  stru.availability_time = "";
}

void serialized_size(const Encoding& encoding, size_t& size, const ::UATM::availabilityInfo& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
  primitive_serialized_size(encoding, size, stru.resource_id);
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.resource_type.in()) + 1;
  primitive_serialized_size(encoding, size, ACE_OutputCDR::from_boolean(stru.status));
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.location.in()) + 1;
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.availability_time.in()) + 1;
}

bool operator<<(Serializer& strm, const ::UATM::availabilityInfo& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
  return (strm << stru.resource_id)
    && (strm << ACE_OutputCDR::from_string(stru.resource_type.in(), 20))
    && (strm << ACE_OutputCDR::from_boolean(stru.status))
    && (strm << ACE_OutputCDR::from_string(stru.location.in(), 20))
    && (strm << ACE_OutputCDR::from_string(stru.availability_time.in(), 20));
}

bool operator>>(Serializer& strm,  ::UATM::availabilityInfo& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  bool reached_end_of_struct = false;
  ACE_UNUSED_ARG(reached_end_of_struct);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.resource_id = 0;
  } else {
    if (!(strm >> stru.resource_id)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.resource_type = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.resource_type.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.status = 0;
  } else {
    if (!(strm >> ACE_InputCDR::to_boolean(stru.status))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.location = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.location.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.availability_time = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.availability_time.out(), 20))) {
      return false;
    }
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const ::UATM::availabilityInfo>& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
  primitive_serialized_size(encoding, size, stru.value.resource_id);
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.value.resource_type.in()) + 1;
  primitive_serialized_size(encoding, size, ACE_OutputCDR::from_boolean(stru.value.status));
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.value.location.in()) + 1;
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.value.availability_time.in()) + 1;
}

bool operator<<(Serializer& strm, const NestedKeyOnly<const ::UATM::availabilityInfo>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
  return (strm << stru.value.resource_id)
    && (strm << ACE_OutputCDR::from_string(stru.value.resource_type.in(), 20))
    && (strm << ACE_OutputCDR::from_boolean(stru.value.status))
    && (strm << ACE_OutputCDR::from_string(stru.value.location.in(), 20))
    && (strm << ACE_OutputCDR::from_string(stru.value.availability_time.in(), 20));
}

bool operator>>(Serializer& strm, const NestedKeyOnly< ::UATM::availabilityInfo>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  bool reached_end_of_struct = false;
  ACE_UNUSED_ARG(reached_end_of_struct);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.resource_id = 0;
  } else {
    if (!(strm >> stru.value.resource_id)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.resource_type = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.value.resource_type.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.status = 0;
  } else {
    if (!(strm >> ACE_InputCDR::to_boolean(stru.value.status))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.location = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.value.location.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.availability_time = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.value.availability_time.out(), 20))) {
      return false;
    }
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

void serialized_size(const Encoding& encoding, size_t& size, const KeyOnly<const  ::UATM::availabilityInfo> stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  switch (encoding.xcdr_version()) {
  case Encoding::XCDR_VERSION_1:
    {
    primitive_serialized_size(encoding, size, stru.value.resource_id);
    break;
    }
  case Encoding::XCDR_VERSION_2:
    {
    primitive_serialized_size(encoding, size, stru.value.resource_id);
    break;
    }
  case Encoding::XCDR_VERSION_NONE:
    {
    primitive_serialized_size(encoding, size, stru.value.resource_id);
    break;
    }
  }
}

bool operator<<(Serializer& strm, KeyOnly<const  ::UATM::availabilityInfo> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.value.resource_id);
}

bool operator>>(Serializer& strm, KeyOnly< ::UATM::availabilityInfo> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.value.resource_id);
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace DCPS {
bool DDSTraits< ::UATM::availabilityInfo>::is_key(const char* field)
{
  ACE_UNUSED_ARG(field);
  if (!ACE_OS::strcmp(field, "resource_id")) {
    return true;
  }
  return false;
}
} // namespace DCPS
} // namespace OpenDDS
OPENDDS_END_VERSIONED_NAMESPACE_DECL

namespace UATM {
::DDS::DataWriter_ptr availabilityInfoTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<availabilityInfo> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}

::DDS::DataReader_ptr availabilityInfoTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<availabilityInfo> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}

#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr availabilityInfoTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<availabilityInfo> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<availabilityInfo, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */

#ifndef OPENDDS_SAFETY_PROFILE
availabilityInfo* availabilityInfoTypeSupportImpl::create_sample(::DDS::DynamicData_ptr src)
{
  availabilityInfo* value = new availabilityInfo;
  const ::DDS::ReturnCode_t rc = OpenDDS::DCPS::TypeSupportImpl_T<availabilityInfo>::create_sample_rc(*value, src);
  if (rc != ::DDS::RETCODE_OK && OpenDDS::DCPS::log_level >= OpenDDS::DCPS::LogLevel::Warning) {
    ACE_ERROR((LM_WARNING, "(%P|%t) WARNING: availabilityInfoTypeSupportImpl::create_sample: "
      "create_sample_rc failed: %C\n", OpenDDS::DCPS::retcode_to_string(rc)));
  }
  return value;
}
#endif

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& availabilityInfoTypeSupportImpl::getMetaStructForType() const
{
  return OpenDDS::DCPS::getMetaStruct<availabilityInfo>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */

namespace {
  OpenDDS::DCPS::TypeSupportInitializer<availabilityInfoTypeSupportImpl> ts_init_UATM_availabilityInfo;
}

const OpenDDS::XTypes::TypeIdentifier& availabilityInfoTypeSupportImpl::getMinimalTypeIdentifier() const
{
  return OpenDDS::DCPS::getMinimalTypeIdentifier<OpenDDS::DCPS::UATM_availabilityInfo_xtag>();
}

const OpenDDS::XTypes::TypeMap& availabilityInfoTypeSupportImpl::getMinimalTypeMap() const
{
  return OpenDDS::DCPS::getMinimalTypeMap<OpenDDS::DCPS::UATM_availabilityInfo_xtag>();
}

const OpenDDS::XTypes::TypeIdentifier& availabilityInfoTypeSupportImpl::getCompleteTypeIdentifier() const
{
  static OpenDDS::XTypes::TypeIdentifier ti;
  return ti;
}

const OpenDDS::XTypes::TypeMap& availabilityInfoTypeSupportImpl::getCompleteTypeMap() const
{
  static OpenDDS::XTypes::TypeMap tm;
  return tm;
}

::DDS::ReturnCode_t availabilityInfoTypeSupportImpl::encode_to_string(const availabilityInfo& in, CORBA::String_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
#if OPENDDS_HAS_JSON_VALUE_WRITER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    rapidjson::StringBuffer buffer;
    rapidjson::Writer<rapidjson::StringBuffer> writer(buffer);
    OpenDDS::DCPS::JsonValueWriter<rapidjson::Writer<rapidjson::StringBuffer> > jvw(writer);
    if (!vwrite(jvw, in)) {
      return ::DDS::RETCODE_ERROR;
    }
    out = buffer.GetString();
    return ::DDS::RETCODE_OK;
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  out = "";
  return ::DDS::RETCODE_UNSUPPORTED;
}

::DDS::ReturnCode_t availabilityInfoTypeSupportImpl::encode_to_bytes(const availabilityInfo& in, ::DDS::OctetSeq_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
#if OPENDDS_HAS_JSON_VALUE_WRITER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    CORBA::String_var buffer;
    const ::DDS::ReturnCode_t ret = encode_to_string(in, buffer, format);
    if (ret == ::DDS::RETCODE_OK) {
      const ::DDS::UInt32 len = static_cast< ::DDS::UInt32>(std::strlen(buffer));
      out = new ::DDS::OctetSeq(len);
      out->length(len);
      std::memcpy(out->get_buffer(), buffer, len);
      return ::DDS::RETCODE_OK;
    } else {
      out = new ::DDS::OctetSeq();
      return ret;
    }
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  out = new ::DDS::OctetSeq();
  return ::DDS::RETCODE_UNSUPPORTED;
}

::DDS::ReturnCode_t availabilityInfoTypeSupportImpl::decode_from_string(const char* in, availabilityInfo_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
  out = new availabilityInfo;
  OpenDDS::DCPS::set_default(*out);
#if OPENDDS_HAS_JSON_VALUE_READER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    rapidjson::StringStream buffer(in);
    OpenDDS::DCPS::JsonValueReader<> jvr(buffer);
    return vread(jvr, *out) ? ::DDS::RETCODE_OK : ::DDS::RETCODE_ERROR;
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  return ::DDS::RETCODE_UNSUPPORTED;
}

::DDS::ReturnCode_t availabilityInfoTypeSupportImpl::decode_from_bytes(const ::DDS::OctetSeq& in, availabilityInfo_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
#if OPENDDS_HAS_JSON_VALUE_READER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    return decode_from_string(reinterpret_cast<const char*>(in.get_buffer()), out, format);
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  out = new availabilityInfo();
  return ::DDS::RETCODE_UNSUPPORTED;
}

availabilityInfoTypeSupport::_ptr_type availabilityInfoTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl< ::UATM::availabilityInfo> : MetaStruct {
  typedef  ::UATM::availabilityInfo T;

#ifndef OPENDDS_NO_MULTI_TOPIC
  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 1; }

#endif /* OPENDDS_NO_MULTI_TOPIC */

  Value getValue(const void* stru, const char* field) const
  {
    const ::UATM::availabilityInfo& typed = *static_cast<const ::UATM::availabilityInfo*>(stru);
    ACE_UNUSED_ARG(typed);
    if (std::strcmp(field, "resource_id") == 0) {
      return typed.resource_id;
    }
    if (std::strcmp(field, "resource_type") == 0) {
      return typed.resource_type.in();
    }
    if (std::strcmp(field, "status") == 0) {
      return typed.status;
    }
    if (std::strcmp(field, "location") == 0) {
      return typed.location.in();
    }
    if (std::strcmp(field, "availability_time") == 0) {
      return typed.availability_time.in();
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::availabilityInfo)");
  }

  Value getValue(Serializer& strm, const char* field, TypeSupportImpl* = 0) const
  {
    const Encoding& encoding = strm.encoding();
    ACE_UNUSED_ARG(encoding);
    size_t total_size = 0;
    if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
      if (!strm.read_delimiter(total_size)) {
        throw std::runtime_error("Unable to reader delimiter in getValue");
      }
    }
    std::string base_field = field;
    const size_t index = base_field.find('.');
    std::string subfield;
    if (index != std::string::npos) {
      subfield = base_field.substr(index + 1);
      base_field = base_field.substr(0, index);
    }
    if (base_field == "resource_id") {
      ACE_CDR::Long val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'resource_id' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'resource_id' could not be skipped");
      }
    }
    if (base_field == "resource_type") {
      TAO::String_Manager val;
      if (!(strm >> val.out())) {
        throw std::runtime_error("Field 'resource_type' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(strm >> len)) {
        throw std::runtime_error("String 'resource_type' length could not be deserialized");
      }
      if (!strm.skip(len)) {
        throw std::runtime_error("String 'resource_type' contents could not be skipped");
      }
    }
    if (base_field == "status") {
      ACE_CDR::Boolean val;
      if (!(strm >> ACE_InputCDR::to_boolean(val))) {
        throw std::runtime_error("Field 'status' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  1 )) {
        throw std::runtime_error("Field 'status' could not be skipped");
      }
    }
    if (base_field == "location") {
      TAO::String_Manager val;
      if (!(strm >> val.out())) {
        throw std::runtime_error("Field 'location' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(strm >> len)) {
        throw std::runtime_error("String 'location' length could not be deserialized");
      }
      if (!strm.skip(len)) {
        throw std::runtime_error("String 'location' contents could not be skipped");
      }
    }
    if (base_field == "availability_time") {
      TAO::String_Manager val;
      if (!(strm >> val.out())) {
        throw std::runtime_error("Field 'availability_time' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(strm >> len)) {
        throw std::runtime_error("String 'availability_time' length could not be deserialized");
      }
      if (!strm.skip(len)) {
        throw std::runtime_error("String 'availability_time' contents could not be skipped");
      }
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Did not find field in getValue");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "resource_id") == 0) {
      return make_field_cmp(&T::resource_id, next);
    }
    if (std::strcmp(field, "resource_type") == 0) {
      return make_field_cmp(&T::resource_type, next);
    }
    if (std::strcmp(field, "status") == 0) {
      return make_field_cmp(&T::status, next);
    }
    if (std::strcmp(field, "location") == 0) {
      return make_field_cmp(&T::location, next);
    }
    if (std::strcmp(field, "availability_time") == 0) {
      return make_field_cmp(&T::availability_time, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::availabilityInfo)");
  }

#ifndef OPENDDS_NO_MULTI_TOPIC
  const char** getFieldNames() const
  {
    static const char* names[] = {"resource_id", "resource_type", "status", "location", "availability_time", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "resource_id") == 0) {
      return &static_cast<const T*>(stru)->resource_id;
    }
    if (std::strcmp(field, "resource_type") == 0) {
      return &static_cast<const T*>(stru)->resource_type;
    }
    if (std::strcmp(field, "status") == 0) {
      return &static_cast<const T*>(stru)->status;
    }
    if (std::strcmp(field, "location") == 0) {
      return &static_cast<const T*>(stru)->location;
    }
    if (std::strcmp(field, "availability_time") == 0) {
      return &static_cast<const T*>(stru)->availability_time;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::availabilityInfo)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "resource_id") == 0) {
      static_cast<T*>(lhs)->resource_id = *static_cast<const  ::CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "resource_type") == 0) {
      static_cast<T*>(lhs)->resource_type = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "status") == 0) {
      static_cast<T*>(lhs)->status = *static_cast<const  ::CORBA::Boolean*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "location") == 0) {
      static_cast<T*>(lhs)->location = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "availability_time") == 0) {
      static_cast<T*>(lhs)->availability_time = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::availabilityInfo)");
  }

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "resource_id") == 0) {
      return static_cast<const T*>(lhs)->resource_id == static_cast<const T*>(rhs)->resource_id;
    }
    if (std::strcmp(field, "resource_type") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->resource_type.in(), static_cast<const T*>(rhs)->resource_type.in());
    }
    if (std::strcmp(field, "status") == 0) {
      return static_cast<const T*>(lhs)->status == static_cast<const T*>(rhs)->status;
    }
    if (std::strcmp(field, "location") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->location.in(), static_cast<const T*>(rhs)->location.in());
    }
    if (std::strcmp(field, "availability_time") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->availability_time.in(), static_cast<const T*>(rhs)->availability_time.in());
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::availabilityInfo)");
  }
#endif /* OPENDDS_NO_MULTI_TOPIC */

};

template<>
const MetaStruct& getMetaStruct< ::UATM::availabilityInfo>()
{
  static MetaStructImpl< ::UATM::availabilityInfo> msi;
  return msi;
}

bool gen_skip_over(Serializer& ser,  ::UATM::availabilityInfo*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl< ::UATM::availabilityInfo>().getValue(ser, "");
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif // ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace XTypes {

#ifndef OPENDDS_SAFETY_PROFILE
#if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
template <>
class DynamicDataAdapterImpl< ::UATM::availabilityInfo,  ::UATM::availabilityInfo > : public DynamicDataAdapter_T< ::UATM::availabilityInfo> {
public:
  DynamicDataAdapterImpl(DDS::DynamicType_ptr type,  ::UATM::availabilityInfo& value)
    : DynamicDataAdapter_T< ::UATM::availabilityInfo>(type, value)
  {
  }

  DynamicDataAdapterImpl(DDS::DynamicType_ptr type, const  ::UATM::availabilityInfo& value)
    : DynamicDataAdapter_T< ::UATM::availabilityInfo>(type, value)
  {
  }

  DDS::ReturnCode_t clear_all_values()
  {
    const DDS::ReturnCode_t rc = assert_mutable("DynamicDataAdapter::clear_all_values");
    if (rc == DDS::RETCODE_OK) {
      OpenDDS::DCPS::set_default(value_);
    }
    return rc;
  }

  DDS::UInt32 get_item_count()
  {
    return 5;
  }

  bool serialized_size(const OpenDDS::DCPS::Encoding& enc, size_t& size, OpenDDS::DCPS::Sample::Extent ext) const
  {
    using namespace OpenDDS::DCPS;
    if (ext == Sample::Full) {
      DCPS::serialized_size(enc, size, value_);
    } else if (ext == Sample::NestedKeyOnly) {
      const NestedKeyOnly<const  ::UATM::availabilityInfo> nested_key_only(value_);
      DCPS::serialized_size(enc, size, nested_key_only);
    } else {
      return false; // Non-topic type
    }
    return true;
  }

  bool serialize(OpenDDS::DCPS::Serializer& ser, OpenDDS::DCPS::Sample::Extent ext) const
  {
    using namespace OpenDDS::DCPS;
    if (ext == Sample::Full) {
      return ser << value_;
    } else if (ext == Sample::NestedKeyOnly) {
      NestedKeyOnly<const  ::UATM::availabilityInfo> nested_key_only(value_);
      return ser << nested_key_only;
    } else {
      return false; // Non-topic type
    }
  }

protected:
  DDS::ReturnCode_t get_raw_value(const char* method, void* dest, DDS::TypeKind tk, DDS::MemberId id)
  {
    switch (id) {
    case 0:
      {
        return get_simple_raw_value(method, dest, tk, value_.resource_id, id);
      }
    case 1:
      {
        return get_s8_raw_value(method, dest, tk, value_.resource_type, id);
      }
    case 2:
      {
        return get_simple_raw_value(method, dest, tk, value_.status, id);
      }
    case 3:
      {
        return get_s8_raw_value(method, dest, tk, value_.location, id);
      }
    case 4:
      {
        return get_s8_raw_value(method, dest, tk, value_.availability_time, id);
      }
    default:
      return invalid_id(method, id);
    }
  }

  DDS::ReturnCode_t set_raw_value(const char* method, DDS::MemberId id, const void* source, DDS::TypeKind tk)
  {
    DDS::ReturnCode_t rc = assert_mutable(method);
    if (rc != DDS::RETCODE_OK) {
      return rc;
    }
    switch (id) {
    case 0:
      {
        return set_simple_raw_value(method, value_.resource_id, id, source, tk);
      }
    case 1:
      {
        return set_s8_raw_value(method, value_.resource_type.inout(), id, source, tk);
      }
    case 2:
      {
        return set_simple_raw_value(method, value_.status, id, source, tk);
      }
    case 3:
      {
        return set_s8_raw_value(method, value_.location.inout(), id, source, tk);
      }
    case 4:
      {
        return set_s8_raw_value(method, value_.availability_time.inout(), id, source, tk);
      }
    default:
      return invalid_id(method, id);
    }
  }
};

#endif // if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER

template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::availabilityInfo,  ::UATM::availabilityInfo>(DDS::DynamicType_ptr type, const  ::UATM::availabilityInfo& value)
{
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  if (type) {
    return new DynamicDataAdapterImpl< ::UATM::availabilityInfo,  ::UATM::availabilityInfo>(type, value);
  }
#  else
  ACE_UNUSED_ARG(type);
  ACE_UNUSED_ARG(value);
#  endif
  return 0;
}

template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::availabilityInfo,  ::UATM::availabilityInfo>(DDS::DynamicType_ptr type,  ::UATM::availabilityInfo& value)
{
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  if (type) {
    return new DynamicDataAdapterImpl< ::UATM::availabilityInfo,  ::UATM::availabilityInfo>(type, value);
  }
#  else
  ACE_UNUSED_ARG(type);
  ACE_UNUSED_ARG(value);
#  endif
  return 0;
}

template <>
const  ::UATM::availabilityInfo* get_dynamic_data_adapter_value< ::UATM::availabilityInfo,  ::UATM::availabilityInfo>(DDS::DynamicData_ptr dd)
{
  ACE_UNUSED_ARG(dd);
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  typedef DynamicDataAdapterImpl< ::UATM::availabilityInfo,  ::UATM::availabilityInfo> Dda;
  const Dda* const dda = dynamic_cast<Dda*>(dd);
  if (dda) {
    return &dda->wrapped();
  }
#  endif
  return 0;
}
#endif // ifndef OPENDDS_SAFETY_PROFILE

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End STRUCT: availabilityInfo */

/* End MODULE: UATM */


/* Begin MODULE: UATM */



/* Begin TYPEDEF: ArrayString */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> const XTypes::TypeIdentifier& getMinimalTypeIdentifier<UATM_ArrayString_xtag>()
{
  static XTypes::TypeIdentifier ti;
  ACE_GUARD_RETURN(ACE_Thread_Mutex, guard, TheServiceParticipant->get_static_xtypes_lock(), ti);
  if (ti.kind() == XTypes::TK_NONE) {
    ti = XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(126, 198, 253, 33, 84, 187, 219, 157, 152, 51, 230, 44, 169, 26));
  }
  return ti;
}

template<> const XTypes::TypeMap& getMinimalTypeMap<UATM_ArrayString_xtag>()
{
  return OPENDDS_IDL_FILE_SPECIFIC(get_minimal_type_map, 0)();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> void set_default( ::UATM::ArrayString_forany& arr)
{
  ACE_UNUSED_ARG(arr);
  for (CORBA::ULong i0 = 0; i0 < 2; ++i0) {
    arr[i0] = "";
  }
}

void serialized_size(const Encoding& encoding, size_t& size, const  ::UATM::ArrayString_forany& arr)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(arr);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
  for (CORBA::ULong i0 = 0; i0 < 2; ++i0) {
    primitive_serialized_size_ulong(encoding, size);
    size += ACE_OS::strlen(arr[i0].in()) + 1;
  }
}

bool operator<<(Serializer& strm, const  ::UATM::ArrayString_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
serialized_size(encoding, total_size, arr);if (!strm.write_delimiter(total_size)) {  return false;}  }
  for (CORBA::ULong i0 = 0; i0 < 2; ++i0) {
    if (!(strm << arr[i0])) {
      return false;
    }
  }
  return true;
}

bool operator>>(Serializer& strm,  ::UATM::ArrayString_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  bool discard_flag = false;
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_arr = strm.rpos() + total_size;
  for (CORBA::ULong i0 = 0; i0 < 2; ++i0) {
    if (!(strm >> ACE_InputCDR::to_string(arr[i0].out(), 10))) {
      if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
        strm.set_construction_status(Serializer::ElementConstructionFailure);
        strm.skip(end_of_arr - strm.rpos());
        return false;
      } else {
        strm.set_construction_status(Serializer::ConstructionSuccessful);
        discard_flag = true;
      }
    }
  }
  if (discard_flag) {
    strm.set_construction_status(Serializer::ElementConstructionFailure);
    return false;
  }
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser,  ::UATM::ArrayString_forany*)
{
  ACE_UNUSED_ARG(ser);
  const Encoding& encoding = ser.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!ser.read_delimiter(total_size)) {
      return false;
    }
  }
  for (ACE_CDR::ULong i = 0; i < 2; ++i) {
    ACE_CDR::ULong strlength;
    if (!(ser >> strlength && ser.skip(strlength))) return false;
  }
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif // ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace XTypes {

#ifndef OPENDDS_SAFETY_PROFILE
#if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
template <>
class DynamicDataAdapterImpl< ::UATM::ArrayString, UATM_ArrayString_dda_tag > : public DynamicDataAdapter_T< ::UATM::ArrayString> {
public:
  DynamicDataAdapterImpl(DDS::DynamicType_ptr type,  ::UATM::ArrayString& value)
    : DynamicDataAdapter_T< ::UATM::ArrayString>(type, value)
  {
  }

  DynamicDataAdapterImpl(DDS::DynamicType_ptr type, const  ::UATM::ArrayString& value)
    : DynamicDataAdapter_T< ::UATM::ArrayString>(type, value)
  {
  }

  DDS::ReturnCode_t clear_all_values()
  {
    const DDS::ReturnCode_t rc = assert_mutable("DynamicDataAdapter::clear_all_values");
    if (rc == DDS::RETCODE_OK) {
      OpenDDS::DCPS::set_default(value_);
    }
    return rc;
  }

  DDS::UInt32 get_item_count()
  {
    return 2;
  }

  bool serialized_size(const OpenDDS::DCPS::Encoding& enc, size_t& size, OpenDDS::DCPS::Sample::Extent ext) const
  {
    ACE_UNUSED_ARG(ext);
    OpenDDS::DCPS::serialized_size(enc, size,  ::UATM::ArrayString_forany(value_));
    return true;
  }

  bool serialize(OpenDDS::DCPS::Serializer& ser, OpenDDS::DCPS::Sample::Extent ext) const
  {
    ACE_UNUSED_ARG(ext);
    using namespace OpenDDS::DCPS;
    return ser <<  ::UATM::ArrayString_forany(value_);
  }

protected:
  DDS::ReturnCode_t get_raw_value(const char* method, void* dest, DDS::TypeKind tk, DDS::MemberId id)
  {
    const DDS::ReturnCode_t rc = check_index(method, id, 2);
    if (rc != DDS::RETCODE_OK) {
      return rc;
    }
    return get_s8_raw_value(method, dest, tk, (&value_[0])[id], id);
  }

  DDS::ReturnCode_t set_raw_value(const char* method, DDS::MemberId id, const void* source, DDS::TypeKind tk)
  {
    DDS::ReturnCode_t rc = assert_mutable(method);
    if (rc != DDS::RETCODE_OK) {
      return rc;
    }
    rc = check_index(method, id, 2);
    if (rc != DDS::RETCODE_OK) {
      return rc;
    }
    return set_s8_raw_value(method, (&value_[0])[id].inout(), id, source, tk);
  }
};

#endif // if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER

template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::ArrayString, UATM_ArrayString_dda_tag>(DDS::DynamicType_ptr type, const  ::UATM::ArrayString& value)
{
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  if (type) {
    return new DynamicDataAdapterImpl< ::UATM::ArrayString, UATM_ArrayString_dda_tag>(type, value);
  }
#  else
  ACE_UNUSED_ARG(type);
  ACE_UNUSED_ARG(value);
#  endif
  return 0;
}

template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::ArrayString, UATM_ArrayString_dda_tag>(DDS::DynamicType_ptr type,  ::UATM::ArrayString& value)
{
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  if (type) {
    return new DynamicDataAdapterImpl< ::UATM::ArrayString, UATM_ArrayString_dda_tag>(type, value);
  }
#  else
  ACE_UNUSED_ARG(type);
  ACE_UNUSED_ARG(value);
#  endif
  return 0;
}

template <>
const  ::UATM::ArrayString* get_dynamic_data_adapter_value< ::UATM::ArrayString, UATM_ArrayString_dda_tag>(DDS::DynamicData_ptr dd)
{
  ACE_UNUSED_ARG(dd);
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  typedef DynamicDataAdapterImpl< ::UATM::ArrayString, UATM_ArrayString_dda_tag> Dda;
  const Dda* const dda = dynamic_cast<Dda*>(dd);
  if (dda) {
    return &dda->wrapped();
  }
#  endif
  return 0;
}
#endif // ifndef OPENDDS_SAFETY_PROFILE

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End TYPEDEF: ArrayString */

/* End MODULE: UATM */


/* Begin MODULE: UATM */



/* Begin STRUCT: weatherInfo */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> const XTypes::TypeIdentifier& getMinimalTypeIdentifier<UATM_weatherInfo_xtag>()
{
  static XTypes::TypeIdentifier ti;
  ACE_GUARD_RETURN(ACE_Thread_Mutex, guard, TheServiceParticipant->get_static_xtypes_lock(), ti);
  if (ti.kind() == XTypes::TK_NONE) {
    ti = XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(73, 167, 10, 44, 147, 180, 68, 180, 250, 223, 197, 39, 166, 70));
  }
  return ti;
}

template<> const XTypes::TypeMap& getMinimalTypeMap<UATM_weatherInfo_xtag>()
{
  return OPENDDS_IDL_FILE_SPECIFIC(get_minimal_type_map, 0)();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool vread(OpenDDS::DCPS::ValueReader& value_reader,  ::UATM::weatherInfo& value)
{
  ACE_UNUSED_ARG(value_reader);
  ACE_UNUSED_ARG(value);
  static const ListMemberHelper::Pair pairs[] = {{"flight_route_id",0},{"waypoints",1},{"flight_id",2},{"estimated_time",3},{"status",4},{0,0}};
  ListMemberHelper helper(pairs);
  if (!value_reader.begin_struct(OpenDDS::DCPS::APPENDABLE)) return false;
  XTypes::MemberId member_id;
  while (value_reader.members_remaining()) {
    if (!value_reader.begin_struct_member(member_id, helper)) return false;
    switch (member_id) {
    case 0: {
      if (!value_reader.read_int32(value.flight_route_id)) return false;
      break;
    }
    case 1: {
      if (!value_reader.begin_array(XTypes::TK_STRING8)) return false;
      for (unsigned int i = 0; i != 2; ++i) {
        if (!value_reader.begin_element()) return false;
        {
          String x;
          if (!value_reader.read_string(x)) return false;
          value.waypoints[i] = x.c_str();
        }
        if (!value_reader.end_element()) return false;
      }
      if (!value_reader.end_array()) return false;
      break;
    }
    case 2: {
      if (!value_reader.read_int32(value.flight_id)) return false;
      break;
    }
    case 3: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.estimated_time = x.c_str();
      }
      break;
    }
    case 4: {
      {
         ::CORBA::Boolean bx;
        if (!value_reader.read_boolean(bx)) return false;
        value.status = bx;
      }
      break;
    }
    }
    if (!value_reader.end_struct_member()) return false;
  }
  if (!value_reader.end_struct()) return false;
  return true;
}

bool vread(OpenDDS::DCPS::ValueReader& value_reader, const NestedKeyOnly< ::UATM::weatherInfo>& value)
{
  ACE_UNUSED_ARG(value_reader);
  ACE_UNUSED_ARG(value);
  static const ListMemberHelper::Pair pairs[] = {{"flight_route_id",0},{"waypoints",1},{"flight_id",2},{"estimated_time",3},{"status",4},{0,0}};
  ListMemberHelper helper(pairs);
  if (!value_reader.begin_struct(OpenDDS::DCPS::APPENDABLE)) return false;
  XTypes::MemberId member_id;
  while (value_reader.members_remaining()) {
    if (!value_reader.begin_struct_member(member_id, helper)) return false;
    switch (member_id) {
    case 0: {
      if (!value_reader.read_int32(value.value.flight_route_id)) return false;
      break;
    }
    case 1: {
      if (!value_reader.begin_array(XTypes::TK_STRING8)) return false;
      for (unsigned int i = 0; i != 2; ++i) {
        if (!value_reader.begin_element()) return false;
        {
          String x;
          if (!value_reader.read_string(x)) return false;
          value.value.waypoints[i] = x.c_str();
        }
        if (!value_reader.end_element()) return false;
      }
      if (!value_reader.end_array()) return false;
      break;
    }
    case 2: {
      if (!value_reader.read_int32(value.value.flight_id)) return false;
      break;
    }
    case 3: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.value.estimated_time = x.c_str();
      }
      break;
    }
    case 4: {
      {
         ::CORBA::Boolean bx;
        if (!value_reader.read_boolean(bx)) return false;
        value.value.status = bx;
      }
      break;
    }
    }
    if (!value_reader.end_struct_member()) return false;
  }
  if (!value_reader.end_struct()) return false;
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const  ::UATM::weatherInfo& value)
{
  ACE_UNUSED_ARG(value_writer);
  ACE_UNUSED_ARG(value);
  if (!value_writer.begin_struct(OpenDDS::DCPS::APPENDABLE)) {
    return false;
  }
  {
    MemberParam param(0, false, "flight_route_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.flight_route_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(1, false, "waypoints", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.begin_array(XTypes::TK_STRING8)) {
        return false;
      }
      for (::CORBA::ULong i = 0; i != 2; ++i) {
        if (!value_writer.begin_element(static_cast<ACE_CDR::ULong>(i))) {
          return false;
        }
        if (!value_writer.write_string(value.waypoints[i])) {
          return false;
        }
        if (!value_writer.end_element()) {
          return false;
        }
      }
      if (!value_writer.end_array()) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(2, false, "flight_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.flight_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(3, false, "estimated_time", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.estimated_time)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(4, false, "status", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_boolean(value.status)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  return value_writer.end_struct();
}

bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const NestedKeyOnly<const  ::UATM::weatherInfo>& value)
{
  ACE_UNUSED_ARG(value_writer);
  ACE_UNUSED_ARG(value);
  if (!value_writer.begin_struct(OpenDDS::DCPS::APPENDABLE)) {
    return false;
  }
  {
    MemberParam param(0, false, "flight_route_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.value.flight_route_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(1, false, "waypoints", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.begin_array(XTypes::TK_STRING8)) {
        return false;
      }
      for (::CORBA::ULong i = 0; i != 2; ++i) {
        if (!value_writer.begin_element(static_cast<ACE_CDR::ULong>(i))) {
          return false;
        }
        if (!value_writer.write_string(value.value.waypoints[i])) {
          return false;
        }
        if (!value_writer.end_element()) {
          return false;
        }
      }
      if (!value_writer.end_array()) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(2, false, "flight_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.value.flight_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(3, false, "estimated_time", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.value.estimated_time)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(4, false, "status", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_boolean(value.value.status)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  return value_writer.end_struct();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> void set_default( ::UATM::weatherInfo& stru)
{
  ACE_UNUSED_ARG(stru);
  stru.flight_route_id = 0;
   ::UATM::ArrayString_forany stru_waypoints_temp(const_cast< ::UATM::ArrayString_slice*>(stru.waypoints));
  set_default(stru_waypoints_temp);
  stru.flight_id = 0;
  stru.estimated_time = "";
  stru.status = 0;
}

void serialized_size(const Encoding& encoding, size_t& size, const ::UATM::weatherInfo& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
   ::UATM::ArrayString_forany stru_waypoints_forany(const_cast< ::UATM::ArrayString_slice*>(stru.waypoints));
  primitive_serialized_size(encoding, size, stru.flight_route_id);
  serialized_size(encoding, size, stru_waypoints_forany);
  primitive_serialized_size(encoding, size, stru.flight_id);
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.estimated_time.in()) + 1;
  primitive_serialized_size(encoding, size, ACE_OutputCDR::from_boolean(stru.status));
}

bool operator<<(Serializer& strm, const ::UATM::weatherInfo& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
   ::UATM::ArrayString_forany stru_waypoints_forany(const_cast< ::UATM::ArrayString_slice*>(stru.waypoints));
  return (strm << stru.flight_route_id)
    && (strm << stru_waypoints_forany)
    && (strm << stru.flight_id)
    && (strm << ACE_OutputCDR::from_string(stru.estimated_time.in(), 20))
    && (strm << ACE_OutputCDR::from_boolean(stru.status));
}

bool operator>>(Serializer& strm,  ::UATM::weatherInfo& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  bool reached_end_of_struct = false;
  ACE_UNUSED_ARG(reached_end_of_struct);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

   ::UATM::ArrayString_forany stru_waypoints_forany(const_cast< ::UATM::ArrayString_slice*>(stru.waypoints));
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.flight_route_id = 0;
  } else {
    if (!(strm >> stru.flight_route_id)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
     ::UATM::ArrayString_forany stru_waypoints_temp(const_cast< ::UATM::ArrayString_slice*>(stru.waypoints));
    set_default(stru_waypoints_temp);
  } else {
    if (!(strm >> stru_waypoints_forany)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.flight_id = 0;
  } else {
    if (!(strm >> stru.flight_id)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.estimated_time = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.estimated_time.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.status = 0;
  } else {
    if (!(strm >> ACE_InputCDR::to_boolean(stru.status))) {
      return false;
    }
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const ::UATM::weatherInfo>& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
   ::UATM::ArrayString_forany stru_value_waypoints_forany(const_cast< ::UATM::ArrayString_slice*>(stru.value.waypoints));
  primitive_serialized_size(encoding, size, stru.value.flight_route_id);
  serialized_size(encoding, size, stru_value_waypoints_forany);
  primitive_serialized_size(encoding, size, stru.value.flight_id);
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.value.estimated_time.in()) + 1;
  primitive_serialized_size(encoding, size, ACE_OutputCDR::from_boolean(stru.value.status));
}

bool operator<<(Serializer& strm, const NestedKeyOnly<const ::UATM::weatherInfo>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
   ::UATM::ArrayString_forany stru_value_waypoints_forany(const_cast< ::UATM::ArrayString_slice*>(stru.value.waypoints));
  return (strm << stru.value.flight_route_id)
    && (strm << stru_value_waypoints_forany)
    && (strm << stru.value.flight_id)
    && (strm << ACE_OutputCDR::from_string(stru.value.estimated_time.in(), 20))
    && (strm << ACE_OutputCDR::from_boolean(stru.value.status));
}

bool operator>>(Serializer& strm, const NestedKeyOnly< ::UATM::weatherInfo>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  bool reached_end_of_struct = false;
  ACE_UNUSED_ARG(reached_end_of_struct);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

   ::UATM::ArrayString_forany stru_value_waypoints_forany(const_cast< ::UATM::ArrayString_slice*>(stru.value.waypoints));
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.flight_route_id = 0;
  } else {
    if (!(strm >> stru.value.flight_route_id)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
     ::UATM::ArrayString_forany stru_value_waypoints_temp(const_cast< ::UATM::ArrayString_slice*>(stru.value.waypoints));
    set_default(stru_value_waypoints_temp);
  } else {
    if (!(strm >> stru_value_waypoints_forany)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.flight_id = 0;
  } else {
    if (!(strm >> stru.value.flight_id)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.estimated_time = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.value.estimated_time.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.status = 0;
  } else {
    if (!(strm >> ACE_InputCDR::to_boolean(stru.value.status))) {
      return false;
    }
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

void serialized_size(const Encoding& encoding, size_t& size, const KeyOnly<const  ::UATM::weatherInfo> stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  switch (encoding.xcdr_version()) {
  case Encoding::XCDR_VERSION_1:
    {
    primitive_serialized_size(encoding, size, stru.value.flight_route_id);
    break;
    }
  case Encoding::XCDR_VERSION_2:
    {
    primitive_serialized_size(encoding, size, stru.value.flight_route_id);
    break;
    }
  case Encoding::XCDR_VERSION_NONE:
    {
    primitive_serialized_size(encoding, size, stru.value.flight_route_id);
    break;
    }
  }
}

bool operator<<(Serializer& strm, KeyOnly<const  ::UATM::weatherInfo> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.value.flight_route_id);
}

bool operator>>(Serializer& strm, KeyOnly< ::UATM::weatherInfo> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.value.flight_route_id);
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace DCPS {
bool DDSTraits< ::UATM::weatherInfo>::is_key(const char* field)
{
  ACE_UNUSED_ARG(field);
  if (!ACE_OS::strcmp(field, "flight_route_id")) {
    return true;
  }
  return false;
}
} // namespace DCPS
} // namespace OpenDDS
OPENDDS_END_VERSIONED_NAMESPACE_DECL

namespace UATM {
::DDS::DataWriter_ptr weatherInfoTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<weatherInfo> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}

::DDS::DataReader_ptr weatherInfoTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<weatherInfo> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}

#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr weatherInfoTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<weatherInfo> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<weatherInfo, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */

#ifndef OPENDDS_SAFETY_PROFILE
weatherInfo* weatherInfoTypeSupportImpl::create_sample(::DDS::DynamicData_ptr src)
{
  weatherInfo* value = new weatherInfo;
  const ::DDS::ReturnCode_t rc = OpenDDS::DCPS::TypeSupportImpl_T<weatherInfo>::create_sample_rc(*value, src);
  if (rc != ::DDS::RETCODE_OK && OpenDDS::DCPS::log_level >= OpenDDS::DCPS::LogLevel::Warning) {
    ACE_ERROR((LM_WARNING, "(%P|%t) WARNING: weatherInfoTypeSupportImpl::create_sample: "
      "create_sample_rc failed: %C\n", OpenDDS::DCPS::retcode_to_string(rc)));
  }
  return value;
}
#endif

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& weatherInfoTypeSupportImpl::getMetaStructForType() const
{
  return OpenDDS::DCPS::getMetaStruct<weatherInfo>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */

namespace {
  OpenDDS::DCPS::TypeSupportInitializer<weatherInfoTypeSupportImpl> ts_init_UATM_weatherInfo;
}

const OpenDDS::XTypes::TypeIdentifier& weatherInfoTypeSupportImpl::getMinimalTypeIdentifier() const
{
  return OpenDDS::DCPS::getMinimalTypeIdentifier<OpenDDS::DCPS::UATM_weatherInfo_xtag>();
}

const OpenDDS::XTypes::TypeMap& weatherInfoTypeSupportImpl::getMinimalTypeMap() const
{
  return OpenDDS::DCPS::getMinimalTypeMap<OpenDDS::DCPS::UATM_weatherInfo_xtag>();
}

const OpenDDS::XTypes::TypeIdentifier& weatherInfoTypeSupportImpl::getCompleteTypeIdentifier() const
{
  static OpenDDS::XTypes::TypeIdentifier ti;
  return ti;
}

const OpenDDS::XTypes::TypeMap& weatherInfoTypeSupportImpl::getCompleteTypeMap() const
{
  static OpenDDS::XTypes::TypeMap tm;
  return tm;
}

::DDS::ReturnCode_t weatherInfoTypeSupportImpl::encode_to_string(const weatherInfo& in, CORBA::String_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
#if OPENDDS_HAS_JSON_VALUE_WRITER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    rapidjson::StringBuffer buffer;
    rapidjson::Writer<rapidjson::StringBuffer> writer(buffer);
    OpenDDS::DCPS::JsonValueWriter<rapidjson::Writer<rapidjson::StringBuffer> > jvw(writer);
    if (!vwrite(jvw, in)) {
      return ::DDS::RETCODE_ERROR;
    }
    out = buffer.GetString();
    return ::DDS::RETCODE_OK;
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  out = "";
  return ::DDS::RETCODE_UNSUPPORTED;
}

::DDS::ReturnCode_t weatherInfoTypeSupportImpl::encode_to_bytes(const weatherInfo& in, ::DDS::OctetSeq_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
#if OPENDDS_HAS_JSON_VALUE_WRITER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    CORBA::String_var buffer;
    const ::DDS::ReturnCode_t ret = encode_to_string(in, buffer, format);
    if (ret == ::DDS::RETCODE_OK) {
      const ::DDS::UInt32 len = static_cast< ::DDS::UInt32>(std::strlen(buffer));
      out = new ::DDS::OctetSeq(len);
      out->length(len);
      std::memcpy(out->get_buffer(), buffer, len);
      return ::DDS::RETCODE_OK;
    } else {
      out = new ::DDS::OctetSeq();
      return ret;
    }
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  out = new ::DDS::OctetSeq();
  return ::DDS::RETCODE_UNSUPPORTED;
}

::DDS::ReturnCode_t weatherInfoTypeSupportImpl::decode_from_string(const char* in, weatherInfo_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
  out = new weatherInfo;
  OpenDDS::DCPS::set_default(*out);
#if OPENDDS_HAS_JSON_VALUE_READER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    rapidjson::StringStream buffer(in);
    OpenDDS::DCPS::JsonValueReader<> jvr(buffer);
    return vread(jvr, *out) ? ::DDS::RETCODE_OK : ::DDS::RETCODE_ERROR;
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  return ::DDS::RETCODE_UNSUPPORTED;
}

::DDS::ReturnCode_t weatherInfoTypeSupportImpl::decode_from_bytes(const ::DDS::OctetSeq& in, weatherInfo_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
#if OPENDDS_HAS_JSON_VALUE_READER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    return decode_from_string(reinterpret_cast<const char*>(in.get_buffer()), out, format);
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  out = new weatherInfo();
  return ::DDS::RETCODE_UNSUPPORTED;
}

weatherInfoTypeSupport::_ptr_type weatherInfoTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl< ::UATM::weatherInfo> : MetaStruct {
  typedef  ::UATM::weatherInfo T;

#ifndef OPENDDS_NO_MULTI_TOPIC
  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 1; }

#endif /* OPENDDS_NO_MULTI_TOPIC */

  Value getValue(const void* stru, const char* field) const
  {
    const ::UATM::weatherInfo& typed = *static_cast<const ::UATM::weatherInfo*>(stru);
    ACE_UNUSED_ARG(typed);
    if (std::strcmp(field, "flight_route_id") == 0) {
      return typed.flight_route_id;
    }
    if (std::strcmp(field, "flight_id") == 0) {
      return typed.flight_id;
    }
    if (std::strcmp(field, "estimated_time") == 0) {
      return typed.estimated_time.in();
    }
    if (std::strcmp(field, "status") == 0) {
      return typed.status;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::weatherInfo)");
  }

  Value getValue(Serializer& strm, const char* field, TypeSupportImpl* = 0) const
  {
    const Encoding& encoding = strm.encoding();
    ACE_UNUSED_ARG(encoding);
    size_t total_size = 0;
    if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
      if (!strm.read_delimiter(total_size)) {
        throw std::runtime_error("Unable to reader delimiter in getValue");
      }
    }
    std::string base_field = field;
    const size_t index = base_field.find('.');
    std::string subfield;
    if (index != std::string::npos) {
      subfield = base_field.substr(index + 1);
      base_field = base_field.substr(0, index);
    }
    if (base_field == "flight_route_id") {
      ACE_CDR::Long val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'flight_route_id' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'flight_route_id' could not be skipped");
      }
    }
    if (!gen_skip_over(strm, static_cast< ::UATM::ArrayString_forany*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (base_field == "flight_id") {
      ACE_CDR::Long val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'flight_id' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'flight_id' could not be skipped");
      }
    }
    if (base_field == "estimated_time") {
      TAO::String_Manager val;
      if (!(strm >> val.out())) {
        throw std::runtime_error("Field 'estimated_time' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(strm >> len)) {
        throw std::runtime_error("String 'estimated_time' length could not be deserialized");
      }
      if (!strm.skip(len)) {
        throw std::runtime_error("String 'estimated_time' contents could not be skipped");
      }
    }
    if (base_field == "status") {
      ACE_CDR::Boolean val;
      if (!(strm >> ACE_InputCDR::to_boolean(val))) {
        throw std::runtime_error("Field 'status' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  1 )) {
        throw std::runtime_error("Field 'status' could not be skipped");
      }
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Did not find field in getValue");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "flight_route_id") == 0) {
      return make_field_cmp(&T::flight_route_id, next);
    }
    if (std::strcmp(field, "flight_id") == 0) {
      return make_field_cmp(&T::flight_id, next);
    }
    if (std::strcmp(field, "estimated_time") == 0) {
      return make_field_cmp(&T::estimated_time, next);
    }
    if (std::strcmp(field, "status") == 0) {
      return make_field_cmp(&T::status, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::weatherInfo)");
  }

#ifndef OPENDDS_NO_MULTI_TOPIC
  const char** getFieldNames() const
  {
    static const char* names[] = {"flight_route_id", "waypoints", "flight_id", "estimated_time", "status", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "flight_route_id") == 0) {
      return &static_cast<const T*>(stru)->flight_route_id;
    }
    if (std::strcmp(field, "waypoints") == 0) {
      return &static_cast<const T*>(stru)->waypoints;
    }
    if (std::strcmp(field, "flight_id") == 0) {
      return &static_cast<const T*>(stru)->flight_id;
    }
    if (std::strcmp(field, "estimated_time") == 0) {
      return &static_cast<const T*>(stru)->estimated_time;
    }
    if (std::strcmp(field, "status") == 0) {
      return &static_cast<const T*>(stru)->status;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::weatherInfo)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "flight_route_id") == 0) {
      static_cast<T*>(lhs)->flight_route_id = *static_cast<const  ::CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "waypoints") == 0) {
       ::UATM::ArrayString* lhsArr = &static_cast<T*>(lhs)->waypoints;
      const  ::UATM::ArrayString* rhsArr = static_cast<const  ::UATM::ArrayString*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      for (CORBA::ULong i0 = 0; i0 < 2; ++i0) {
        (*lhsArr)[i0] = (*rhsArr)[i0];
      }
      return;
    }
    if (std::strcmp(field, "flight_id") == 0) {
      static_cast<T*>(lhs)->flight_id = *static_cast<const  ::CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "estimated_time") == 0) {
      static_cast<T*>(lhs)->estimated_time = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "status") == 0) {
      static_cast<T*>(lhs)->status = *static_cast<const  ::CORBA::Boolean*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::weatherInfo)");
  }

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "flight_route_id") == 0) {
      return static_cast<const T*>(lhs)->flight_route_id == static_cast<const T*>(rhs)->flight_route_id;
    }
    if (std::strcmp(field, "flight_id") == 0) {
      return static_cast<const T*>(lhs)->flight_id == static_cast<const T*>(rhs)->flight_id;
    }
    if (std::strcmp(field, "estimated_time") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->estimated_time.in(), static_cast<const T*>(rhs)->estimated_time.in());
    }
    if (std::strcmp(field, "status") == 0) {
      return static_cast<const T*>(lhs)->status == static_cast<const T*>(rhs)->status;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::weatherInfo)");
  }
#endif /* OPENDDS_NO_MULTI_TOPIC */

};

template<>
const MetaStruct& getMetaStruct< ::UATM::weatherInfo>()
{
  static MetaStructImpl< ::UATM::weatherInfo> msi;
  return msi;
}

bool gen_skip_over(Serializer& ser,  ::UATM::weatherInfo*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl< ::UATM::weatherInfo>().getValue(ser, "");
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif // ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace XTypes {

#ifndef OPENDDS_SAFETY_PROFILE
#if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
template <>
class DynamicDataAdapterImpl< ::UATM::weatherInfo,  ::UATM::weatherInfo > : public DynamicDataAdapter_T< ::UATM::weatherInfo> {
public:
  DynamicDataAdapterImpl(DDS::DynamicType_ptr type,  ::UATM::weatherInfo& value)
    : DynamicDataAdapter_T< ::UATM::weatherInfo>(type, value)
  {
  }

  DynamicDataAdapterImpl(DDS::DynamicType_ptr type, const  ::UATM::weatherInfo& value)
    : DynamicDataAdapter_T< ::UATM::weatherInfo>(type, value)
  {
  }

  DDS::ReturnCode_t clear_all_values()
  {
    const DDS::ReturnCode_t rc = assert_mutable("DynamicDataAdapter::clear_all_values");
    if (rc == DDS::RETCODE_OK) {
      OpenDDS::DCPS::set_default(value_);
    }
    return rc;
  }

  DDS::UInt32 get_item_count()
  {
    return 5;
  }

  bool serialized_size(const OpenDDS::DCPS::Encoding& enc, size_t& size, OpenDDS::DCPS::Sample::Extent ext) const
  {
    using namespace OpenDDS::DCPS;
    if (ext == Sample::Full) {
      DCPS::serialized_size(enc, size, value_);
    } else if (ext == Sample::NestedKeyOnly) {
      const NestedKeyOnly<const  ::UATM::weatherInfo> nested_key_only(value_);
      DCPS::serialized_size(enc, size, nested_key_only);
    } else {
      return false; // Non-topic type
    }
    return true;
  }

  bool serialize(OpenDDS::DCPS::Serializer& ser, OpenDDS::DCPS::Sample::Extent ext) const
  {
    using namespace OpenDDS::DCPS;
    if (ext == Sample::Full) {
      return ser << value_;
    } else if (ext == Sample::NestedKeyOnly) {
      NestedKeyOnly<const  ::UATM::weatherInfo> nested_key_only(value_);
      return ser << nested_key_only;
    } else {
      return false; // Non-topic type
    }
  }

protected:
  DDS::ReturnCode_t get_raw_value(const char* method, void* dest, DDS::TypeKind tk, DDS::MemberId id)
  {
    switch (id) {
    case 0:
      {
        return get_simple_raw_value(method, dest, tk, value_.flight_route_id, id);
      }
    case 1:
      {
        return get_complex_raw_value< ::UATM::ArrayString, UATM_ArrayString_dda_tag>(method, dest, tk, value_.waypoints, id);
      }
    case 2:
      {
        return get_simple_raw_value(method, dest, tk, value_.flight_id, id);
      }
    case 3:
      {
        return get_s8_raw_value(method, dest, tk, value_.estimated_time, id);
      }
    case 4:
      {
        return get_simple_raw_value(method, dest, tk, value_.status, id);
      }
    default:
      return invalid_id(method, id);
    }
  }

  DDS::ReturnCode_t set_raw_value(const char* method, DDS::MemberId id, const void* source, DDS::TypeKind tk)
  {
    DDS::ReturnCode_t rc = assert_mutable(method);
    if (rc != DDS::RETCODE_OK) {
      return rc;
    }
    switch (id) {
    case 0:
      {
        return set_simple_raw_value(method, value_.flight_route_id, id, source, tk);
      }
    case 1:
      {
        return set_indirect_complex_raw_value< ::UATM::ArrayString, UATM_ArrayString_dda_tag>(method, value_.waypoints, id, source, tk);
      }
    case 2:
      {
        return set_simple_raw_value(method, value_.flight_id, id, source, tk);
      }
    case 3:
      {
        return set_s8_raw_value(method, value_.estimated_time.inout(), id, source, tk);
      }
    case 4:
      {
        return set_simple_raw_value(method, value_.status, id, source, tk);
      }
    default:
      return invalid_id(method, id);
    }
  }
};

#endif // if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER

template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::weatherInfo,  ::UATM::weatherInfo>(DDS::DynamicType_ptr type, const  ::UATM::weatherInfo& value)
{
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  if (type) {
    return new DynamicDataAdapterImpl< ::UATM::weatherInfo,  ::UATM::weatherInfo>(type, value);
  }
#  else
  ACE_UNUSED_ARG(type);
  ACE_UNUSED_ARG(value);
#  endif
  return 0;
}

template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::weatherInfo,  ::UATM::weatherInfo>(DDS::DynamicType_ptr type,  ::UATM::weatherInfo& value)
{
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  if (type) {
    return new DynamicDataAdapterImpl< ::UATM::weatherInfo,  ::UATM::weatherInfo>(type, value);
  }
#  else
  ACE_UNUSED_ARG(type);
  ACE_UNUSED_ARG(value);
#  endif
  return 0;
}

template <>
const  ::UATM::weatherInfo* get_dynamic_data_adapter_value< ::UATM::weatherInfo,  ::UATM::weatherInfo>(DDS::DynamicData_ptr dd)
{
  ACE_UNUSED_ARG(dd);
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  typedef DynamicDataAdapterImpl< ::UATM::weatherInfo,  ::UATM::weatherInfo> Dda;
  const Dda* const dda = dynamic_cast<Dda*>(dd);
  if (dda) {
    return &dda->wrapped();
  }
#  endif
  return 0;
}
#endif // ifndef OPENDDS_SAFETY_PROFILE

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End STRUCT: weatherInfo */

/* End MODULE: UATM */


/* Begin MODULE: UATM */



/* Begin STRUCT: flightRoutesInfo */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> const XTypes::TypeIdentifier& getMinimalTypeIdentifier<UATM_flightRoutesInfo_xtag>()
{
  static XTypes::TypeIdentifier ti;
  ACE_GUARD_RETURN(ACE_Thread_Mutex, guard, TheServiceParticipant->get_static_xtypes_lock(), ti);
  if (ti.kind() == XTypes::TK_NONE) {
    ti = XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(182, 210, 20, 203, 95, 214, 53, 135, 43, 160, 175, 223, 8, 194));
  }
  return ti;
}

template<> const XTypes::TypeMap& getMinimalTypeMap<UATM_flightRoutesInfo_xtag>()
{
  return OPENDDS_IDL_FILE_SPECIFIC(get_minimal_type_map, 0)();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool vread(OpenDDS::DCPS::ValueReader& value_reader,  ::UATM::flightRoutesInfo& value)
{
  ACE_UNUSED_ARG(value_reader);
  ACE_UNUSED_ARG(value);
  static const ListMemberHelper::Pair pairs[] = {{"weather_id",0},{"location",1},{"temperature",2},{"wind_speed",3},{"weather_condition",4},{"observation_time",5},{0,0}};
  ListMemberHelper helper(pairs);
  if (!value_reader.begin_struct(OpenDDS::DCPS::APPENDABLE)) return false;
  XTypes::MemberId member_id;
  while (value_reader.members_remaining()) {
    if (!value_reader.begin_struct_member(member_id, helper)) return false;
    switch (member_id) {
    case 0: {
      if (!value_reader.read_int32(value.weather_id)) return false;
      break;
    }
    case 1: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.location = x.c_str();
      }
      break;
    }
    case 2: {
      if (!value_reader.read_float32(value.temperature)) return false;
      break;
    }
    case 3: {
      if (!value_reader.read_float32(value.wind_speed)) return false;
      break;
    }
    case 4: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.weather_condition = x.c_str();
      }
      break;
    }
    case 5: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.observation_time = x.c_str();
      }
      break;
    }
    }
    if (!value_reader.end_struct_member()) return false;
  }
  if (!value_reader.end_struct()) return false;
  return true;
}

bool vread(OpenDDS::DCPS::ValueReader& value_reader, const NestedKeyOnly< ::UATM::flightRoutesInfo>& value)
{
  ACE_UNUSED_ARG(value_reader);
  ACE_UNUSED_ARG(value);
  static const ListMemberHelper::Pair pairs[] = {{"weather_id",0},{"location",1},{"temperature",2},{"wind_speed",3},{"weather_condition",4},{"observation_time",5},{0,0}};
  ListMemberHelper helper(pairs);
  if (!value_reader.begin_struct(OpenDDS::DCPS::APPENDABLE)) return false;
  XTypes::MemberId member_id;
  while (value_reader.members_remaining()) {
    if (!value_reader.begin_struct_member(member_id, helper)) return false;
    switch (member_id) {
    case 0: {
      if (!value_reader.read_int32(value.value.weather_id)) return false;
      break;
    }
    case 1: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.value.location = x.c_str();
      }
      break;
    }
    case 2: {
      if (!value_reader.read_float32(value.value.temperature)) return false;
      break;
    }
    case 3: {
      if (!value_reader.read_float32(value.value.wind_speed)) return false;
      break;
    }
    case 4: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.value.weather_condition = x.c_str();
      }
      break;
    }
    case 5: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.value.observation_time = x.c_str();
      }
      break;
    }
    }
    if (!value_reader.end_struct_member()) return false;
  }
  if (!value_reader.end_struct()) return false;
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const  ::UATM::flightRoutesInfo& value)
{
  ACE_UNUSED_ARG(value_writer);
  ACE_UNUSED_ARG(value);
  if (!value_writer.begin_struct(OpenDDS::DCPS::APPENDABLE)) {
    return false;
  }
  {
    MemberParam param(0, false, "weather_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.weather_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(1, false, "location", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.location)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(2, false, "temperature", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_float32(value.temperature)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(3, false, "wind_speed", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_float32(value.wind_speed)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(4, false, "weather_condition", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.weather_condition)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(5, false, "observation_time", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.observation_time)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  return value_writer.end_struct();
}

bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const NestedKeyOnly<const  ::UATM::flightRoutesInfo>& value)
{
  ACE_UNUSED_ARG(value_writer);
  ACE_UNUSED_ARG(value);
  if (!value_writer.begin_struct(OpenDDS::DCPS::APPENDABLE)) {
    return false;
  }
  {
    MemberParam param(0, false, "weather_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.value.weather_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(1, false, "location", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.value.location)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(2, false, "temperature", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_float32(value.value.temperature)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(3, false, "wind_speed", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_float32(value.value.wind_speed)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(4, false, "weather_condition", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.value.weather_condition)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(5, false, "observation_time", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.value.observation_time)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  return value_writer.end_struct();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> void set_default( ::UATM::flightRoutesInfo& stru)
{
  ACE_UNUSED_ARG(stru);
  stru.weather_id = 0;
  stru.location = "";
  stru.temperature = 0;
  stru.wind_speed = 0;
  stru.weather_condition = "";
  stru.observation_time = "";
}

void serialized_size(const Encoding& encoding, size_t& size, const ::UATM::flightRoutesInfo& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
  primitive_serialized_size(encoding, size, stru.weather_id);
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.location.in()) + 1;
  primitive_serialized_size(encoding, size, stru.temperature);
  primitive_serialized_size(encoding, size, stru.wind_speed);
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.weather_condition.in()) + 1;
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.observation_time.in()) + 1;
}

bool operator<<(Serializer& strm, const ::UATM::flightRoutesInfo& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
  return (strm << stru.weather_id)
    && (strm << ACE_OutputCDR::from_string(stru.location.in(), 20))
    && (strm << stru.temperature)
    && (strm << stru.wind_speed)
    && (strm << ACE_OutputCDR::from_string(stru.weather_condition.in(), 20))
    && (strm << ACE_OutputCDR::from_string(stru.observation_time.in(), 10));
}

bool operator>>(Serializer& strm,  ::UATM::flightRoutesInfo& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  bool reached_end_of_struct = false;
  ACE_UNUSED_ARG(reached_end_of_struct);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.weather_id = 0;
  } else {
    if (!(strm >> stru.weather_id)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.location = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.location.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.temperature = 0;
  } else {
    if (!(strm >> stru.temperature)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.wind_speed = 0;
  } else {
    if (!(strm >> stru.wind_speed)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.weather_condition = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.weather_condition.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.observation_time = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.observation_time.out(), 10))) {
      return false;
    }
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const ::UATM::flightRoutesInfo>& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
  primitive_serialized_size(encoding, size, stru.value.weather_id);
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.value.location.in()) + 1;
  primitive_serialized_size(encoding, size, stru.value.temperature);
  primitive_serialized_size(encoding, size, stru.value.wind_speed);
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.value.weather_condition.in()) + 1;
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.value.observation_time.in()) + 1;
}

bool operator<<(Serializer& strm, const NestedKeyOnly<const ::UATM::flightRoutesInfo>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
  return (strm << stru.value.weather_id)
    && (strm << ACE_OutputCDR::from_string(stru.value.location.in(), 20))
    && (strm << stru.value.temperature)
    && (strm << stru.value.wind_speed)
    && (strm << ACE_OutputCDR::from_string(stru.value.weather_condition.in(), 20))
    && (strm << ACE_OutputCDR::from_string(stru.value.observation_time.in(), 10));
}

bool operator>>(Serializer& strm, const NestedKeyOnly< ::UATM::flightRoutesInfo>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  bool reached_end_of_struct = false;
  ACE_UNUSED_ARG(reached_end_of_struct);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.weather_id = 0;
  } else {
    if (!(strm >> stru.value.weather_id)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.location = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.value.location.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.temperature = 0;
  } else {
    if (!(strm >> stru.value.temperature)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.wind_speed = 0;
  } else {
    if (!(strm >> stru.value.wind_speed)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.weather_condition = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.value.weather_condition.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.observation_time = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.value.observation_time.out(), 10))) {
      return false;
    }
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

void serialized_size(const Encoding& encoding, size_t& size, const KeyOnly<const  ::UATM::flightRoutesInfo> stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  switch (encoding.xcdr_version()) {
  case Encoding::XCDR_VERSION_1:
    {
    primitive_serialized_size(encoding, size, stru.value.weather_id);
    break;
    }
  case Encoding::XCDR_VERSION_2:
    {
    primitive_serialized_size(encoding, size, stru.value.weather_id);
    break;
    }
  case Encoding::XCDR_VERSION_NONE:
    {
    primitive_serialized_size(encoding, size, stru.value.weather_id);
    break;
    }
  }
}

bool operator<<(Serializer& strm, KeyOnly<const  ::UATM::flightRoutesInfo> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.value.weather_id);
}

bool operator>>(Serializer& strm, KeyOnly< ::UATM::flightRoutesInfo> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.value.weather_id);
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace DCPS {
bool DDSTraits< ::UATM::flightRoutesInfo>::is_key(const char* field)
{
  ACE_UNUSED_ARG(field);
  if (!ACE_OS::strcmp(field, "weather_id")) {
    return true;
  }
  return false;
}
} // namespace DCPS
} // namespace OpenDDS
OPENDDS_END_VERSIONED_NAMESPACE_DECL

namespace UATM {
::DDS::DataWriter_ptr flightRoutesInfoTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<flightRoutesInfo> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}

::DDS::DataReader_ptr flightRoutesInfoTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<flightRoutesInfo> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}

#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr flightRoutesInfoTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<flightRoutesInfo> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<flightRoutesInfo, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */

#ifndef OPENDDS_SAFETY_PROFILE
flightRoutesInfo* flightRoutesInfoTypeSupportImpl::create_sample(::DDS::DynamicData_ptr src)
{
  flightRoutesInfo* value = new flightRoutesInfo;
  const ::DDS::ReturnCode_t rc = OpenDDS::DCPS::TypeSupportImpl_T<flightRoutesInfo>::create_sample_rc(*value, src);
  if (rc != ::DDS::RETCODE_OK && OpenDDS::DCPS::log_level >= OpenDDS::DCPS::LogLevel::Warning) {
    ACE_ERROR((LM_WARNING, "(%P|%t) WARNING: flightRoutesInfoTypeSupportImpl::create_sample: "
      "create_sample_rc failed: %C\n", OpenDDS::DCPS::retcode_to_string(rc)));
  }
  return value;
}
#endif

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& flightRoutesInfoTypeSupportImpl::getMetaStructForType() const
{
  return OpenDDS::DCPS::getMetaStruct<flightRoutesInfo>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */

namespace {
  OpenDDS::DCPS::TypeSupportInitializer<flightRoutesInfoTypeSupportImpl> ts_init_UATM_flightRoutesInfo;
}

const OpenDDS::XTypes::TypeIdentifier& flightRoutesInfoTypeSupportImpl::getMinimalTypeIdentifier() const
{
  return OpenDDS::DCPS::getMinimalTypeIdentifier<OpenDDS::DCPS::UATM_flightRoutesInfo_xtag>();
}

const OpenDDS::XTypes::TypeMap& flightRoutesInfoTypeSupportImpl::getMinimalTypeMap() const
{
  return OpenDDS::DCPS::getMinimalTypeMap<OpenDDS::DCPS::UATM_flightRoutesInfo_xtag>();
}

const OpenDDS::XTypes::TypeIdentifier& flightRoutesInfoTypeSupportImpl::getCompleteTypeIdentifier() const
{
  static OpenDDS::XTypes::TypeIdentifier ti;
  return ti;
}

const OpenDDS::XTypes::TypeMap& flightRoutesInfoTypeSupportImpl::getCompleteTypeMap() const
{
  static OpenDDS::XTypes::TypeMap tm;
  return tm;
}

::DDS::ReturnCode_t flightRoutesInfoTypeSupportImpl::encode_to_string(const flightRoutesInfo& in, CORBA::String_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
#if OPENDDS_HAS_JSON_VALUE_WRITER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    rapidjson::StringBuffer buffer;
    rapidjson::Writer<rapidjson::StringBuffer> writer(buffer);
    OpenDDS::DCPS::JsonValueWriter<rapidjson::Writer<rapidjson::StringBuffer> > jvw(writer);
    if (!vwrite(jvw, in)) {
      return ::DDS::RETCODE_ERROR;
    }
    out = buffer.GetString();
    return ::DDS::RETCODE_OK;
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  out = "";
  return ::DDS::RETCODE_UNSUPPORTED;
}

::DDS::ReturnCode_t flightRoutesInfoTypeSupportImpl::encode_to_bytes(const flightRoutesInfo& in, ::DDS::OctetSeq_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
#if OPENDDS_HAS_JSON_VALUE_WRITER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    CORBA::String_var buffer;
    const ::DDS::ReturnCode_t ret = encode_to_string(in, buffer, format);
    if (ret == ::DDS::RETCODE_OK) {
      const ::DDS::UInt32 len = static_cast< ::DDS::UInt32>(std::strlen(buffer));
      out = new ::DDS::OctetSeq(len);
      out->length(len);
      std::memcpy(out->get_buffer(), buffer, len);
      return ::DDS::RETCODE_OK;
    } else {
      out = new ::DDS::OctetSeq();
      return ret;
    }
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  out = new ::DDS::OctetSeq();
  return ::DDS::RETCODE_UNSUPPORTED;
}

::DDS::ReturnCode_t flightRoutesInfoTypeSupportImpl::decode_from_string(const char* in, flightRoutesInfo_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
  out = new flightRoutesInfo;
  OpenDDS::DCPS::set_default(*out);
#if OPENDDS_HAS_JSON_VALUE_READER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    rapidjson::StringStream buffer(in);
    OpenDDS::DCPS::JsonValueReader<> jvr(buffer);
    return vread(jvr, *out) ? ::DDS::RETCODE_OK : ::DDS::RETCODE_ERROR;
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  return ::DDS::RETCODE_UNSUPPORTED;
}

::DDS::ReturnCode_t flightRoutesInfoTypeSupportImpl::decode_from_bytes(const ::DDS::OctetSeq& in, flightRoutesInfo_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
#if OPENDDS_HAS_JSON_VALUE_READER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    return decode_from_string(reinterpret_cast<const char*>(in.get_buffer()), out, format);
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  out = new flightRoutesInfo();
  return ::DDS::RETCODE_UNSUPPORTED;
}

flightRoutesInfoTypeSupport::_ptr_type flightRoutesInfoTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl< ::UATM::flightRoutesInfo> : MetaStruct {
  typedef  ::UATM::flightRoutesInfo T;

#ifndef OPENDDS_NO_MULTI_TOPIC
  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 1; }

#endif /* OPENDDS_NO_MULTI_TOPIC */

  Value getValue(const void* stru, const char* field) const
  {
    const ::UATM::flightRoutesInfo& typed = *static_cast<const ::UATM::flightRoutesInfo*>(stru);
    ACE_UNUSED_ARG(typed);
    if (std::strcmp(field, "weather_id") == 0) {
      return typed.weather_id;
    }
    if (std::strcmp(field, "location") == 0) {
      return typed.location.in();
    }
    if (std::strcmp(field, "temperature") == 0) {
      return typed.temperature;
    }
    if (std::strcmp(field, "wind_speed") == 0) {
      return typed.wind_speed;
    }
    if (std::strcmp(field, "weather_condition") == 0) {
      return typed.weather_condition.in();
    }
    if (std::strcmp(field, "observation_time") == 0) {
      return typed.observation_time.in();
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::flightRoutesInfo)");
  }

  Value getValue(Serializer& strm, const char* field, TypeSupportImpl* = 0) const
  {
    const Encoding& encoding = strm.encoding();
    ACE_UNUSED_ARG(encoding);
    size_t total_size = 0;
    if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
      if (!strm.read_delimiter(total_size)) {
        throw std::runtime_error("Unable to reader delimiter in getValue");
      }
    }
    std::string base_field = field;
    const size_t index = base_field.find('.');
    std::string subfield;
    if (index != std::string::npos) {
      subfield = base_field.substr(index + 1);
      base_field = base_field.substr(0, index);
    }
    if (base_field == "weather_id") {
      ACE_CDR::Long val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'weather_id' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'weather_id' could not be skipped");
      }
    }
    if (base_field == "location") {
      TAO::String_Manager val;
      if (!(strm >> val.out())) {
        throw std::runtime_error("Field 'location' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(strm >> len)) {
        throw std::runtime_error("String 'location' length could not be deserialized");
      }
      if (!strm.skip(len)) {
        throw std::runtime_error("String 'location' contents could not be skipped");
      }
    }
    if (base_field == "temperature") {
      ACE_CDR::Float val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'temperature' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'temperature' could not be skipped");
      }
    }
    if (base_field == "wind_speed") {
      ACE_CDR::Float val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'wind_speed' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'wind_speed' could not be skipped");
      }
    }
    if (base_field == "weather_condition") {
      TAO::String_Manager val;
      if (!(strm >> val.out())) {
        throw std::runtime_error("Field 'weather_condition' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(strm >> len)) {
        throw std::runtime_error("String 'weather_condition' length could not be deserialized");
      }
      if (!strm.skip(len)) {
        throw std::runtime_error("String 'weather_condition' contents could not be skipped");
      }
    }
    if (base_field == "observation_time") {
      TAO::String_Manager val;
      if (!(strm >> val.out())) {
        throw std::runtime_error("Field 'observation_time' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(strm >> len)) {
        throw std::runtime_error("String 'observation_time' length could not be deserialized");
      }
      if (!strm.skip(len)) {
        throw std::runtime_error("String 'observation_time' contents could not be skipped");
      }
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Did not find field in getValue");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "weather_id") == 0) {
      return make_field_cmp(&T::weather_id, next);
    }
    if (std::strcmp(field, "location") == 0) {
      return make_field_cmp(&T::location, next);
    }
    if (std::strcmp(field, "temperature") == 0) {
      return make_field_cmp(&T::temperature, next);
    }
    if (std::strcmp(field, "wind_speed") == 0) {
      return make_field_cmp(&T::wind_speed, next);
    }
    if (std::strcmp(field, "weather_condition") == 0) {
      return make_field_cmp(&T::weather_condition, next);
    }
    if (std::strcmp(field, "observation_time") == 0) {
      return make_field_cmp(&T::observation_time, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::flightRoutesInfo)");
  }

#ifndef OPENDDS_NO_MULTI_TOPIC
  const char** getFieldNames() const
  {
    static const char* names[] = {"weather_id", "location", "temperature", "wind_speed", "weather_condition", "observation_time", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "weather_id") == 0) {
      return &static_cast<const T*>(stru)->weather_id;
    }
    if (std::strcmp(field, "location") == 0) {
      return &static_cast<const T*>(stru)->location;
    }
    if (std::strcmp(field, "temperature") == 0) {
      return &static_cast<const T*>(stru)->temperature;
    }
    if (std::strcmp(field, "wind_speed") == 0) {
      return &static_cast<const T*>(stru)->wind_speed;
    }
    if (std::strcmp(field, "weather_condition") == 0) {
      return &static_cast<const T*>(stru)->weather_condition;
    }
    if (std::strcmp(field, "observation_time") == 0) {
      return &static_cast<const T*>(stru)->observation_time;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::flightRoutesInfo)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "weather_id") == 0) {
      static_cast<T*>(lhs)->weather_id = *static_cast<const  ::CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "location") == 0) {
      static_cast<T*>(lhs)->location = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "temperature") == 0) {
      static_cast<T*>(lhs)->temperature = *static_cast<const  ::CORBA::Float*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "wind_speed") == 0) {
      static_cast<T*>(lhs)->wind_speed = *static_cast<const  ::CORBA::Float*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "weather_condition") == 0) {
      static_cast<T*>(lhs)->weather_condition = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "observation_time") == 0) {
      static_cast<T*>(lhs)->observation_time = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::flightRoutesInfo)");
  }

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "weather_id") == 0) {
      return static_cast<const T*>(lhs)->weather_id == static_cast<const T*>(rhs)->weather_id;
    }
    if (std::strcmp(field, "location") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->location.in(), static_cast<const T*>(rhs)->location.in());
    }
    if (std::strcmp(field, "temperature") == 0) {
      return static_cast<const T*>(lhs)->temperature == static_cast<const T*>(rhs)->temperature;
    }
    if (std::strcmp(field, "wind_speed") == 0) {
      return static_cast<const T*>(lhs)->wind_speed == static_cast<const T*>(rhs)->wind_speed;
    }
    if (std::strcmp(field, "weather_condition") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->weather_condition.in(), static_cast<const T*>(rhs)->weather_condition.in());
    }
    if (std::strcmp(field, "observation_time") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->observation_time.in(), static_cast<const T*>(rhs)->observation_time.in());
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::flightRoutesInfo)");
  }
#endif /* OPENDDS_NO_MULTI_TOPIC */

};

template<>
const MetaStruct& getMetaStruct< ::UATM::flightRoutesInfo>()
{
  static MetaStructImpl< ::UATM::flightRoutesInfo> msi;
  return msi;
}

bool gen_skip_over(Serializer& ser,  ::UATM::flightRoutesInfo*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl< ::UATM::flightRoutesInfo>().getValue(ser, "");
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif // ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace XTypes {

#ifndef OPENDDS_SAFETY_PROFILE
#if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
template <>
class DynamicDataAdapterImpl< ::UATM::flightRoutesInfo,  ::UATM::flightRoutesInfo > : public DynamicDataAdapter_T< ::UATM::flightRoutesInfo> {
public:
  DynamicDataAdapterImpl(DDS::DynamicType_ptr type,  ::UATM::flightRoutesInfo& value)
    : DynamicDataAdapter_T< ::UATM::flightRoutesInfo>(type, value)
  {
  }

  DynamicDataAdapterImpl(DDS::DynamicType_ptr type, const  ::UATM::flightRoutesInfo& value)
    : DynamicDataAdapter_T< ::UATM::flightRoutesInfo>(type, value)
  {
  }

  DDS::ReturnCode_t clear_all_values()
  {
    const DDS::ReturnCode_t rc = assert_mutable("DynamicDataAdapter::clear_all_values");
    if (rc == DDS::RETCODE_OK) {
      OpenDDS::DCPS::set_default(value_);
    }
    return rc;
  }

  DDS::UInt32 get_item_count()
  {
    return 6;
  }

  bool serialized_size(const OpenDDS::DCPS::Encoding& enc, size_t& size, OpenDDS::DCPS::Sample::Extent ext) const
  {
    using namespace OpenDDS::DCPS;
    if (ext == Sample::Full) {
      DCPS::serialized_size(enc, size, value_);
    } else if (ext == Sample::NestedKeyOnly) {
      const NestedKeyOnly<const  ::UATM::flightRoutesInfo> nested_key_only(value_);
      DCPS::serialized_size(enc, size, nested_key_only);
    } else {
      return false; // Non-topic type
    }
    return true;
  }

  bool serialize(OpenDDS::DCPS::Serializer& ser, OpenDDS::DCPS::Sample::Extent ext) const
  {
    using namespace OpenDDS::DCPS;
    if (ext == Sample::Full) {
      return ser << value_;
    } else if (ext == Sample::NestedKeyOnly) {
      NestedKeyOnly<const  ::UATM::flightRoutesInfo> nested_key_only(value_);
      return ser << nested_key_only;
    } else {
      return false; // Non-topic type
    }
  }

protected:
  DDS::ReturnCode_t get_raw_value(const char* method, void* dest, DDS::TypeKind tk, DDS::MemberId id)
  {
    switch (id) {
    case 0:
      {
        return get_simple_raw_value(method, dest, tk, value_.weather_id, id);
      }
    case 1:
      {
        return get_s8_raw_value(method, dest, tk, value_.location, id);
      }
    case 2:
      {
        return get_simple_raw_value(method, dest, tk, value_.temperature, id);
      }
    case 3:
      {
        return get_simple_raw_value(method, dest, tk, value_.wind_speed, id);
      }
    case 4:
      {
        return get_s8_raw_value(method, dest, tk, value_.weather_condition, id);
      }
    case 5:
      {
        return get_s8_raw_value(method, dest, tk, value_.observation_time, id);
      }
    default:
      return invalid_id(method, id);
    }
  }

  DDS::ReturnCode_t set_raw_value(const char* method, DDS::MemberId id, const void* source, DDS::TypeKind tk)
  {
    DDS::ReturnCode_t rc = assert_mutable(method);
    if (rc != DDS::RETCODE_OK) {
      return rc;
    }
    switch (id) {
    case 0:
      {
        return set_simple_raw_value(method, value_.weather_id, id, source, tk);
      }
    case 1:
      {
        return set_s8_raw_value(method, value_.location.inout(), id, source, tk);
      }
    case 2:
      {
        return set_simple_raw_value(method, value_.temperature, id, source, tk);
      }
    case 3:
      {
        return set_simple_raw_value(method, value_.wind_speed, id, source, tk);
      }
    case 4:
      {
        return set_s8_raw_value(method, value_.weather_condition.inout(), id, source, tk);
      }
    case 5:
      {
        return set_s8_raw_value(method, value_.observation_time.inout(), id, source, tk);
      }
    default:
      return invalid_id(method, id);
    }
  }
};

#endif // if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER

template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::flightRoutesInfo,  ::UATM::flightRoutesInfo>(DDS::DynamicType_ptr type, const  ::UATM::flightRoutesInfo& value)
{
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  if (type) {
    return new DynamicDataAdapterImpl< ::UATM::flightRoutesInfo,  ::UATM::flightRoutesInfo>(type, value);
  }
#  else
  ACE_UNUSED_ARG(type);
  ACE_UNUSED_ARG(value);
#  endif
  return 0;
}

template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::flightRoutesInfo,  ::UATM::flightRoutesInfo>(DDS::DynamicType_ptr type,  ::UATM::flightRoutesInfo& value)
{
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  if (type) {
    return new DynamicDataAdapterImpl< ::UATM::flightRoutesInfo,  ::UATM::flightRoutesInfo>(type, value);
  }
#  else
  ACE_UNUSED_ARG(type);
  ACE_UNUSED_ARG(value);
#  endif
  return 0;
}

template <>
const  ::UATM::flightRoutesInfo* get_dynamic_data_adapter_value< ::UATM::flightRoutesInfo,  ::UATM::flightRoutesInfo>(DDS::DynamicData_ptr dd)
{
  ACE_UNUSED_ARG(dd);
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  typedef DynamicDataAdapterImpl< ::UATM::flightRoutesInfo,  ::UATM::flightRoutesInfo> Dda;
  const Dda* const dda = dynamic_cast<Dda*>(dd);
  if (dda) {
    return &dda->wrapped();
  }
#  endif
  return 0;
}
#endif // ifndef OPENDDS_SAFETY_PROFILE

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End STRUCT: flightRoutesInfo */

/* End MODULE: UATM */


/* Begin MODULE: UATM */



/* Begin STRUCT: flightAssign */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> const XTypes::TypeIdentifier& getMinimalTypeIdentifier<UATM_flightAssign_xtag>()
{
  static XTypes::TypeIdentifier ti;
  ACE_GUARD_RETURN(ACE_Thread_Mutex, guard, TheServiceParticipant->get_static_xtypes_lock(), ti);
  if (ti.kind() == XTypes::TK_NONE) {
    ti = XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(48, 125, 143, 59, 79, 103, 21, 38, 255, 126, 137, 160, 99, 72));
  }
  return ti;
}

template<> const XTypes::TypeMap& getMinimalTypeMap<UATM_flightAssign_xtag>()
{
  return OPENDDS_IDL_FILE_SPECIFIC(get_minimal_type_map, 0)();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool vread(OpenDDS::DCPS::ValueReader& value_reader,  ::UATM::flightAssign& value)
{
  ACE_UNUSED_ARG(value_reader);
  ACE_UNUSED_ARG(value);
  static const ListMemberHelper::Pair pairs[] = {{"flight_assign_id",0},{"assign_time",1},{"operator_id",2},{"assign_status",3},{"resources_id",4},{0,0}};
  ListMemberHelper helper(pairs);
  if (!value_reader.begin_struct(OpenDDS::DCPS::APPENDABLE)) return false;
  XTypes::MemberId member_id;
  while (value_reader.members_remaining()) {
    if (!value_reader.begin_struct_member(member_id, helper)) return false;
    switch (member_id) {
    case 0: {
      if (!value_reader.read_int32(value.flight_assign_id)) return false;
      break;
    }
    case 1: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.assign_time = x.c_str();
      }
      break;
    }
    case 2: {
      if (!value_reader.read_int32(value.operator_id)) return false;
      break;
    }
    case 3: {
      {
         ::CORBA::Boolean bx;
        if (!value_reader.read_boolean(bx)) return false;
        value.assign_status = bx;
      }
      break;
    }
    case 4: {
      if (!value_reader.begin_array(XTypes::TK_STRING8)) return false;
      for (unsigned int i = 0; i != 2; ++i) {
        if (!value_reader.begin_element()) return false;
        {
          String x;
          if (!value_reader.read_string(x)) return false;
          value.resources_id[i] = x.c_str();
        }
        if (!value_reader.end_element()) return false;
      }
      if (!value_reader.end_array()) return false;
      break;
    }
    }
    if (!value_reader.end_struct_member()) return false;
  }
  if (!value_reader.end_struct()) return false;
  return true;
}

bool vread(OpenDDS::DCPS::ValueReader& value_reader, const NestedKeyOnly< ::UATM::flightAssign>& value)
{
  ACE_UNUSED_ARG(value_reader);
  ACE_UNUSED_ARG(value);
  static const ListMemberHelper::Pair pairs[] = {{"flight_assign_id",0},{"assign_time",1},{"operator_id",2},{"assign_status",3},{"resources_id",4},{0,0}};
  ListMemberHelper helper(pairs);
  if (!value_reader.begin_struct(OpenDDS::DCPS::APPENDABLE)) return false;
  XTypes::MemberId member_id;
  while (value_reader.members_remaining()) {
    if (!value_reader.begin_struct_member(member_id, helper)) return false;
    switch (member_id) {
    case 0: {
      if (!value_reader.read_int32(value.value.flight_assign_id)) return false;
      break;
    }
    case 1: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.value.assign_time = x.c_str();
      }
      break;
    }
    case 2: {
      if (!value_reader.read_int32(value.value.operator_id)) return false;
      break;
    }
    case 3: {
      {
         ::CORBA::Boolean bx;
        if (!value_reader.read_boolean(bx)) return false;
        value.value.assign_status = bx;
      }
      break;
    }
    case 4: {
      if (!value_reader.begin_array(XTypes::TK_STRING8)) return false;
      for (unsigned int i = 0; i != 2; ++i) {
        if (!value_reader.begin_element()) return false;
        {
          String x;
          if (!value_reader.read_string(x)) return false;
          value.value.resources_id[i] = x.c_str();
        }
        if (!value_reader.end_element()) return false;
      }
      if (!value_reader.end_array()) return false;
      break;
    }
    }
    if (!value_reader.end_struct_member()) return false;
  }
  if (!value_reader.end_struct()) return false;
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const  ::UATM::flightAssign& value)
{
  ACE_UNUSED_ARG(value_writer);
  ACE_UNUSED_ARG(value);
  if (!value_writer.begin_struct(OpenDDS::DCPS::APPENDABLE)) {
    return false;
  }
  {
    MemberParam param(0, false, "flight_assign_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.flight_assign_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(1, false, "assign_time", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.assign_time)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(2, false, "operator_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.operator_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(3, false, "assign_status", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_boolean(value.assign_status)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(4, false, "resources_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.begin_array(XTypes::TK_STRING8)) {
        return false;
      }
      for (::CORBA::ULong i = 0; i != 2; ++i) {
        if (!value_writer.begin_element(static_cast<ACE_CDR::ULong>(i))) {
          return false;
        }
        if (!value_writer.write_string(value.resources_id[i])) {
          return false;
        }
        if (!value_writer.end_element()) {
          return false;
        }
      }
      if (!value_writer.end_array()) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  return value_writer.end_struct();
}

bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const NestedKeyOnly<const  ::UATM::flightAssign>& value)
{
  ACE_UNUSED_ARG(value_writer);
  ACE_UNUSED_ARG(value);
  if (!value_writer.begin_struct(OpenDDS::DCPS::APPENDABLE)) {
    return false;
  }
  {
    MemberParam param(0, false, "flight_assign_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.value.flight_assign_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(1, false, "assign_time", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.value.assign_time)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(2, false, "operator_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.value.operator_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(3, false, "assign_status", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_boolean(value.value.assign_status)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(4, false, "resources_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.begin_array(XTypes::TK_STRING8)) {
        return false;
      }
      for (::CORBA::ULong i = 0; i != 2; ++i) {
        if (!value_writer.begin_element(static_cast<ACE_CDR::ULong>(i))) {
          return false;
        }
        if (!value_writer.write_string(value.value.resources_id[i])) {
          return false;
        }
        if (!value_writer.end_element()) {
          return false;
        }
      }
      if (!value_writer.end_array()) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  return value_writer.end_struct();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> void set_default( ::UATM::flightAssign& stru)
{
  ACE_UNUSED_ARG(stru);
  stru.flight_assign_id = 0;
  stru.assign_time = "";
  stru.operator_id = 0;
  stru.assign_status = 0;
   ::UATM::ArrayString_forany stru_resources_id_temp(const_cast< ::UATM::ArrayString_slice*>(stru.resources_id));
  set_default(stru_resources_id_temp);
}

void serialized_size(const Encoding& encoding, size_t& size, const ::UATM::flightAssign& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
   ::UATM::ArrayString_forany stru_resources_9id_forany(const_cast< ::UATM::ArrayString_slice*>(stru.resources_id));
  primitive_serialized_size(encoding, size, stru.flight_assign_id);
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.assign_time.in()) + 1;
  primitive_serialized_size(encoding, size, stru.operator_id);
  primitive_serialized_size(encoding, size, ACE_OutputCDR::from_boolean(stru.assign_status));
  serialized_size(encoding, size, stru_resources_9id_forany);
}

bool operator<<(Serializer& strm, const ::UATM::flightAssign& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
   ::UATM::ArrayString_forany stru_resources_9id_forany(const_cast< ::UATM::ArrayString_slice*>(stru.resources_id));
  return (strm << stru.flight_assign_id)
    && (strm << ACE_OutputCDR::from_string(stru.assign_time.in(), 20))
    && (strm << stru.operator_id)
    && (strm << ACE_OutputCDR::from_boolean(stru.assign_status))
    && (strm << stru_resources_9id_forany);
}

bool operator>>(Serializer& strm,  ::UATM::flightAssign& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  bool reached_end_of_struct = false;
  ACE_UNUSED_ARG(reached_end_of_struct);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

   ::UATM::ArrayString_forany stru_resources_9id_forany(const_cast< ::UATM::ArrayString_slice*>(stru.resources_id));
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.flight_assign_id = 0;
  } else {
    if (!(strm >> stru.flight_assign_id)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.assign_time = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.assign_time.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.operator_id = 0;
  } else {
    if (!(strm >> stru.operator_id)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.assign_status = 0;
  } else {
    if (!(strm >> ACE_InputCDR::to_boolean(stru.assign_status))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
     ::UATM::ArrayString_forany stru_resources_id_temp(const_cast< ::UATM::ArrayString_slice*>(stru.resources_id));
    set_default(stru_resources_id_temp);
  } else {
    if (!(strm >> stru_resources_9id_forany)) {
      return false;
    }
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const ::UATM::flightAssign>& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
   ::UATM::ArrayString_forany stru_value_resources_9id_forany(const_cast< ::UATM::ArrayString_slice*>(stru.value.resources_id));
  primitive_serialized_size(encoding, size, stru.value.flight_assign_id);
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.value.assign_time.in()) + 1;
  primitive_serialized_size(encoding, size, stru.value.operator_id);
  primitive_serialized_size(encoding, size, ACE_OutputCDR::from_boolean(stru.value.assign_status));
  serialized_size(encoding, size, stru_value_resources_9id_forany);
}

bool operator<<(Serializer& strm, const NestedKeyOnly<const ::UATM::flightAssign>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
   ::UATM::ArrayString_forany stru_value_resources_9id_forany(const_cast< ::UATM::ArrayString_slice*>(stru.value.resources_id));
  return (strm << stru.value.flight_assign_id)
    && (strm << ACE_OutputCDR::from_string(stru.value.assign_time.in(), 20))
    && (strm << stru.value.operator_id)
    && (strm << ACE_OutputCDR::from_boolean(stru.value.assign_status))
    && (strm << stru_value_resources_9id_forany);
}

bool operator>>(Serializer& strm, const NestedKeyOnly< ::UATM::flightAssign>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  bool reached_end_of_struct = false;
  ACE_UNUSED_ARG(reached_end_of_struct);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

   ::UATM::ArrayString_forany stru_value_resources_9id_forany(const_cast< ::UATM::ArrayString_slice*>(stru.value.resources_id));
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.flight_assign_id = 0;
  } else {
    if (!(strm >> stru.value.flight_assign_id)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.assign_time = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.value.assign_time.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.operator_id = 0;
  } else {
    if (!(strm >> stru.value.operator_id)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.assign_status = 0;
  } else {
    if (!(strm >> ACE_InputCDR::to_boolean(stru.value.assign_status))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
     ::UATM::ArrayString_forany stru_value_resources_id_temp(const_cast< ::UATM::ArrayString_slice*>(stru.value.resources_id));
    set_default(stru_value_resources_id_temp);
  } else {
    if (!(strm >> stru_value_resources_9id_forany)) {
      return false;
    }
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

void serialized_size(const Encoding& encoding, size_t& size, const KeyOnly<const  ::UATM::flightAssign> stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  switch (encoding.xcdr_version()) {
  case Encoding::XCDR_VERSION_1:
    {
    primitive_serialized_size(encoding, size, stru.value.flight_assign_id);
    break;
    }
  case Encoding::XCDR_VERSION_2:
    {
    primitive_serialized_size(encoding, size, stru.value.flight_assign_id);
    break;
    }
  case Encoding::XCDR_VERSION_NONE:
    {
    primitive_serialized_size(encoding, size, stru.value.flight_assign_id);
    break;
    }
  }
}

bool operator<<(Serializer& strm, KeyOnly<const  ::UATM::flightAssign> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.value.flight_assign_id);
}

bool operator>>(Serializer& strm, KeyOnly< ::UATM::flightAssign> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.value.flight_assign_id);
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace DCPS {
bool DDSTraits< ::UATM::flightAssign>::is_key(const char* field)
{
  ACE_UNUSED_ARG(field);
  if (!ACE_OS::strcmp(field, "flight_assign_id")) {
    return true;
  }
  return false;
}
} // namespace DCPS
} // namespace OpenDDS
OPENDDS_END_VERSIONED_NAMESPACE_DECL

namespace UATM {
::DDS::DataWriter_ptr flightAssignTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<flightAssign> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}

::DDS::DataReader_ptr flightAssignTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<flightAssign> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}

#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr flightAssignTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<flightAssign> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<flightAssign, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */

#ifndef OPENDDS_SAFETY_PROFILE
flightAssign* flightAssignTypeSupportImpl::create_sample(::DDS::DynamicData_ptr src)
{
  flightAssign* value = new flightAssign;
  const ::DDS::ReturnCode_t rc = OpenDDS::DCPS::TypeSupportImpl_T<flightAssign>::create_sample_rc(*value, src);
  if (rc != ::DDS::RETCODE_OK && OpenDDS::DCPS::log_level >= OpenDDS::DCPS::LogLevel::Warning) {
    ACE_ERROR((LM_WARNING, "(%P|%t) WARNING: flightAssignTypeSupportImpl::create_sample: "
      "create_sample_rc failed: %C\n", OpenDDS::DCPS::retcode_to_string(rc)));
  }
  return value;
}
#endif

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& flightAssignTypeSupportImpl::getMetaStructForType() const
{
  return OpenDDS::DCPS::getMetaStruct<flightAssign>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */

namespace {
  OpenDDS::DCPS::TypeSupportInitializer<flightAssignTypeSupportImpl> ts_init_UATM_flightAssign;
}

const OpenDDS::XTypes::TypeIdentifier& flightAssignTypeSupportImpl::getMinimalTypeIdentifier() const
{
  return OpenDDS::DCPS::getMinimalTypeIdentifier<OpenDDS::DCPS::UATM_flightAssign_xtag>();
}

const OpenDDS::XTypes::TypeMap& flightAssignTypeSupportImpl::getMinimalTypeMap() const
{
  return OpenDDS::DCPS::getMinimalTypeMap<OpenDDS::DCPS::UATM_flightAssign_xtag>();
}

const OpenDDS::XTypes::TypeIdentifier& flightAssignTypeSupportImpl::getCompleteTypeIdentifier() const
{
  static OpenDDS::XTypes::TypeIdentifier ti;
  return ti;
}

const OpenDDS::XTypes::TypeMap& flightAssignTypeSupportImpl::getCompleteTypeMap() const
{
  static OpenDDS::XTypes::TypeMap tm;
  return tm;
}

::DDS::ReturnCode_t flightAssignTypeSupportImpl::encode_to_string(const flightAssign& in, CORBA::String_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
#if OPENDDS_HAS_JSON_VALUE_WRITER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    rapidjson::StringBuffer buffer;
    rapidjson::Writer<rapidjson::StringBuffer> writer(buffer);
    OpenDDS::DCPS::JsonValueWriter<rapidjson::Writer<rapidjson::StringBuffer> > jvw(writer);
    if (!vwrite(jvw, in)) {
      return ::DDS::RETCODE_ERROR;
    }
    out = buffer.GetString();
    return ::DDS::RETCODE_OK;
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  out = "";
  return ::DDS::RETCODE_UNSUPPORTED;
}

::DDS::ReturnCode_t flightAssignTypeSupportImpl::encode_to_bytes(const flightAssign& in, ::DDS::OctetSeq_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
#if OPENDDS_HAS_JSON_VALUE_WRITER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    CORBA::String_var buffer;
    const ::DDS::ReturnCode_t ret = encode_to_string(in, buffer, format);
    if (ret == ::DDS::RETCODE_OK) {
      const ::DDS::UInt32 len = static_cast< ::DDS::UInt32>(std::strlen(buffer));
      out = new ::DDS::OctetSeq(len);
      out->length(len);
      std::memcpy(out->get_buffer(), buffer, len);
      return ::DDS::RETCODE_OK;
    } else {
      out = new ::DDS::OctetSeq();
      return ret;
    }
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  out = new ::DDS::OctetSeq();
  return ::DDS::RETCODE_UNSUPPORTED;
}

::DDS::ReturnCode_t flightAssignTypeSupportImpl::decode_from_string(const char* in, flightAssign_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
  out = new flightAssign;
  OpenDDS::DCPS::set_default(*out);
#if OPENDDS_HAS_JSON_VALUE_READER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    rapidjson::StringStream buffer(in);
    OpenDDS::DCPS::JsonValueReader<> jvr(buffer);
    return vread(jvr, *out) ? ::DDS::RETCODE_OK : ::DDS::RETCODE_ERROR;
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  return ::DDS::RETCODE_UNSUPPORTED;
}

::DDS::ReturnCode_t flightAssignTypeSupportImpl::decode_from_bytes(const ::DDS::OctetSeq& in, flightAssign_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
#if OPENDDS_HAS_JSON_VALUE_READER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    return decode_from_string(reinterpret_cast<const char*>(in.get_buffer()), out, format);
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  out = new flightAssign();
  return ::DDS::RETCODE_UNSUPPORTED;
}

flightAssignTypeSupport::_ptr_type flightAssignTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl< ::UATM::flightAssign> : MetaStruct {
  typedef  ::UATM::flightAssign T;

#ifndef OPENDDS_NO_MULTI_TOPIC
  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 1; }

#endif /* OPENDDS_NO_MULTI_TOPIC */

  Value getValue(const void* stru, const char* field) const
  {
    const ::UATM::flightAssign& typed = *static_cast<const ::UATM::flightAssign*>(stru);
    ACE_UNUSED_ARG(typed);
    if (std::strcmp(field, "flight_assign_id") == 0) {
      return typed.flight_assign_id;
    }
    if (std::strcmp(field, "assign_time") == 0) {
      return typed.assign_time.in();
    }
    if (std::strcmp(field, "operator_id") == 0) {
      return typed.operator_id;
    }
    if (std::strcmp(field, "assign_status") == 0) {
      return typed.assign_status;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::flightAssign)");
  }

  Value getValue(Serializer& strm, const char* field, TypeSupportImpl* = 0) const
  {
    const Encoding& encoding = strm.encoding();
    ACE_UNUSED_ARG(encoding);
    size_t total_size = 0;
    if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
      if (!strm.read_delimiter(total_size)) {
        throw std::runtime_error("Unable to reader delimiter in getValue");
      }
    }
    std::string base_field = field;
    const size_t index = base_field.find('.');
    std::string subfield;
    if (index != std::string::npos) {
      subfield = base_field.substr(index + 1);
      base_field = base_field.substr(0, index);
    }
    if (base_field == "flight_assign_id") {
      ACE_CDR::Long val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'flight_assign_id' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'flight_assign_id' could not be skipped");
      }
    }
    if (base_field == "assign_time") {
      TAO::String_Manager val;
      if (!(strm >> val.out())) {
        throw std::runtime_error("Field 'assign_time' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(strm >> len)) {
        throw std::runtime_error("String 'assign_time' length could not be deserialized");
      }
      if (!strm.skip(len)) {
        throw std::runtime_error("String 'assign_time' contents could not be skipped");
      }
    }
    if (base_field == "operator_id") {
      ACE_CDR::Long val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'operator_id' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'operator_id' could not be skipped");
      }
    }
    if (base_field == "assign_status") {
      ACE_CDR::Boolean val;
      if (!(strm >> ACE_InputCDR::to_boolean(val))) {
        throw std::runtime_error("Field 'assign_status' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  1 )) {
        throw std::runtime_error("Field 'assign_status' could not be skipped");
      }
    }
    if (!gen_skip_over(strm, static_cast< ::UATM::ArrayString_forany*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Did not find field in getValue");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "flight_assign_id") == 0) {
      return make_field_cmp(&T::flight_assign_id, next);
    }
    if (std::strcmp(field, "assign_time") == 0) {
      return make_field_cmp(&T::assign_time, next);
    }
    if (std::strcmp(field, "operator_id") == 0) {
      return make_field_cmp(&T::operator_id, next);
    }
    if (std::strcmp(field, "assign_status") == 0) {
      return make_field_cmp(&T::assign_status, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::flightAssign)");
  }

#ifndef OPENDDS_NO_MULTI_TOPIC
  const char** getFieldNames() const
  {
    static const char* names[] = {"flight_assign_id", "assign_time", "operator_id", "assign_status", "resources_id", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "flight_assign_id") == 0) {
      return &static_cast<const T*>(stru)->flight_assign_id;
    }
    if (std::strcmp(field, "assign_time") == 0) {
      return &static_cast<const T*>(stru)->assign_time;
    }
    if (std::strcmp(field, "operator_id") == 0) {
      return &static_cast<const T*>(stru)->operator_id;
    }
    if (std::strcmp(field, "assign_status") == 0) {
      return &static_cast<const T*>(stru)->assign_status;
    }
    if (std::strcmp(field, "resources_id") == 0) {
      return &static_cast<const T*>(stru)->resources_id;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::flightAssign)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "flight_assign_id") == 0) {
      static_cast<T*>(lhs)->flight_assign_id = *static_cast<const  ::CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "assign_time") == 0) {
      static_cast<T*>(lhs)->assign_time = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "operator_id") == 0) {
      static_cast<T*>(lhs)->operator_id = *static_cast<const  ::CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "assign_status") == 0) {
      static_cast<T*>(lhs)->assign_status = *static_cast<const  ::CORBA::Boolean*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "resources_id") == 0) {
       ::UATM::ArrayString* lhsArr = &static_cast<T*>(lhs)->resources_id;
      const  ::UATM::ArrayString* rhsArr = static_cast<const  ::UATM::ArrayString*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      for (CORBA::ULong i0 = 0; i0 < 2; ++i0) {
        (*lhsArr)[i0] = (*rhsArr)[i0];
      }
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::flightAssign)");
  }

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "flight_assign_id") == 0) {
      return static_cast<const T*>(lhs)->flight_assign_id == static_cast<const T*>(rhs)->flight_assign_id;
    }
    if (std::strcmp(field, "assign_time") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->assign_time.in(), static_cast<const T*>(rhs)->assign_time.in());
    }
    if (std::strcmp(field, "operator_id") == 0) {
      return static_cast<const T*>(lhs)->operator_id == static_cast<const T*>(rhs)->operator_id;
    }
    if (std::strcmp(field, "assign_status") == 0) {
      return static_cast<const T*>(lhs)->assign_status == static_cast<const T*>(rhs)->assign_status;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::flightAssign)");
  }
#endif /* OPENDDS_NO_MULTI_TOPIC */

};

template<>
const MetaStruct& getMetaStruct< ::UATM::flightAssign>()
{
  static MetaStructImpl< ::UATM::flightAssign> msi;
  return msi;
}

bool gen_skip_over(Serializer& ser,  ::UATM::flightAssign*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl< ::UATM::flightAssign>().getValue(ser, "");
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif // ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace XTypes {

#ifndef OPENDDS_SAFETY_PROFILE
#if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
template <>
class DynamicDataAdapterImpl< ::UATM::flightAssign,  ::UATM::flightAssign > : public DynamicDataAdapter_T< ::UATM::flightAssign> {
public:
  DynamicDataAdapterImpl(DDS::DynamicType_ptr type,  ::UATM::flightAssign& value)
    : DynamicDataAdapter_T< ::UATM::flightAssign>(type, value)
  {
  }

  DynamicDataAdapterImpl(DDS::DynamicType_ptr type, const  ::UATM::flightAssign& value)
    : DynamicDataAdapter_T< ::UATM::flightAssign>(type, value)
  {
  }

  DDS::ReturnCode_t clear_all_values()
  {
    const DDS::ReturnCode_t rc = assert_mutable("DynamicDataAdapter::clear_all_values");
    if (rc == DDS::RETCODE_OK) {
      OpenDDS::DCPS::set_default(value_);
    }
    return rc;
  }

  DDS::UInt32 get_item_count()
  {
    return 5;
  }

  bool serialized_size(const OpenDDS::DCPS::Encoding& enc, size_t& size, OpenDDS::DCPS::Sample::Extent ext) const
  {
    using namespace OpenDDS::DCPS;
    if (ext == Sample::Full) {
      DCPS::serialized_size(enc, size, value_);
    } else if (ext == Sample::NestedKeyOnly) {
      const NestedKeyOnly<const  ::UATM::flightAssign> nested_key_only(value_);
      DCPS::serialized_size(enc, size, nested_key_only);
    } else {
      return false; // Non-topic type
    }
    return true;
  }

  bool serialize(OpenDDS::DCPS::Serializer& ser, OpenDDS::DCPS::Sample::Extent ext) const
  {
    using namespace OpenDDS::DCPS;
    if (ext == Sample::Full) {
      return ser << value_;
    } else if (ext == Sample::NestedKeyOnly) {
      NestedKeyOnly<const  ::UATM::flightAssign> nested_key_only(value_);
      return ser << nested_key_only;
    } else {
      return false; // Non-topic type
    }
  }

protected:
  DDS::ReturnCode_t get_raw_value(const char* method, void* dest, DDS::TypeKind tk, DDS::MemberId id)
  {
    switch (id) {
    case 0:
      {
        return get_simple_raw_value(method, dest, tk, value_.flight_assign_id, id);
      }
    case 1:
      {
        return get_s8_raw_value(method, dest, tk, value_.assign_time, id);
      }
    case 2:
      {
        return get_simple_raw_value(method, dest, tk, value_.operator_id, id);
      }
    case 3:
      {
        return get_simple_raw_value(method, dest, tk, value_.assign_status, id);
      }
    case 4:
      {
        return get_complex_raw_value< ::UATM::ArrayString, UATM_ArrayString_dda_tag>(method, dest, tk, value_.resources_id, id);
      }
    default:
      return invalid_id(method, id);
    }
  }

  DDS::ReturnCode_t set_raw_value(const char* method, DDS::MemberId id, const void* source, DDS::TypeKind tk)
  {
    DDS::ReturnCode_t rc = assert_mutable(method);
    if (rc != DDS::RETCODE_OK) {
      return rc;
    }
    switch (id) {
    case 0:
      {
        return set_simple_raw_value(method, value_.flight_assign_id, id, source, tk);
      }
    case 1:
      {
        return set_s8_raw_value(method, value_.assign_time.inout(), id, source, tk);
      }
    case 2:
      {
        return set_simple_raw_value(method, value_.operator_id, id, source, tk);
      }
    case 3:
      {
        return set_simple_raw_value(method, value_.assign_status, id, source, tk);
      }
    case 4:
      {
        return set_indirect_complex_raw_value< ::UATM::ArrayString, UATM_ArrayString_dda_tag>(method, value_.resources_id, id, source, tk);
      }
    default:
      return invalid_id(method, id);
    }
  }
};

#endif // if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER

template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::flightAssign,  ::UATM::flightAssign>(DDS::DynamicType_ptr type, const  ::UATM::flightAssign& value)
{
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  if (type) {
    return new DynamicDataAdapterImpl< ::UATM::flightAssign,  ::UATM::flightAssign>(type, value);
  }
#  else
  ACE_UNUSED_ARG(type);
  ACE_UNUSED_ARG(value);
#  endif
  return 0;
}

template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::flightAssign,  ::UATM::flightAssign>(DDS::DynamicType_ptr type,  ::UATM::flightAssign& value)
{
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  if (type) {
    return new DynamicDataAdapterImpl< ::UATM::flightAssign,  ::UATM::flightAssign>(type, value);
  }
#  else
  ACE_UNUSED_ARG(type);
  ACE_UNUSED_ARG(value);
#  endif
  return 0;
}

template <>
const  ::UATM::flightAssign* get_dynamic_data_adapter_value< ::UATM::flightAssign,  ::UATM::flightAssign>(DDS::DynamicData_ptr dd)
{
  ACE_UNUSED_ARG(dd);
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  typedef DynamicDataAdapterImpl< ::UATM::flightAssign,  ::UATM::flightAssign> Dda;
  const Dda* const dda = dynamic_cast<Dda*>(dd);
  if (dda) {
    return &dda->wrapped();
  }
#  endif
  return 0;
}
#endif // ifndef OPENDDS_SAFETY_PROFILE

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End STRUCT: flightAssign */

/* End MODULE: UATM */
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

namespace {
XTypes::TypeObject OPENDDS_IDL_FILE_SPECIFIC(minimal_to, 0)()
{
  static const unsigned char to_bytes[] = { 100, 0, 0, 0, 241, 81, 10, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 0, 0, 0, 5, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 226, 243, 239, 91, 0, 12, 0, 0, 0, 1, 0, 0, 0, 1, 0, 112, 20, 69, 98, 240, 208, 11, 0, 0, 0, 2, 0, 0, 0, 1, 0, 1, 154, 203, 68, 84, 0, 12, 0, 0, 0, 3, 0, 0, 0, 1, 0, 112, 20, 213, 24, 157, 224, 12, 0, 0, 0, 4, 0, 0, 0, 1, 0, 112, 20, 209, 235, 16, 141  };
  XTypes::TypeObject to;
  if (!to_type_object(to_bytes, sizeof(to_bytes), to)) {
    throw std::runtime_error("Could not deserialize minimal Type Object 0");
  }
  return to;
}

XTypes::TypeObject OPENDDS_IDL_FILE_SPECIFIC(minimal_to, 1)()
{
  static const unsigned char to_bytes[] = { 113, 0, 0, 0, 241, 81, 10, 0, 1, 0, 0, 0, 0, 0, 0, 0, 97, 0, 0, 0, 5, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 3, 82, 22, 213, 0, 12, 0, 0, 0, 1, 0, 0, 0, 1, 0, 112, 20, 180, 232, 190, 205, 11, 0, 0, 0, 2, 0, 0, 0, 1, 0, 4, 77, 20, 161, 107, 0, 11, 0, 0, 0, 3, 0, 0, 0, 1, 0, 1, 151, 205, 154, 44, 0, 25, 0, 0, 0, 4, 0, 0, 0, 1, 0, 241, 126, 198, 253, 33, 84, 187, 219, 157, 152, 51, 230, 44, 169, 26, 176, 196, 75, 15  };
  XTypes::TypeObject to;
  if (!to_type_object(to_bytes, sizeof(to_bytes), to)) {
    throw std::runtime_error("Could not deserialize minimal Type Object 1");
  }
  return to;
}

XTypes::TypeObject OPENDDS_IDL_FILE_SPECIFIC(minimal_to, 2)()
{
  static const unsigned char to_bytes[] = { 115, 0, 0, 0, 241, 81, 10, 0, 1, 0, 0, 0, 0, 0, 0, 0, 99, 0, 0, 0, 5, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 216, 106, 181, 124, 0, 25, 0, 0, 0, 1, 0, 0, 0, 1, 0, 241, 126, 198, 253, 33, 84, 187, 219, 157, 152, 51, 230, 44, 169, 26, 10, 48, 186, 121, 0, 0, 0, 11, 0, 0, 0, 2, 0, 0, 0, 1, 0, 4, 114, 20, 76, 242, 0, 12, 0, 0, 0, 3, 0, 0, 0, 1, 0, 112, 20, 51, 174, 235, 158, 11, 0, 0, 0, 4, 0, 0, 0, 1, 0, 1, 154, 203, 68, 84  };
  XTypes::TypeObject to;
  if (!to_type_object(to_bytes, sizeof(to_bytes), to)) {
    throw std::runtime_error("Could not deserialize minimal Type Object 2");
  }
  return to;
}

XTypes::TypeObject OPENDDS_IDL_FILE_SPECIFIC(minimal_to, 3)()
{
  static const unsigned char to_bytes[] = { 27, 0, 0, 0, 241, 48, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 144, 243, 1, 0, 0, 0, 1, 0, 0, 0, 2, 112, 10  };
  XTypes::TypeObject to;
  if (!to_type_object(to_bytes, sizeof(to_bytes), to)) {
    throw std::runtime_error("Could not deserialize minimal Type Object 3");
  }
  return to;
}

XTypes::TypeObject OPENDDS_IDL_FILE_SPECIFIC(minimal_to, 4)()
{
  static const unsigned char to_bytes[] = { 116, 0, 0, 0, 241, 81, 10, 0, 1, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 6, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 56, 29, 18, 71, 0, 12, 0, 0, 0, 1, 0, 0, 0, 1, 0, 112, 20, 213, 24, 157, 224, 11, 0, 0, 0, 2, 0, 0, 0, 1, 0, 9, 238, 244, 56, 247, 0, 11, 0, 0, 0, 3, 0, 0, 0, 1, 0, 9, 104, 28, 114, 154, 0, 12, 0, 0, 0, 4, 0, 0, 0, 1, 0, 112, 20, 113, 247, 96, 43, 12, 0, 0, 0, 5, 0, 0, 0, 1, 0, 112, 10, 175, 124, 98, 243  };
  XTypes::TypeObject to;
  if (!to_type_object(to_bytes, sizeof(to_bytes), to)) {
    throw std::runtime_error("Could not deserialize minimal Type Object 4");
  }
  return to;
}

XTypes::TypeMap OPENDDS_IDL_FILE_SPECIFIC(get_minimal_type_map_private, 0)()
{
  XTypes::TypeMap tm;
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(19, 168, 58, 29, 6, 237, 50, 67, 22, 43, 153, 216, 181, 78))] = OPENDDS_IDL_FILE_SPECIFIC(minimal_to, 0)();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(48, 125, 143, 59, 79, 103, 21, 38, 255, 126, 137, 160, 99, 72))] = OPENDDS_IDL_FILE_SPECIFIC(minimal_to, 1)();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(73, 167, 10, 44, 147, 180, 68, 180, 250, 223, 197, 39, 166, 70))] = OPENDDS_IDL_FILE_SPECIFIC(minimal_to, 2)();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(126, 198, 253, 33, 84, 187, 219, 157, 152, 51, 230, 44, 169, 26))] = OPENDDS_IDL_FILE_SPECIFIC(minimal_to, 3)();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(182, 210, 20, 203, 95, 214, 53, 135, 43, 160, 175, 223, 8, 194))] = OPENDDS_IDL_FILE_SPECIFIC(minimal_to, 4)();
  return tm;
}

}

const XTypes::TypeMap& OPENDDS_IDL_FILE_SPECIFIC(get_minimal_type_map, 0)()
{
  static XTypes::TypeMap tm;
  ACE_GUARD_RETURN(ACE_Thread_Mutex, guard, TheServiceParticipant->get_static_xtypes_lock(), tm);
  if (tm.empty()) {
    tm = OPENDDS_IDL_FILE_SPECIFIC(get_minimal_type_map_private, 0)();
  }
  return tm;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

