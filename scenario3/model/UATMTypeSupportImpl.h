/* -*- C++ -*- */
/* Generated by C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\bin\opendds_idl version 3.29.1 (ACE version 6.5.21) running on input file UATM.idl */
#ifndef OPENDDS_IDL_GENERATED_UATMTYPESUPPORTIMPL_H_BTJ6BL
#define OPENDDS_IDL_GENERATED_UATMTYPESUPPORTIMPL_H_BTJ6BL

#include <dds/Version.h>
#if !OPENDDS_VERSION_EXACTLY(3, 29, 1)
#  error "This file should be regenerated with opendds_idl"
#endif
#include <dds/DCPS/Definitions.h>

#include <dds/DdsDcpsC.h>

#include "UATMC.h"
#include "UATMTypeSupportC.h"
#include "dds/DCPS/Serializer.h"
#include "dds/DCPS/Service_Participant.h"
#include "dds/DCPS/TypeSupportImpl.h"
#include "dds/DCPS/TypeSupportImpl_T.h"
#include "dds/DCPS/Util.h"
#include "dds/DCPS/ValueDispatcher.h"
#include "dds/DCPS/ValueReader.h"
#include "dds/DCPS/ValueWriter.h"
#include "dds/DCPS/XTypes/DynamicDataAdapter.h"
#include "dds/DCPS/XTypes/TypeObject.h"


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: UATM */



/* Begin STRUCT-FWD: flightCoordination */


/* End STRUCT-FWD: flightCoordination */


/* Begin STRUCT-FWD: flightAuthorizationRequest */


/* End STRUCT-FWD: flightAuthorizationRequest */


/* Begin STRUCT-FWD: flightRequestInfo */


/* End STRUCT-FWD: flightRequestInfo */

/* End MODULE: UATM */


/* Begin MODULE: UATM */



/* Begin TYPEDEF: ArrayString */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

struct UATM_ArrayString_xtag {};
template<> UATM_Export
const XTypes::TypeIdentifier& getMinimalTypeIdentifier<UATM_ArrayString_xtag>();

template<> UATM_Export
const XTypes::TypeMap& getMinimalTypeMap<UATM_ArrayString_xtag>();

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> UATM_Export
void set_default( ::UATM::ArrayString_forany& arr);

UATM_Export
void serialized_size(const Encoding& encoding, size_t& size, const  ::UATM::ArrayString_forany& arr);

UATM_Export
bool operator<<(Serializer& strm, const  ::UATM::ArrayString_forany& arr);

UATM_Export
bool operator>>(Serializer& strm,  ::UATM::ArrayString_forany& arr);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

UATM_Export
bool gen_skip_over(Serializer& ser,  ::UATM::ArrayString_forany*);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif // ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace XTypes {

#ifndef OPENDDS_SAFETY_PROFILE
struct UATM_ArrayString_dda_tag {};

template <>
UATM_Export DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::ArrayString, UATM_ArrayString_dda_tag>(DDS::DynamicType_ptr type, const  ::UATM::ArrayString& value);

template <>
UATM_Export DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::ArrayString, UATM_ArrayString_dda_tag>(DDS::DynamicType_ptr type,  ::UATM::ArrayString& value);

template <>
UATM_Export const  ::UATM::ArrayString* get_dynamic_data_adapter_value< ::UATM::ArrayString, UATM_ArrayString_dda_tag>(DDS::DynamicData_ptr dd);

#endif // ifndef OPENDDS_SAFETY_PROFILE

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End TYPEDEF: ArrayString */

/* End MODULE: UATM */


/* Begin MODULE: UATM */



/* Begin STRUCT: flightCoordination */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

struct UATM_flightCoordination_xtag {};
template<> UATM_Export
const XTypes::TypeIdentifier& getMinimalTypeIdentifier<UATM_flightCoordination_xtag>();

template<> UATM_Export
const XTypes::TypeMap& getMinimalTypeMap<UATM_flightCoordination_xtag>();

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

UATM_Export
bool vread(OpenDDS::DCPS::ValueReader& value_reader,  ::UATM::flightCoordination& value);

UATM_Export
bool vread(OpenDDS::DCPS::ValueReader& value_reader, const NestedKeyOnly< ::UATM::flightCoordination>& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

UATM_Export
bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const  ::UATM::flightCoordination& value);

UATM_Export
bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const NestedKeyOnly<const  ::UATM::flightCoordination>& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> UATM_Export
void set_default( ::UATM::flightCoordination& stru);

UATM_Export
void serialized_size(const Encoding& encoding, size_t& size, const ::UATM::flightCoordination& stru);

UATM_Export
bool operator<<(Serializer& strm, const ::UATM::flightCoordination& stru);

UATM_Export
bool operator>>(Serializer& strm,  ::UATM::flightCoordination& stru);

UATM_Export
void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const ::UATM::flightCoordination>& stru);

UATM_Export
bool operator<<(Serializer& strm, const NestedKeyOnly<const ::UATM::flightCoordination>& stru);

UATM_Export
bool operator>>(Serializer& strm, const NestedKeyOnly< ::UATM::flightCoordination>& stru);

template <>
struct MarshalTraits< ::UATM::flightCoordination> {
  static void representations_allowed_by_type(DDS::DataRepresentationIdSeq& seq)
  {
    seq.length(4);
    seq[0] = DDS::XCDR_DATA_REPRESENTATION;
    seq[1] = DDS::XCDR2_DATA_REPRESENTATION;
    seq[2] = DDS::XML_DATA_REPRESENTATION;
    seq[3] = OpenDDS::DCPS::UNALIGNED_CDR_DATA_REPRESENTATION;
  }

  static SerializedSizeBound serialized_size_bound(const Encoding& encoding)
  {
    switch (encoding.kind()) {
    case Encoding::KIND_XCDR1:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR2:
      return SerializedSizeBound();
    case Encoding::KIND_UNALIGNED_CDR:
      return SerializedSizeBound(93);
    default:
      OPENDDS_ASSERT(false);
      return SerializedSizeBound();
    }
  }

  static SerializedSizeBound key_only_serialized_size_bound(const Encoding& encoding)
  {
    switch (encoding.kind()) {
    case Encoding::KIND_XCDR1:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR2:
      return SerializedSizeBound();
    case Encoding::KIND_UNALIGNED_CDR:
      return SerializedSizeBound(4);
    default:
      OPENDDS_ASSERT(false);
      return SerializedSizeBound();
    }
  }

  static bool to_message_block(ACE_Message_Block&, const  ::UATM::flightCoordination&) { return false; }
  static bool from_message_block( ::UATM::flightCoordination&, const ACE_Message_Block&) { return false; }
  static Extensibility extensibility() { return APPENDABLE; }
  static Extensibility max_extensibility_level() { return APPENDABLE; }
};
UATM_Export
void serialized_size(const Encoding& encoding, size_t& size, const KeyOnly<const  ::UATM::flightCoordination> stru);

UATM_Export
bool operator<<(Serializer& strm, KeyOnly<const  ::UATM::flightCoordination> stru);

UATM_Export
bool operator>>(Serializer& strm, KeyOnly< ::UATM::flightCoordination> stru);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace UATM {
/// This structure supports use of std::map with one or more keys.
struct UATM_Export flightCoordination_OpenDDS_KeyLessThan {
  bool operator()(const  ::UATM::flightCoordination& v1, const  ::UATM::flightCoordination& v2) const
  {
    using ::operator<; // TAO::String_Manager's operator< is in global NS
    if (v1.coordination_id < v2.coordination_id) return true;
    if (v2.coordination_id < v1.coordination_id) return false;
    return false;
  }
};
}

namespace UATM {
class flightCoordinationTypeSupportImpl;
}
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace DCPS {
template <>
struct DDSTraits< ::UATM::flightCoordination> {
  typedef  ::UATM::flightCoordination MessageType;
  typedef  ::UATM::flightCoordinationSeq MessageSequenceType;
  typedef  ::UATM::flightCoordinationSeq::PrivateMemberAccess MessageSequenceAdapterType;
  typedef  ::UATM::flightCoordinationTypeSupport TypeSupportType;
  typedef  ::UATM::flightCoordinationTypeSupportImpl TypeSupportImplType;
  typedef  ::UATM::flightCoordinationDataWriter DataWriterType;
  typedef  ::UATM::flightCoordinationDataReader DataReaderType;
  typedef  ::UATM::flightCoordination_OpenDDS_KeyLessThan LessThanType;
  typedef OpenDDS::DCPS::KeyOnly<const  ::UATM::flightCoordination> KeyOnlyType;
  typedef OpenDDS::DCPS::UATM_flightCoordination_xtag XtagType;

  static const char* type_name() { return "UATM::flightCoordination"; }
  static size_t key_count() { return 1; }
  static bool is_key(const char*);
};
} // namespace DCPS
} // namespace OpenDDS
OPENDDS_END_VERSIONED_NAMESPACE_DECL

namespace UATM {
class UATM_Export flightCoordinationTypeSupportImpl
  : public virtual OpenDDS::DCPS::TypeSupportImpl_T<flightCoordination>
  , public virtual OpenDDS::DCPS::ValueDispatcher_T<flightCoordination>
{
public:
  typedef flightCoordinationTypeSupport TypeSupportType;
  typedef flightCoordinationTypeSupport::_var_type _var_type;
  typedef flightCoordinationTypeSupport::_ptr_type _ptr_type;

  flightCoordinationTypeSupportImpl() {}
  virtual ~flightCoordinationTypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_SAFETY_PROFILE
  flightCoordination* create_sample(::DDS::DynamicData_ptr src);
#endif
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType() const;
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */

  virtual const OpenDDS::XTypes::TypeIdentifier& getMinimalTypeIdentifier() const;
  virtual const OpenDDS::XTypes::TypeMap& getMinimalTypeMap() const;

  virtual const OpenDDS::XTypes::TypeIdentifier& getCompleteTypeIdentifier() const;
  virtual const OpenDDS::XTypes::TypeMap& getCompleteTypeMap() const;

  ::DDS::ReturnCode_t encode_to_string(const flightCoordination& in, CORBA::String_out out, OpenDDS::DCPS::RepresentationFormat* format);
  ::DDS::ReturnCode_t encode_to_bytes(const flightCoordination& in, ::DDS::OctetSeq_out out, OpenDDS::DCPS::RepresentationFormat* format);
  ::DDS::ReturnCode_t decode_from_string(const char* in, flightCoordination_out out, OpenDDS::DCPS::RepresentationFormat* format);
  ::DDS::ReturnCode_t decode_from_bytes(const ::DDS::OctetSeq& in, flightCoordination_out out, OpenDDS::DCPS::RepresentationFormat* format);

  static flightCoordinationTypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};

}
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

class MetaStruct;

template<typename T>
const MetaStruct& getMetaStruct();

template<>
UATM_Export
const MetaStruct& getMetaStruct< ::UATM::flightCoordination>();
UATM_Export
bool gen_skip_over(Serializer& ser,  ::UATM::flightCoordination*);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif // ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace XTypes {

#ifndef OPENDDS_SAFETY_PROFILE
template <>
UATM_Export DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::flightCoordination,  ::UATM::flightCoordination>(DDS::DynamicType_ptr type, const  ::UATM::flightCoordination& value);

template <>
UATM_Export DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::flightCoordination,  ::UATM::flightCoordination>(DDS::DynamicType_ptr type,  ::UATM::flightCoordination& value);

template <>
UATM_Export const  ::UATM::flightCoordination* get_dynamic_data_adapter_value< ::UATM::flightCoordination,  ::UATM::flightCoordination>(DDS::DynamicData_ptr dd);

#endif // ifndef OPENDDS_SAFETY_PROFILE

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End STRUCT: flightCoordination */

/* End MODULE: UATM */


/* Begin MODULE: UATM */



/* Begin STRUCT: flightAuthorizationRequest */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

struct UATM_flightAuthorizationRequest_xtag {};
template<> UATM_Export
const XTypes::TypeIdentifier& getMinimalTypeIdentifier<UATM_flightAuthorizationRequest_xtag>();

template<> UATM_Export
const XTypes::TypeMap& getMinimalTypeMap<UATM_flightAuthorizationRequest_xtag>();

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

UATM_Export
bool vread(OpenDDS::DCPS::ValueReader& value_reader,  ::UATM::flightAuthorizationRequest& value);

UATM_Export
bool vread(OpenDDS::DCPS::ValueReader& value_reader, const NestedKeyOnly< ::UATM::flightAuthorizationRequest>& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

UATM_Export
bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const  ::UATM::flightAuthorizationRequest& value);

UATM_Export
bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const NestedKeyOnly<const  ::UATM::flightAuthorizationRequest>& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> UATM_Export
void set_default( ::UATM::flightAuthorizationRequest& stru);

UATM_Export
void serialized_size(const Encoding& encoding, size_t& size, const ::UATM::flightAuthorizationRequest& stru);

UATM_Export
bool operator<<(Serializer& strm, const ::UATM::flightAuthorizationRequest& stru);

UATM_Export
bool operator>>(Serializer& strm,  ::UATM::flightAuthorizationRequest& stru);

UATM_Export
void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const ::UATM::flightAuthorizationRequest>& stru);

UATM_Export
bool operator<<(Serializer& strm, const NestedKeyOnly<const ::UATM::flightAuthorizationRequest>& stru);

UATM_Export
bool operator>>(Serializer& strm, const NestedKeyOnly< ::UATM::flightAuthorizationRequest>& stru);

template <>
struct MarshalTraits< ::UATM::flightAuthorizationRequest> {
  static void representations_allowed_by_type(DDS::DataRepresentationIdSeq& seq)
  {
    seq.length(4);
    seq[0] = DDS::XCDR_DATA_REPRESENTATION;
    seq[1] = DDS::XCDR2_DATA_REPRESENTATION;
    seq[2] = DDS::XML_DATA_REPRESENTATION;
    seq[3] = OpenDDS::DCPS::UNALIGNED_CDR_DATA_REPRESENTATION;
  }

  static SerializedSizeBound serialized_size_bound(const Encoding& encoding)
  {
    switch (encoding.kind()) {
    case Encoding::KIND_XCDR1:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR2:
      return SerializedSizeBound();
    case Encoding::KIND_UNALIGNED_CDR:
      return SerializedSizeBound(38);
    default:
      OPENDDS_ASSERT(false);
      return SerializedSizeBound();
    }
  }

  static SerializedSizeBound key_only_serialized_size_bound(const Encoding& encoding)
  {
    switch (encoding.kind()) {
    case Encoding::KIND_XCDR1:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR2:
      return SerializedSizeBound();
    case Encoding::KIND_UNALIGNED_CDR:
      return SerializedSizeBound(4);
    default:
      OPENDDS_ASSERT(false);
      return SerializedSizeBound();
    }
  }

  static bool to_message_block(ACE_Message_Block&, const  ::UATM::flightAuthorizationRequest&) { return false; }
  static bool from_message_block( ::UATM::flightAuthorizationRequest&, const ACE_Message_Block&) { return false; }
  static Extensibility extensibility() { return APPENDABLE; }
  static Extensibility max_extensibility_level() { return APPENDABLE; }
};
UATM_Export
void serialized_size(const Encoding& encoding, size_t& size, const KeyOnly<const  ::UATM::flightAuthorizationRequest> stru);

UATM_Export
bool operator<<(Serializer& strm, KeyOnly<const  ::UATM::flightAuthorizationRequest> stru);

UATM_Export
bool operator>>(Serializer& strm, KeyOnly< ::UATM::flightAuthorizationRequest> stru);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace UATM {
/// This structure supports use of std::map with one or more keys.
struct UATM_Export flightAuthorizationRequest_OpenDDS_KeyLessThan {
  bool operator()(const  ::UATM::flightAuthorizationRequest& v1, const  ::UATM::flightAuthorizationRequest& v2) const
  {
    using ::operator<; // TAO::String_Manager's operator< is in global NS
    if (v1.auth_request_id < v2.auth_request_id) return true;
    if (v2.auth_request_id < v1.auth_request_id) return false;
    return false;
  }
};
}

namespace UATM {
class flightAuthorizationRequestTypeSupportImpl;
}
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace DCPS {
template <>
struct DDSTraits< ::UATM::flightAuthorizationRequest> {
  typedef  ::UATM::flightAuthorizationRequest MessageType;
  typedef  ::UATM::flightAuthorizationRequestSeq MessageSequenceType;
  typedef  ::UATM::flightAuthorizationRequestSeq::PrivateMemberAccess MessageSequenceAdapterType;
  typedef  ::UATM::flightAuthorizationRequestTypeSupport TypeSupportType;
  typedef  ::UATM::flightAuthorizationRequestTypeSupportImpl TypeSupportImplType;
  typedef  ::UATM::flightAuthorizationRequestDataWriter DataWriterType;
  typedef  ::UATM::flightAuthorizationRequestDataReader DataReaderType;
  typedef  ::UATM::flightAuthorizationRequest_OpenDDS_KeyLessThan LessThanType;
  typedef OpenDDS::DCPS::KeyOnly<const  ::UATM::flightAuthorizationRequest> KeyOnlyType;
  typedef OpenDDS::DCPS::UATM_flightAuthorizationRequest_xtag XtagType;

  static const char* type_name() { return "UATM::flightAuthorizationRequest"; }
  static size_t key_count() { return 1; }
  static bool is_key(const char*);
};
} // namespace DCPS
} // namespace OpenDDS
OPENDDS_END_VERSIONED_NAMESPACE_DECL

namespace UATM {
class UATM_Export flightAuthorizationRequestTypeSupportImpl
  : public virtual OpenDDS::DCPS::TypeSupportImpl_T<flightAuthorizationRequest>
  , public virtual OpenDDS::DCPS::ValueDispatcher_T<flightAuthorizationRequest>
{
public:
  typedef flightAuthorizationRequestTypeSupport TypeSupportType;
  typedef flightAuthorizationRequestTypeSupport::_var_type _var_type;
  typedef flightAuthorizationRequestTypeSupport::_ptr_type _ptr_type;

  flightAuthorizationRequestTypeSupportImpl() {}
  virtual ~flightAuthorizationRequestTypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_SAFETY_PROFILE
  flightAuthorizationRequest* create_sample(::DDS::DynamicData_ptr src);
#endif
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType() const;
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */

  virtual const OpenDDS::XTypes::TypeIdentifier& getMinimalTypeIdentifier() const;
  virtual const OpenDDS::XTypes::TypeMap& getMinimalTypeMap() const;

  virtual const OpenDDS::XTypes::TypeIdentifier& getCompleteTypeIdentifier() const;
  virtual const OpenDDS::XTypes::TypeMap& getCompleteTypeMap() const;

  ::DDS::ReturnCode_t encode_to_string(const flightAuthorizationRequest& in, CORBA::String_out out, OpenDDS::DCPS::RepresentationFormat* format);
  ::DDS::ReturnCode_t encode_to_bytes(const flightAuthorizationRequest& in, ::DDS::OctetSeq_out out, OpenDDS::DCPS::RepresentationFormat* format);
  ::DDS::ReturnCode_t decode_from_string(const char* in, flightAuthorizationRequest_out out, OpenDDS::DCPS::RepresentationFormat* format);
  ::DDS::ReturnCode_t decode_from_bytes(const ::DDS::OctetSeq& in, flightAuthorizationRequest_out out, OpenDDS::DCPS::RepresentationFormat* format);

  static flightAuthorizationRequestTypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};

}
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
UATM_Export
const MetaStruct& getMetaStruct< ::UATM::flightAuthorizationRequest>();
UATM_Export
bool gen_skip_over(Serializer& ser,  ::UATM::flightAuthorizationRequest*);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif // ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace XTypes {

#ifndef OPENDDS_SAFETY_PROFILE
template <>
UATM_Export DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::flightAuthorizationRequest,  ::UATM::flightAuthorizationRequest>(DDS::DynamicType_ptr type, const  ::UATM::flightAuthorizationRequest& value);

template <>
UATM_Export DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::flightAuthorizationRequest,  ::UATM::flightAuthorizationRequest>(DDS::DynamicType_ptr type,  ::UATM::flightAuthorizationRequest& value);

template <>
UATM_Export const  ::UATM::flightAuthorizationRequest* get_dynamic_data_adapter_value< ::UATM::flightAuthorizationRequest,  ::UATM::flightAuthorizationRequest>(DDS::DynamicData_ptr dd);

#endif // ifndef OPENDDS_SAFETY_PROFILE

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End STRUCT: flightAuthorizationRequest */

/* End MODULE: UATM */


/* Begin MODULE: UATM */



/* Begin STRUCT: flightRequestInfo */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

struct UATM_flightRequestInfo_xtag {};
template<> UATM_Export
const XTypes::TypeIdentifier& getMinimalTypeIdentifier<UATM_flightRequestInfo_xtag>();

template<> UATM_Export
const XTypes::TypeMap& getMinimalTypeMap<UATM_flightRequestInfo_xtag>();

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

UATM_Export
bool vread(OpenDDS::DCPS::ValueReader& value_reader,  ::UATM::flightRequestInfo& value);

UATM_Export
bool vread(OpenDDS::DCPS::ValueReader& value_reader, const NestedKeyOnly< ::UATM::flightRequestInfo>& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

UATM_Export
bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const  ::UATM::flightRequestInfo& value);

UATM_Export
bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const NestedKeyOnly<const  ::UATM::flightRequestInfo>& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> UATM_Export
void set_default( ::UATM::flightRequestInfo& stru);

UATM_Export
void serialized_size(const Encoding& encoding, size_t& size, const ::UATM::flightRequestInfo& stru);

UATM_Export
bool operator<<(Serializer& strm, const ::UATM::flightRequestInfo& stru);

UATM_Export
bool operator>>(Serializer& strm,  ::UATM::flightRequestInfo& stru);

UATM_Export
void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const ::UATM::flightRequestInfo>& stru);

UATM_Export
bool operator<<(Serializer& strm, const NestedKeyOnly<const ::UATM::flightRequestInfo>& stru);

UATM_Export
bool operator>>(Serializer& strm, const NestedKeyOnly< ::UATM::flightRequestInfo>& stru);

template <>
struct MarshalTraits< ::UATM::flightRequestInfo> {
  static void representations_allowed_by_type(DDS::DataRepresentationIdSeq& seq)
  {
    seq.length(4);
    seq[0] = DDS::XCDR_DATA_REPRESENTATION;
    seq[1] = DDS::XCDR2_DATA_REPRESENTATION;
    seq[2] = DDS::XML_DATA_REPRESENTATION;
    seq[3] = OpenDDS::DCPS::UNALIGNED_CDR_DATA_REPRESENTATION;
  }

  static SerializedSizeBound serialized_size_bound(const Encoding& encoding)
  {
    switch (encoding.kind()) {
    case Encoding::KIND_XCDR1:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR2:
      return SerializedSizeBound();
    case Encoding::KIND_UNALIGNED_CDR:
      return SerializedSizeBound(42);
    default:
      OPENDDS_ASSERT(false);
      return SerializedSizeBound();
    }
  }

  static SerializedSizeBound key_only_serialized_size_bound(const Encoding& encoding)
  {
    switch (encoding.kind()) {
    case Encoding::KIND_XCDR1:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR2:
      return SerializedSizeBound();
    case Encoding::KIND_UNALIGNED_CDR:
      return SerializedSizeBound(0);
    default:
      OPENDDS_ASSERT(false);
      return SerializedSizeBound();
    }
  }

  static bool to_message_block(ACE_Message_Block&, const  ::UATM::flightRequestInfo&) { return false; }
  static bool from_message_block( ::UATM::flightRequestInfo&, const ACE_Message_Block&) { return false; }
  static Extensibility extensibility() { return APPENDABLE; }
  static Extensibility max_extensibility_level() { return APPENDABLE; }
};
UATM_Export
void serialized_size(const Encoding& encoding, size_t& size, const KeyOnly<const  ::UATM::flightRequestInfo> stru);

UATM_Export
bool operator<<(Serializer& strm, KeyOnly<const  ::UATM::flightRequestInfo> stru);

UATM_Export
bool operator>>(Serializer& strm, KeyOnly< ::UATM::flightRequestInfo> stru);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace UATM {
/// This structure supports use of std::map with one or more keys.
struct UATM_Export flightRequestInfo_OpenDDS_KeyLessThan {
  bool operator()(const  ::UATM::flightRequestInfo&, const  ::UATM::flightRequestInfo&) const
  {
    // With no keys, return false to allow use of
    // map with just one entry
    return false;
  }
};
}

namespace UATM {
class flightRequestInfoTypeSupportImpl;
}
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace DCPS {
template <>
struct DDSTraits< ::UATM::flightRequestInfo> {
  typedef  ::UATM::flightRequestInfo MessageType;
  typedef  ::UATM::flightRequestInfoSeq MessageSequenceType;
  typedef  ::UATM::flightRequestInfoSeq::PrivateMemberAccess MessageSequenceAdapterType;
  typedef  ::UATM::flightRequestInfoTypeSupport TypeSupportType;
  typedef  ::UATM::flightRequestInfoTypeSupportImpl TypeSupportImplType;
  typedef  ::UATM::flightRequestInfoDataWriter DataWriterType;
  typedef  ::UATM::flightRequestInfoDataReader DataReaderType;
  typedef  ::UATM::flightRequestInfo_OpenDDS_KeyLessThan LessThanType;
  typedef OpenDDS::DCPS::KeyOnly<const  ::UATM::flightRequestInfo> KeyOnlyType;
  typedef OpenDDS::DCPS::UATM_flightRequestInfo_xtag XtagType;

  static const char* type_name() { return "UATM::flightRequestInfo"; }
  static size_t key_count() { return 0; }
  static bool is_key(const char*);
};
} // namespace DCPS
} // namespace OpenDDS
OPENDDS_END_VERSIONED_NAMESPACE_DECL

namespace UATM {
class UATM_Export flightRequestInfoTypeSupportImpl
  : public virtual OpenDDS::DCPS::TypeSupportImpl_T<flightRequestInfo>
  , public virtual OpenDDS::DCPS::ValueDispatcher_T<flightRequestInfo>
{
public:
  typedef flightRequestInfoTypeSupport TypeSupportType;
  typedef flightRequestInfoTypeSupport::_var_type _var_type;
  typedef flightRequestInfoTypeSupport::_ptr_type _ptr_type;

  flightRequestInfoTypeSupportImpl() {}
  virtual ~flightRequestInfoTypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_SAFETY_PROFILE
  flightRequestInfo* create_sample(::DDS::DynamicData_ptr src);
#endif
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType() const;
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */

  virtual const OpenDDS::XTypes::TypeIdentifier& getMinimalTypeIdentifier() const;
  virtual const OpenDDS::XTypes::TypeMap& getMinimalTypeMap() const;

  virtual const OpenDDS::XTypes::TypeIdentifier& getCompleteTypeIdentifier() const;
  virtual const OpenDDS::XTypes::TypeMap& getCompleteTypeMap() const;

  ::DDS::ReturnCode_t encode_to_string(const flightRequestInfo& in, CORBA::String_out out, OpenDDS::DCPS::RepresentationFormat* format);
  ::DDS::ReturnCode_t encode_to_bytes(const flightRequestInfo& in, ::DDS::OctetSeq_out out, OpenDDS::DCPS::RepresentationFormat* format);
  ::DDS::ReturnCode_t decode_from_string(const char* in, flightRequestInfo_out out, OpenDDS::DCPS::RepresentationFormat* format);
  ::DDS::ReturnCode_t decode_from_bytes(const ::DDS::OctetSeq& in, flightRequestInfo_out out, OpenDDS::DCPS::RepresentationFormat* format);

  static flightRequestInfoTypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};

}
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
UATM_Export
const MetaStruct& getMetaStruct< ::UATM::flightRequestInfo>();
UATM_Export
bool gen_skip_over(Serializer& ser,  ::UATM::flightRequestInfo*);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif // ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace XTypes {

#ifndef OPENDDS_SAFETY_PROFILE
template <>
UATM_Export DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::flightRequestInfo,  ::UATM::flightRequestInfo>(DDS::DynamicType_ptr type, const  ::UATM::flightRequestInfo& value);

template <>
UATM_Export DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::flightRequestInfo,  ::UATM::flightRequestInfo>(DDS::DynamicType_ptr type,  ::UATM::flightRequestInfo& value);

template <>
UATM_Export const  ::UATM::flightRequestInfo* get_dynamic_data_adapter_value< ::UATM::flightRequestInfo,  ::UATM::flightRequestInfo>(DDS::DynamicData_ptr dd);

#endif // ifndef OPENDDS_SAFETY_PROFILE

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End STRUCT: flightRequestInfo */

/* End MODULE: UATM */
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif /* OPENDDS_IDL_GENERATED_UATMTYPESUPPORTIMPL_H_BTJ6BL */
