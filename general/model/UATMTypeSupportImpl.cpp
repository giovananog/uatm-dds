/* Generated by C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\bin\opendds_idl version 3.29.1 (ACE version 6.5.21) running on input file UATM.idl */
#include "UATMTypeSupportImpl.h"

#include <cstring>
#include <stdexcept>
#include "dds/DCPS/BuiltInTopicUtils.h"
#include "dds/DCPS/ContentFilteredTopicImpl.h"
#include "dds/DCPS/DataReaderImpl_T.h"
#include "dds/DCPS/DataWriterImpl_T.h"
#include "dds/DCPS/FilterEvaluator.h"
#include "dds/DCPS/MultiTopicDataReader_T.h"
#include "dds/DCPS/PoolAllocator.h"
#include "dds/DCPS/PublicationInstance.h"
#include "dds/DCPS/PublisherImpl.h"
#include "dds/DCPS/Qos_Helper.h"
#include "dds/DCPS/RakeData.h"
#include "dds/DCPS/RakeResults_T.h"
#include "dds/DCPS/ReceivedDataElementList.h"
#include "dds/DCPS/Registered_Data_Types.h"
#include "dds/DCPS/Service_Participant.h"
#include "dds/DCPS/SubscriberImpl.h"
#include "dds/DCPS/Util.h"
#include "dds/DCPS/XTypes/TypeObject.h"
#include "dds/DCPS/debug.h"
#include "dds/DdsDcpsDomainC.h"
#include "dds/DCPS/JsonValueReader.h"
#include "dds/DCPS/JsonValueWriter.h"

#ifdef OPENDDS_IDL_FILE_SPECIFIC
#  undef OPENDDS_IDL_FILE_SPECIFIC
#endif
#define OPENDDS_IDL_FILE_SPECIFIC(base, index) opendds_idl_generated_uatmtypesupportimpl_cpp_veor9e##_##base##index



/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: UATM */



/* Begin STRUCT-FWD: acceptableRoute */


/* End STRUCT-FWD: acceptableRoute */


/* Begin STRUCT-FWD: airspaceRestrictions */


/* End STRUCT-FWD: airspaceRestrictions */


/* Begin STRUCT-FWD: availabilityInfo */


/* End STRUCT-FWD: availabilityInfo */


/* Begin STRUCT-FWD: bookingFlightRequest */


/* End STRUCT-FWD: bookingFlightRequest */


/* Begin STRUCT-FWD: flightAuthorization */


/* End STRUCT-FWD: flightAuthorization */


/* Begin STRUCT-FWD: flightChanceRec */


/* End STRUCT-FWD: flightChanceRec */


/* Begin STRUCT-FWD: flightCoordination */


/* End STRUCT-FWD: flightCoordination */


/* Begin STRUCT-FWD: flightRequestInfo */


/* End STRUCT-FWD: flightRequestInfo */


/* Begin STRUCT-FWD: flightRoutesInfo */


/* End STRUCT-FWD: flightRoutesInfo */


/* Begin STRUCT-FWD: tolPadRequest */


/* End STRUCT-FWD: tolPadRequest */


/* Begin STRUCT-FWD: trafficFlowsInfo */


/* End STRUCT-FWD: trafficFlowsInfo */


/* Begin STRUCT-FWD: flightAuthorizationRequest */


/* End STRUCT-FWD: flightAuthorizationRequest */


/* Begin STRUCT-FWD: weatherInfo */


/* End STRUCT-FWD: weatherInfo */


/* Begin STRUCT-FWD: flightAssign */


/* End STRUCT-FWD: flightAssign */

/* End MODULE: UATM */


/* Begin MODULE: UATM */



/* Begin STRUCT: acceptableRoute */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> const XTypes::TypeIdentifier& getMinimalTypeIdentifier<UATM_acceptableRoute_xtag>()
{
  static XTypes::TypeIdentifier ti;
  ACE_GUARD_RETURN(ACE_Thread_Mutex, guard, TheServiceParticipant->get_static_xtypes_lock(), ti);
  if (ti.kind() == XTypes::TK_NONE) {
    ti = XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(160, 253, 203, 53, 192, 227, 74, 44, 97, 38, 179, 249, 152, 188));
  }
  return ti;
}

static const XTypes::TypeMap& OPENDDS_IDL_FILE_SPECIFIC(get_minimal_type_map, 0)();
template<> const XTypes::TypeMap& getMinimalTypeMap<UATM_acceptableRoute_xtag>()
{
  return OPENDDS_IDL_FILE_SPECIFIC(get_minimal_type_map, 0)();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool vread(OpenDDS::DCPS::ValueReader& value_reader,  ::UATM::acceptableRoute& value)
{
  ACE_UNUSED_ARG(value_reader);
  ACE_UNUSED_ARG(value);
  static const ListMemberHelper::Pair pairs[] = {{"ac_route_id",0},{"origin",1},{"destination",2},{"estimated_time",3},{"approved_by",4},{"timestamp",5},{"is_active",6},{0,0}};
  ListMemberHelper helper(pairs);
  if (!value_reader.begin_struct(OpenDDS::DCPS::APPENDABLE)) return false;
  XTypes::MemberId member_id;
  while (value_reader.members_remaining()) {
    if (!value_reader.begin_struct_member(member_id, helper)) return false;
    switch (member_id) {
    case 0: {
      if (!value_reader.read_int32(value.ac_route_id)) return false;
      break;
    }
    case 1: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.origin = x.c_str();
      }
      break;
    }
    case 2: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.destination = x.c_str();
      }
      break;
    }
    case 3: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.estimated_time = x.c_str();
      }
      break;
    }
    case 4: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.approved_by = x.c_str();
      }
      break;
    }
    case 5: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.timestamp = x.c_str();
      }
      break;
    }
    case 6: {
      {
         ::CORBA::Boolean bx;
        if (!value_reader.read_boolean(bx)) return false;
        value.is_active = bx;
      }
      break;
    }
    }
    if (!value_reader.end_struct_member()) return false;
  }
  if (!value_reader.end_struct()) return false;
  return true;
}

bool vread(OpenDDS::DCPS::ValueReader& value_reader, const NestedKeyOnly< ::UATM::acceptableRoute>& value)
{
  ACE_UNUSED_ARG(value_reader);
  ACE_UNUSED_ARG(value);
  static const ListMemberHelper::Pair pairs[] = {{"ac_route_id",0},{"origin",1},{"destination",2},{"estimated_time",3},{"approved_by",4},{"timestamp",5},{"is_active",6},{0,0}};
  ListMemberHelper helper(pairs);
  if (!value_reader.begin_struct(OpenDDS::DCPS::APPENDABLE)) return false;
  XTypes::MemberId member_id;
  while (value_reader.members_remaining()) {
    if (!value_reader.begin_struct_member(member_id, helper)) return false;
    switch (member_id) {
    case 0: {
      if (!value_reader.read_int32(value.value.ac_route_id)) return false;
      break;
    }
    case 1: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.value.origin = x.c_str();
      }
      break;
    }
    case 2: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.value.destination = x.c_str();
      }
      break;
    }
    case 3: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.value.estimated_time = x.c_str();
      }
      break;
    }
    case 4: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.value.approved_by = x.c_str();
      }
      break;
    }
    case 5: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.value.timestamp = x.c_str();
      }
      break;
    }
    case 6: {
      {
         ::CORBA::Boolean bx;
        if (!value_reader.read_boolean(bx)) return false;
        value.value.is_active = bx;
      }
      break;
    }
    }
    if (!value_reader.end_struct_member()) return false;
  }
  if (!value_reader.end_struct()) return false;
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const  ::UATM::acceptableRoute& value)
{
  ACE_UNUSED_ARG(value_writer);
  ACE_UNUSED_ARG(value);
  if (!value_writer.begin_struct(OpenDDS::DCPS::APPENDABLE)) {
    return false;
  }
  {
    MemberParam param(0, false, "ac_route_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.ac_route_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(1, false, "origin", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.origin)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(2, false, "destination", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.destination)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(3, false, "estimated_time", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.estimated_time)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(4, false, "approved_by", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.approved_by)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(5, false, "timestamp", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.timestamp)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(6, false, "is_active", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_boolean(value.is_active)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  return value_writer.end_struct();
}

bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const NestedKeyOnly<const  ::UATM::acceptableRoute>& value)
{
  ACE_UNUSED_ARG(value_writer);
  ACE_UNUSED_ARG(value);
  if (!value_writer.begin_struct(OpenDDS::DCPS::APPENDABLE)) {
    return false;
  }
  {
    MemberParam param(0, false, "ac_route_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.value.ac_route_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(1, false, "origin", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.value.origin)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(2, false, "destination", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.value.destination)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(3, false, "estimated_time", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.value.estimated_time)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(4, false, "approved_by", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.value.approved_by)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(5, false, "timestamp", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.value.timestamp)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(6, false, "is_active", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_boolean(value.value.is_active)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  return value_writer.end_struct();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> void set_default( ::UATM::acceptableRoute& stru)
{
  ACE_UNUSED_ARG(stru);
  stru.ac_route_id = 0;
  stru.origin = "";
  stru.destination = "";
  stru.estimated_time = "";
  stru.approved_by = "";
  stru.timestamp = "";
  stru.is_active = 0;
}

void serialized_size(const Encoding& encoding, size_t& size, const ::UATM::acceptableRoute& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
  primitive_serialized_size(encoding, size, stru.ac_route_id);
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.origin.in()) + 1;
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.destination.in()) + 1;
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.estimated_time.in()) + 1;
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.approved_by.in()) + 1;
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.timestamp.in()) + 1;
  primitive_serialized_size(encoding, size, ACE_OutputCDR::from_boolean(stru.is_active));
}

bool operator<<(Serializer& strm, const ::UATM::acceptableRoute& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
  return (strm << stru.ac_route_id)
    && (strm << ACE_OutputCDR::from_string(stru.origin.in(), 20))
    && (strm << ACE_OutputCDR::from_string(stru.destination.in(), 20))
    && (strm << ACE_OutputCDR::from_string(stru.estimated_time.in(), 20))
    && (strm << ACE_OutputCDR::from_string(stru.approved_by.in(), 20))
    && (strm << ACE_OutputCDR::from_string(stru.timestamp.in(), 20))
    && (strm << ACE_OutputCDR::from_boolean(stru.is_active));
}

bool operator>>(Serializer& strm,  ::UATM::acceptableRoute& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  bool reached_end_of_struct = false;
  ACE_UNUSED_ARG(reached_end_of_struct);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.ac_route_id = 0;
  } else {
    if (!(strm >> stru.ac_route_id)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.origin = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.origin.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.destination = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.destination.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.estimated_time = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.estimated_time.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.approved_by = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.approved_by.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.timestamp = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.timestamp.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.is_active = 0;
  } else {
    if (!(strm >> ACE_InputCDR::to_boolean(stru.is_active))) {
      return false;
    }
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const ::UATM::acceptableRoute>& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
  primitive_serialized_size(encoding, size, stru.value.ac_route_id);
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.value.origin.in()) + 1;
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.value.destination.in()) + 1;
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.value.estimated_time.in()) + 1;
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.value.approved_by.in()) + 1;
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.value.timestamp.in()) + 1;
  primitive_serialized_size(encoding, size, ACE_OutputCDR::from_boolean(stru.value.is_active));
}

bool operator<<(Serializer& strm, const NestedKeyOnly<const ::UATM::acceptableRoute>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
  return (strm << stru.value.ac_route_id)
    && (strm << ACE_OutputCDR::from_string(stru.value.origin.in(), 20))
    && (strm << ACE_OutputCDR::from_string(stru.value.destination.in(), 20))
    && (strm << ACE_OutputCDR::from_string(stru.value.estimated_time.in(), 20))
    && (strm << ACE_OutputCDR::from_string(stru.value.approved_by.in(), 20))
    && (strm << ACE_OutputCDR::from_string(stru.value.timestamp.in(), 20))
    && (strm << ACE_OutputCDR::from_boolean(stru.value.is_active));
}

bool operator>>(Serializer& strm, const NestedKeyOnly< ::UATM::acceptableRoute>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  bool reached_end_of_struct = false;
  ACE_UNUSED_ARG(reached_end_of_struct);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.ac_route_id = 0;
  } else {
    if (!(strm >> stru.value.ac_route_id)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.origin = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.value.origin.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.destination = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.value.destination.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.estimated_time = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.value.estimated_time.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.approved_by = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.value.approved_by.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.timestamp = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.value.timestamp.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.is_active = 0;
  } else {
    if (!(strm >> ACE_InputCDR::to_boolean(stru.value.is_active))) {
      return false;
    }
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

void serialized_size(const Encoding& encoding, size_t& size, const KeyOnly<const  ::UATM::acceptableRoute> stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  switch (encoding.xcdr_version()) {
  case Encoding::XCDR_VERSION_1:
    {
    primitive_serialized_size(encoding, size, stru.value.ac_route_id);
    break;
    }
  case Encoding::XCDR_VERSION_2:
    {
    primitive_serialized_size(encoding, size, stru.value.ac_route_id);
    break;
    }
  case Encoding::XCDR_VERSION_NONE:
    {
    primitive_serialized_size(encoding, size, stru.value.ac_route_id);
    break;
    }
  }
}

bool operator<<(Serializer& strm, KeyOnly<const  ::UATM::acceptableRoute> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.value.ac_route_id);
}

bool operator>>(Serializer& strm, KeyOnly< ::UATM::acceptableRoute> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.value.ac_route_id);
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace DCPS {
bool DDSTraits< ::UATM::acceptableRoute>::is_key(const char* field)
{
  ACE_UNUSED_ARG(field);
  if (!ACE_OS::strcmp(field, "ac_route_id")) {
    return true;
  }
  return false;
}
} // namespace DCPS
} // namespace OpenDDS
OPENDDS_END_VERSIONED_NAMESPACE_DECL

namespace UATM {
::DDS::DataWriter_ptr acceptableRouteTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<acceptableRoute> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}

::DDS::DataReader_ptr acceptableRouteTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<acceptableRoute> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}

#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr acceptableRouteTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<acceptableRoute> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<acceptableRoute, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */

#ifndef OPENDDS_SAFETY_PROFILE
acceptableRoute* acceptableRouteTypeSupportImpl::create_sample(::DDS::DynamicData_ptr src)
{
  acceptableRoute* value = new acceptableRoute;
  const ::DDS::ReturnCode_t rc = OpenDDS::DCPS::TypeSupportImpl_T<acceptableRoute>::create_sample_rc(*value, src);
  if (rc != ::DDS::RETCODE_OK && OpenDDS::DCPS::log_level >= OpenDDS::DCPS::LogLevel::Warning) {
    ACE_ERROR((LM_WARNING, "(%P|%t) WARNING: acceptableRouteTypeSupportImpl::create_sample: "
      "create_sample_rc failed: %C\n", OpenDDS::DCPS::retcode_to_string(rc)));
  }
  return value;
}
#endif

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& acceptableRouteTypeSupportImpl::getMetaStructForType() const
{
  return OpenDDS::DCPS::getMetaStruct<acceptableRoute>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */

namespace {
  OpenDDS::DCPS::TypeSupportInitializer<acceptableRouteTypeSupportImpl> ts_init_UATM_acceptableRoute;
}

const OpenDDS::XTypes::TypeIdentifier& acceptableRouteTypeSupportImpl::getMinimalTypeIdentifier() const
{
  return OpenDDS::DCPS::getMinimalTypeIdentifier<OpenDDS::DCPS::UATM_acceptableRoute_xtag>();
}

const OpenDDS::XTypes::TypeMap& acceptableRouteTypeSupportImpl::getMinimalTypeMap() const
{
  return OpenDDS::DCPS::getMinimalTypeMap<OpenDDS::DCPS::UATM_acceptableRoute_xtag>();
}

const OpenDDS::XTypes::TypeIdentifier& acceptableRouteTypeSupportImpl::getCompleteTypeIdentifier() const
{
  static OpenDDS::XTypes::TypeIdentifier ti;
  return ti;
}

const OpenDDS::XTypes::TypeMap& acceptableRouteTypeSupportImpl::getCompleteTypeMap() const
{
  static OpenDDS::XTypes::TypeMap tm;
  return tm;
}

::DDS::ReturnCode_t acceptableRouteTypeSupportImpl::encode_to_string(const acceptableRoute& in, CORBA::String_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
#if OPENDDS_HAS_JSON_VALUE_WRITER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    rapidjson::StringBuffer buffer;
    rapidjson::Writer<rapidjson::StringBuffer> writer(buffer);
    OpenDDS::DCPS::JsonValueWriter<rapidjson::Writer<rapidjson::StringBuffer> > jvw(writer);
    if (!vwrite(jvw, in)) {
      return ::DDS::RETCODE_ERROR;
    }
    out = buffer.GetString();
    return ::DDS::RETCODE_OK;
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  out = "";
  return ::DDS::RETCODE_UNSUPPORTED;
}

::DDS::ReturnCode_t acceptableRouteTypeSupportImpl::encode_to_bytes(const acceptableRoute& in, ::DDS::OctetSeq_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
#if OPENDDS_HAS_JSON_VALUE_WRITER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    CORBA::String_var buffer;
    const ::DDS::ReturnCode_t ret = encode_to_string(in, buffer, format);
    if (ret == ::DDS::RETCODE_OK) {
      const ::DDS::UInt32 len = static_cast< ::DDS::UInt32>(std::strlen(buffer));
      out = new ::DDS::OctetSeq(len);
      out->length(len);
      std::memcpy(out->get_buffer(), buffer, len);
      return ::DDS::RETCODE_OK;
    } else {
      out = new ::DDS::OctetSeq();
      return ret;
    }
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  out = new ::DDS::OctetSeq();
  return ::DDS::RETCODE_UNSUPPORTED;
}

::DDS::ReturnCode_t acceptableRouteTypeSupportImpl::decode_from_string(const char* in, acceptableRoute_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
  out = new acceptableRoute;
  OpenDDS::DCPS::set_default(*out);
#if OPENDDS_HAS_JSON_VALUE_READER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    rapidjson::StringStream buffer(in);
    OpenDDS::DCPS::JsonValueReader<> jvr(buffer);
    return vread(jvr, *out) ? ::DDS::RETCODE_OK : ::DDS::RETCODE_ERROR;
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  return ::DDS::RETCODE_UNSUPPORTED;
}

::DDS::ReturnCode_t acceptableRouteTypeSupportImpl::decode_from_bytes(const ::DDS::OctetSeq& in, acceptableRoute_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
#if OPENDDS_HAS_JSON_VALUE_READER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    return decode_from_string(reinterpret_cast<const char*>(in.get_buffer()), out, format);
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  out = new acceptableRoute();
  return ::DDS::RETCODE_UNSUPPORTED;
}

acceptableRouteTypeSupport::_ptr_type acceptableRouteTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl< ::UATM::acceptableRoute> : MetaStruct {
  typedef  ::UATM::acceptableRoute T;

#ifndef OPENDDS_NO_MULTI_TOPIC
  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 1; }

#endif /* OPENDDS_NO_MULTI_TOPIC */

  Value getValue(const void* stru, const char* field) const
  {
    const ::UATM::acceptableRoute& typed = *static_cast<const ::UATM::acceptableRoute*>(stru);
    ACE_UNUSED_ARG(typed);
    if (std::strcmp(field, "ac_route_id") == 0) {
      return typed.ac_route_id;
    }
    if (std::strcmp(field, "origin") == 0) {
      return typed.origin.in();
    }
    if (std::strcmp(field, "destination") == 0) {
      return typed.destination.in();
    }
    if (std::strcmp(field, "estimated_time") == 0) {
      return typed.estimated_time.in();
    }
    if (std::strcmp(field, "approved_by") == 0) {
      return typed.approved_by.in();
    }
    if (std::strcmp(field, "timestamp") == 0) {
      return typed.timestamp.in();
    }
    if (std::strcmp(field, "is_active") == 0) {
      return typed.is_active;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::acceptableRoute)");
  }

  Value getValue(Serializer& strm, const char* field, TypeSupportImpl* = 0) const
  {
    const Encoding& encoding = strm.encoding();
    ACE_UNUSED_ARG(encoding);
    size_t total_size = 0;
    if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
      if (!strm.read_delimiter(total_size)) {
        throw std::runtime_error("Unable to reader delimiter in getValue");
      }
    }
    std::string base_field = field;
    const size_t index = base_field.find('.');
    std::string subfield;
    if (index != std::string::npos) {
      subfield = base_field.substr(index + 1);
      base_field = base_field.substr(0, index);
    }
    if (base_field == "ac_route_id") {
      ACE_CDR::Long val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'ac_route_id' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'ac_route_id' could not be skipped");
      }
    }
    if (base_field == "origin") {
      TAO::String_Manager val;
      if (!(strm >> val.out())) {
        throw std::runtime_error("Field 'origin' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(strm >> len)) {
        throw std::runtime_error("String 'origin' length could not be deserialized");
      }
      if (!strm.skip(len)) {
        throw std::runtime_error("String 'origin' contents could not be skipped");
      }
    }
    if (base_field == "destination") {
      TAO::String_Manager val;
      if (!(strm >> val.out())) {
        throw std::runtime_error("Field 'destination' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(strm >> len)) {
        throw std::runtime_error("String 'destination' length could not be deserialized");
      }
      if (!strm.skip(len)) {
        throw std::runtime_error("String 'destination' contents could not be skipped");
      }
    }
    if (base_field == "estimated_time") {
      TAO::String_Manager val;
      if (!(strm >> val.out())) {
        throw std::runtime_error("Field 'estimated_time' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(strm >> len)) {
        throw std::runtime_error("String 'estimated_time' length could not be deserialized");
      }
      if (!strm.skip(len)) {
        throw std::runtime_error("String 'estimated_time' contents could not be skipped");
      }
    }
    if (base_field == "approved_by") {
      TAO::String_Manager val;
      if (!(strm >> val.out())) {
        throw std::runtime_error("Field 'approved_by' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(strm >> len)) {
        throw std::runtime_error("String 'approved_by' length could not be deserialized");
      }
      if (!strm.skip(len)) {
        throw std::runtime_error("String 'approved_by' contents could not be skipped");
      }
    }
    if (base_field == "timestamp") {
      TAO::String_Manager val;
      if (!(strm >> val.out())) {
        throw std::runtime_error("Field 'timestamp' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(strm >> len)) {
        throw std::runtime_error("String 'timestamp' length could not be deserialized");
      }
      if (!strm.skip(len)) {
        throw std::runtime_error("String 'timestamp' contents could not be skipped");
      }
    }
    if (base_field == "is_active") {
      ACE_CDR::Boolean val;
      if (!(strm >> ACE_InputCDR::to_boolean(val))) {
        throw std::runtime_error("Field 'is_active' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  1 )) {
        throw std::runtime_error("Field 'is_active' could not be skipped");
      }
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Did not find field in getValue");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "ac_route_id") == 0) {
      return make_field_cmp(&T::ac_route_id, next);
    }
    if (std::strcmp(field, "origin") == 0) {
      return make_field_cmp(&T::origin, next);
    }
    if (std::strcmp(field, "destination") == 0) {
      return make_field_cmp(&T::destination, next);
    }
    if (std::strcmp(field, "estimated_time") == 0) {
      return make_field_cmp(&T::estimated_time, next);
    }
    if (std::strcmp(field, "approved_by") == 0) {
      return make_field_cmp(&T::approved_by, next);
    }
    if (std::strcmp(field, "timestamp") == 0) {
      return make_field_cmp(&T::timestamp, next);
    }
    if (std::strcmp(field, "is_active") == 0) {
      return make_field_cmp(&T::is_active, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::acceptableRoute)");
  }

#ifndef OPENDDS_NO_MULTI_TOPIC
  const char** getFieldNames() const
  {
    static const char* names[] = {"ac_route_id", "origin", "destination", "estimated_time", "approved_by", "timestamp", "is_active", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "ac_route_id") == 0) {
      return &static_cast<const T*>(stru)->ac_route_id;
    }
    if (std::strcmp(field, "origin") == 0) {
      return &static_cast<const T*>(stru)->origin;
    }
    if (std::strcmp(field, "destination") == 0) {
      return &static_cast<const T*>(stru)->destination;
    }
    if (std::strcmp(field, "estimated_time") == 0) {
      return &static_cast<const T*>(stru)->estimated_time;
    }
    if (std::strcmp(field, "approved_by") == 0) {
      return &static_cast<const T*>(stru)->approved_by;
    }
    if (std::strcmp(field, "timestamp") == 0) {
      return &static_cast<const T*>(stru)->timestamp;
    }
    if (std::strcmp(field, "is_active") == 0) {
      return &static_cast<const T*>(stru)->is_active;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::acceptableRoute)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "ac_route_id") == 0) {
      static_cast<T*>(lhs)->ac_route_id = *static_cast<const  ::CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "origin") == 0) {
      static_cast<T*>(lhs)->origin = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "destination") == 0) {
      static_cast<T*>(lhs)->destination = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "estimated_time") == 0) {
      static_cast<T*>(lhs)->estimated_time = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "approved_by") == 0) {
      static_cast<T*>(lhs)->approved_by = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "timestamp") == 0) {
      static_cast<T*>(lhs)->timestamp = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "is_active") == 0) {
      static_cast<T*>(lhs)->is_active = *static_cast<const  ::CORBA::Boolean*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::acceptableRoute)");
  }

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "ac_route_id") == 0) {
      return static_cast<const T*>(lhs)->ac_route_id == static_cast<const T*>(rhs)->ac_route_id;
    }
    if (std::strcmp(field, "origin") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->origin.in(), static_cast<const T*>(rhs)->origin.in());
    }
    if (std::strcmp(field, "destination") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->destination.in(), static_cast<const T*>(rhs)->destination.in());
    }
    if (std::strcmp(field, "estimated_time") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->estimated_time.in(), static_cast<const T*>(rhs)->estimated_time.in());
    }
    if (std::strcmp(field, "approved_by") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->approved_by.in(), static_cast<const T*>(rhs)->approved_by.in());
    }
    if (std::strcmp(field, "timestamp") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->timestamp.in(), static_cast<const T*>(rhs)->timestamp.in());
    }
    if (std::strcmp(field, "is_active") == 0) {
      return static_cast<const T*>(lhs)->is_active == static_cast<const T*>(rhs)->is_active;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::acceptableRoute)");
  }
#endif /* OPENDDS_NO_MULTI_TOPIC */

};

template<>
const MetaStruct& getMetaStruct< ::UATM::acceptableRoute>()
{
  static MetaStructImpl< ::UATM::acceptableRoute> msi;
  return msi;
}

bool gen_skip_over(Serializer& ser,  ::UATM::acceptableRoute*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl< ::UATM::acceptableRoute>().getValue(ser, "");
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif // ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace XTypes {

#ifndef OPENDDS_SAFETY_PROFILE
#if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
template <>
class DynamicDataAdapterImpl< ::UATM::acceptableRoute,  ::UATM::acceptableRoute > : public DynamicDataAdapter_T< ::UATM::acceptableRoute> {
public:
  DynamicDataAdapterImpl(DDS::DynamicType_ptr type,  ::UATM::acceptableRoute& value)
    : DynamicDataAdapter_T< ::UATM::acceptableRoute>(type, value)
  {
  }

  DynamicDataAdapterImpl(DDS::DynamicType_ptr type, const  ::UATM::acceptableRoute& value)
    : DynamicDataAdapter_T< ::UATM::acceptableRoute>(type, value)
  {
  }

  DDS::ReturnCode_t clear_all_values()
  {
    const DDS::ReturnCode_t rc = assert_mutable("DynamicDataAdapter::clear_all_values");
    if (rc == DDS::RETCODE_OK) {
      OpenDDS::DCPS::set_default(value_);
    }
    return rc;
  }

  DDS::UInt32 get_item_count()
  {
    return 7;
  }

  bool serialized_size(const OpenDDS::DCPS::Encoding& enc, size_t& size, OpenDDS::DCPS::Sample::Extent ext) const
  {
    using namespace OpenDDS::DCPS;
    if (ext == Sample::Full) {
      DCPS::serialized_size(enc, size, value_);
    } else if (ext == Sample::NestedKeyOnly) {
      const NestedKeyOnly<const  ::UATM::acceptableRoute> nested_key_only(value_);
      DCPS::serialized_size(enc, size, nested_key_only);
    } else {
      return false; // Non-topic type
    }
    return true;
  }

  bool serialize(OpenDDS::DCPS::Serializer& ser, OpenDDS::DCPS::Sample::Extent ext) const
  {
    using namespace OpenDDS::DCPS;
    if (ext == Sample::Full) {
      return ser << value_;
    } else if (ext == Sample::NestedKeyOnly) {
      NestedKeyOnly<const  ::UATM::acceptableRoute> nested_key_only(value_);
      return ser << nested_key_only;
    } else {
      return false; // Non-topic type
    }
  }

protected:
  DDS::ReturnCode_t get_raw_value(const char* method, void* dest, DDS::TypeKind tk, DDS::MemberId id)
  {
    switch (id) {
    case 0:
      {
        return get_simple_raw_value(method, dest, tk, value_.ac_route_id, id);
      }
    case 1:
      {
        return get_s8_raw_value(method, dest, tk, value_.origin, id);
      }
    case 2:
      {
        return get_s8_raw_value(method, dest, tk, value_.destination, id);
      }
    case 3:
      {
        return get_s8_raw_value(method, dest, tk, value_.estimated_time, id);
      }
    case 4:
      {
        return get_s8_raw_value(method, dest, tk, value_.approved_by, id);
      }
    case 5:
      {
        return get_s8_raw_value(method, dest, tk, value_.timestamp, id);
      }
    case 6:
      {
        return get_simple_raw_value(method, dest, tk, value_.is_active, id);
      }
    default:
      return invalid_id(method, id);
    }
  }

  DDS::ReturnCode_t set_raw_value(const char* method, DDS::MemberId id, const void* source, DDS::TypeKind tk)
  {
    DDS::ReturnCode_t rc = assert_mutable(method);
    if (rc != DDS::RETCODE_OK) {
      return rc;
    }
    switch (id) {
    case 0:
      {
        return set_simple_raw_value(method, value_.ac_route_id, id, source, tk);
      }
    case 1:
      {
        return set_s8_raw_value(method, value_.origin.inout(), id, source, tk);
      }
    case 2:
      {
        return set_s8_raw_value(method, value_.destination.inout(), id, source, tk);
      }
    case 3:
      {
        return set_s8_raw_value(method, value_.estimated_time.inout(), id, source, tk);
      }
    case 4:
      {
        return set_s8_raw_value(method, value_.approved_by.inout(), id, source, tk);
      }
    case 5:
      {
        return set_s8_raw_value(method, value_.timestamp.inout(), id, source, tk);
      }
    case 6:
      {
        return set_simple_raw_value(method, value_.is_active, id, source, tk);
      }
    default:
      return invalid_id(method, id);
    }
  }
};

#endif // if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER

template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::acceptableRoute,  ::UATM::acceptableRoute>(DDS::DynamicType_ptr type, const  ::UATM::acceptableRoute& value)
{
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  if (type) {
    return new DynamicDataAdapterImpl< ::UATM::acceptableRoute,  ::UATM::acceptableRoute>(type, value);
  }
#  else
  ACE_UNUSED_ARG(type);
  ACE_UNUSED_ARG(value);
#  endif
  return 0;
}

template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::acceptableRoute,  ::UATM::acceptableRoute>(DDS::DynamicType_ptr type,  ::UATM::acceptableRoute& value)
{
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  if (type) {
    return new DynamicDataAdapterImpl< ::UATM::acceptableRoute,  ::UATM::acceptableRoute>(type, value);
  }
#  else
  ACE_UNUSED_ARG(type);
  ACE_UNUSED_ARG(value);
#  endif
  return 0;
}

template <>
const  ::UATM::acceptableRoute* get_dynamic_data_adapter_value< ::UATM::acceptableRoute,  ::UATM::acceptableRoute>(DDS::DynamicData_ptr dd)
{
  ACE_UNUSED_ARG(dd);
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  typedef DynamicDataAdapterImpl< ::UATM::acceptableRoute,  ::UATM::acceptableRoute> Dda;
  const Dda* const dda = dynamic_cast<Dda*>(dd);
  if (dda) {
    return &dda->wrapped();
  }
#  endif
  return 0;
}
#endif // ifndef OPENDDS_SAFETY_PROFILE

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End STRUCT: acceptableRoute */

/* End MODULE: UATM */


/* Begin MODULE: UATM */



/* Begin STRUCT: airspaceRestrictions */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> const XTypes::TypeIdentifier& getMinimalTypeIdentifier<UATM_airspaceRestrictions_xtag>()
{
  static XTypes::TypeIdentifier ti;
  ACE_GUARD_RETURN(ACE_Thread_Mutex, guard, TheServiceParticipant->get_static_xtypes_lock(), ti);
  if (ti.kind() == XTypes::TK_NONE) {
    ti = XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(1, 35, 160, 32, 170, 18, 149, 31, 139, 154, 187, 251, 106, 50));
  }
  return ti;
}

template<> const XTypes::TypeMap& getMinimalTypeMap<UATM_airspaceRestrictions_xtag>()
{
  return OPENDDS_IDL_FILE_SPECIFIC(get_minimal_type_map, 0)();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool vread(OpenDDS::DCPS::ValueReader& value_reader,  ::UATM::airspaceRestrictions& value)
{
  ACE_UNUSED_ARG(value_reader);
  ACE_UNUSED_ARG(value);
  static const ListMemberHelper::Pair pairs[] = {{"restriction_id",0},{"area",1},{"restriction_type",2},{"start_time",3},{"end_time",4},{"authority",5},{0,0}};
  ListMemberHelper helper(pairs);
  if (!value_reader.begin_struct(OpenDDS::DCPS::APPENDABLE)) return false;
  XTypes::MemberId member_id;
  while (value_reader.members_remaining()) {
    if (!value_reader.begin_struct_member(member_id, helper)) return false;
    switch (member_id) {
    case 0: {
      if (!value_reader.read_int32(value.restriction_id)) return false;
      break;
    }
    case 1: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.area = x.c_str();
      }
      break;
    }
    case 2: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.restriction_type = x.c_str();
      }
      break;
    }
    case 3: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.start_time = x.c_str();
      }
      break;
    }
    case 4: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.end_time = x.c_str();
      }
      break;
    }
    case 5: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.authority = x.c_str();
      }
      break;
    }
    }
    if (!value_reader.end_struct_member()) return false;
  }
  if (!value_reader.end_struct()) return false;
  return true;
}

bool vread(OpenDDS::DCPS::ValueReader& value_reader, const NestedKeyOnly< ::UATM::airspaceRestrictions>& value)
{
  ACE_UNUSED_ARG(value_reader);
  ACE_UNUSED_ARG(value);
  static const ListMemberHelper::Pair pairs[] = {{"restriction_id",0},{"area",1},{"restriction_type",2},{"start_time",3},{"end_time",4},{"authority",5},{0,0}};
  ListMemberHelper helper(pairs);
  if (!value_reader.begin_struct(OpenDDS::DCPS::APPENDABLE)) return false;
  XTypes::MemberId member_id;
  while (value_reader.members_remaining()) {
    if (!value_reader.begin_struct_member(member_id, helper)) return false;
    switch (member_id) {
    case 0: {
      if (!value_reader.read_int32(value.value.restriction_id)) return false;
      break;
    }
    case 1: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.value.area = x.c_str();
      }
      break;
    }
    case 2: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.value.restriction_type = x.c_str();
      }
      break;
    }
    case 3: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.value.start_time = x.c_str();
      }
      break;
    }
    case 4: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.value.end_time = x.c_str();
      }
      break;
    }
    case 5: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.value.authority = x.c_str();
      }
      break;
    }
    }
    if (!value_reader.end_struct_member()) return false;
  }
  if (!value_reader.end_struct()) return false;
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const  ::UATM::airspaceRestrictions& value)
{
  ACE_UNUSED_ARG(value_writer);
  ACE_UNUSED_ARG(value);
  if (!value_writer.begin_struct(OpenDDS::DCPS::APPENDABLE)) {
    return false;
  }
  {
    MemberParam param(0, false, "restriction_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.restriction_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(1, false, "area", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.area)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(2, false, "restriction_type", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.restriction_type)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(3, false, "start_time", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.start_time)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(4, false, "end_time", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.end_time)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(5, false, "authority", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.authority)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  return value_writer.end_struct();
}

bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const NestedKeyOnly<const  ::UATM::airspaceRestrictions>& value)
{
  ACE_UNUSED_ARG(value_writer);
  ACE_UNUSED_ARG(value);
  if (!value_writer.begin_struct(OpenDDS::DCPS::APPENDABLE)) {
    return false;
  }
  {
    MemberParam param(0, false, "restriction_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.value.restriction_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(1, false, "area", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.value.area)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(2, false, "restriction_type", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.value.restriction_type)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(3, false, "start_time", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.value.start_time)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(4, false, "end_time", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.value.end_time)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(5, false, "authority", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.value.authority)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  return value_writer.end_struct();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> void set_default( ::UATM::airspaceRestrictions& stru)
{
  ACE_UNUSED_ARG(stru);
  stru.restriction_id = 0;
  stru.area = "";
  stru.restriction_type = "";
  stru.start_time = "";
  stru.end_time = "";
  stru.authority = "";
}

void serialized_size(const Encoding& encoding, size_t& size, const ::UATM::airspaceRestrictions& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
  primitive_serialized_size(encoding, size, stru.restriction_id);
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.area.in()) + 1;
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.restriction_type.in()) + 1;
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.start_time.in()) + 1;
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.end_time.in()) + 1;
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.authority.in()) + 1;
}

bool operator<<(Serializer& strm, const ::UATM::airspaceRestrictions& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
  return (strm << stru.restriction_id)
    && (strm << ACE_OutputCDR::from_string(stru.area.in(), 20))
    && (strm << ACE_OutputCDR::from_string(stru.restriction_type.in(), 20))
    && (strm << ACE_OutputCDR::from_string(stru.start_time.in(), 20))
    && (strm << ACE_OutputCDR::from_string(stru.end_time.in(), 20))
    && (strm << ACE_OutputCDR::from_string(stru.authority.in(), 20));
}

bool operator>>(Serializer& strm,  ::UATM::airspaceRestrictions& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  bool reached_end_of_struct = false;
  ACE_UNUSED_ARG(reached_end_of_struct);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.restriction_id = 0;
  } else {
    if (!(strm >> stru.restriction_id)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.area = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.area.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.restriction_type = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.restriction_type.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.start_time = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.start_time.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.end_time = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.end_time.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.authority = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.authority.out(), 20))) {
      return false;
    }
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const ::UATM::airspaceRestrictions>& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
  primitive_serialized_size(encoding, size, stru.value.restriction_id);
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.value.area.in()) + 1;
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.value.restriction_type.in()) + 1;
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.value.start_time.in()) + 1;
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.value.end_time.in()) + 1;
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.value.authority.in()) + 1;
}

bool operator<<(Serializer& strm, const NestedKeyOnly<const ::UATM::airspaceRestrictions>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
  return (strm << stru.value.restriction_id)
    && (strm << ACE_OutputCDR::from_string(stru.value.area.in(), 20))
    && (strm << ACE_OutputCDR::from_string(stru.value.restriction_type.in(), 20))
    && (strm << ACE_OutputCDR::from_string(stru.value.start_time.in(), 20))
    && (strm << ACE_OutputCDR::from_string(stru.value.end_time.in(), 20))
    && (strm << ACE_OutputCDR::from_string(stru.value.authority.in(), 20));
}

bool operator>>(Serializer& strm, const NestedKeyOnly< ::UATM::airspaceRestrictions>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  bool reached_end_of_struct = false;
  ACE_UNUSED_ARG(reached_end_of_struct);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.restriction_id = 0;
  } else {
    if (!(strm >> stru.value.restriction_id)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.area = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.value.area.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.restriction_type = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.value.restriction_type.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.start_time = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.value.start_time.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.end_time = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.value.end_time.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.authority = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.value.authority.out(), 20))) {
      return false;
    }
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

void serialized_size(const Encoding& encoding, size_t& size, const KeyOnly<const  ::UATM::airspaceRestrictions> stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  switch (encoding.xcdr_version()) {
  case Encoding::XCDR_VERSION_1:
    {
    primitive_serialized_size(encoding, size, stru.value.restriction_id);
    break;
    }
  case Encoding::XCDR_VERSION_2:
    {
    primitive_serialized_size(encoding, size, stru.value.restriction_id);
    break;
    }
  case Encoding::XCDR_VERSION_NONE:
    {
    primitive_serialized_size(encoding, size, stru.value.restriction_id);
    break;
    }
  }
}

bool operator<<(Serializer& strm, KeyOnly<const  ::UATM::airspaceRestrictions> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.value.restriction_id);
}

bool operator>>(Serializer& strm, KeyOnly< ::UATM::airspaceRestrictions> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.value.restriction_id);
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace DCPS {
bool DDSTraits< ::UATM::airspaceRestrictions>::is_key(const char* field)
{
  ACE_UNUSED_ARG(field);
  if (!ACE_OS::strcmp(field, "restriction_id")) {
    return true;
  }
  return false;
}
} // namespace DCPS
} // namespace OpenDDS
OPENDDS_END_VERSIONED_NAMESPACE_DECL

namespace UATM {
::DDS::DataWriter_ptr airspaceRestrictionsTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<airspaceRestrictions> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}

::DDS::DataReader_ptr airspaceRestrictionsTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<airspaceRestrictions> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}

#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr airspaceRestrictionsTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<airspaceRestrictions> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<airspaceRestrictions, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */

#ifndef OPENDDS_SAFETY_PROFILE
airspaceRestrictions* airspaceRestrictionsTypeSupportImpl::create_sample(::DDS::DynamicData_ptr src)
{
  airspaceRestrictions* value = new airspaceRestrictions;
  const ::DDS::ReturnCode_t rc = OpenDDS::DCPS::TypeSupportImpl_T<airspaceRestrictions>::create_sample_rc(*value, src);
  if (rc != ::DDS::RETCODE_OK && OpenDDS::DCPS::log_level >= OpenDDS::DCPS::LogLevel::Warning) {
    ACE_ERROR((LM_WARNING, "(%P|%t) WARNING: airspaceRestrictionsTypeSupportImpl::create_sample: "
      "create_sample_rc failed: %C\n", OpenDDS::DCPS::retcode_to_string(rc)));
  }
  return value;
}
#endif

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& airspaceRestrictionsTypeSupportImpl::getMetaStructForType() const
{
  return OpenDDS::DCPS::getMetaStruct<airspaceRestrictions>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */

namespace {
  OpenDDS::DCPS::TypeSupportInitializer<airspaceRestrictionsTypeSupportImpl> ts_init_UATM_airspaceRestrictions;
}

const OpenDDS::XTypes::TypeIdentifier& airspaceRestrictionsTypeSupportImpl::getMinimalTypeIdentifier() const
{
  return OpenDDS::DCPS::getMinimalTypeIdentifier<OpenDDS::DCPS::UATM_airspaceRestrictions_xtag>();
}

const OpenDDS::XTypes::TypeMap& airspaceRestrictionsTypeSupportImpl::getMinimalTypeMap() const
{
  return OpenDDS::DCPS::getMinimalTypeMap<OpenDDS::DCPS::UATM_airspaceRestrictions_xtag>();
}

const OpenDDS::XTypes::TypeIdentifier& airspaceRestrictionsTypeSupportImpl::getCompleteTypeIdentifier() const
{
  static OpenDDS::XTypes::TypeIdentifier ti;
  return ti;
}

const OpenDDS::XTypes::TypeMap& airspaceRestrictionsTypeSupportImpl::getCompleteTypeMap() const
{
  static OpenDDS::XTypes::TypeMap tm;
  return tm;
}

::DDS::ReturnCode_t airspaceRestrictionsTypeSupportImpl::encode_to_string(const airspaceRestrictions& in, CORBA::String_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
#if OPENDDS_HAS_JSON_VALUE_WRITER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    rapidjson::StringBuffer buffer;
    rapidjson::Writer<rapidjson::StringBuffer> writer(buffer);
    OpenDDS::DCPS::JsonValueWriter<rapidjson::Writer<rapidjson::StringBuffer> > jvw(writer);
    if (!vwrite(jvw, in)) {
      return ::DDS::RETCODE_ERROR;
    }
    out = buffer.GetString();
    return ::DDS::RETCODE_OK;
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  out = "";
  return ::DDS::RETCODE_UNSUPPORTED;
}

::DDS::ReturnCode_t airspaceRestrictionsTypeSupportImpl::encode_to_bytes(const airspaceRestrictions& in, ::DDS::OctetSeq_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
#if OPENDDS_HAS_JSON_VALUE_WRITER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    CORBA::String_var buffer;
    const ::DDS::ReturnCode_t ret = encode_to_string(in, buffer, format);
    if (ret == ::DDS::RETCODE_OK) {
      const ::DDS::UInt32 len = static_cast< ::DDS::UInt32>(std::strlen(buffer));
      out = new ::DDS::OctetSeq(len);
      out->length(len);
      std::memcpy(out->get_buffer(), buffer, len);
      return ::DDS::RETCODE_OK;
    } else {
      out = new ::DDS::OctetSeq();
      return ret;
    }
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  out = new ::DDS::OctetSeq();
  return ::DDS::RETCODE_UNSUPPORTED;
}

::DDS::ReturnCode_t airspaceRestrictionsTypeSupportImpl::decode_from_string(const char* in, airspaceRestrictions_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
  out = new airspaceRestrictions;
  OpenDDS::DCPS::set_default(*out);
#if OPENDDS_HAS_JSON_VALUE_READER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    rapidjson::StringStream buffer(in);
    OpenDDS::DCPS::JsonValueReader<> jvr(buffer);
    return vread(jvr, *out) ? ::DDS::RETCODE_OK : ::DDS::RETCODE_ERROR;
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  return ::DDS::RETCODE_UNSUPPORTED;
}

::DDS::ReturnCode_t airspaceRestrictionsTypeSupportImpl::decode_from_bytes(const ::DDS::OctetSeq& in, airspaceRestrictions_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
#if OPENDDS_HAS_JSON_VALUE_READER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    return decode_from_string(reinterpret_cast<const char*>(in.get_buffer()), out, format);
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  out = new airspaceRestrictions();
  return ::DDS::RETCODE_UNSUPPORTED;
}

airspaceRestrictionsTypeSupport::_ptr_type airspaceRestrictionsTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl< ::UATM::airspaceRestrictions> : MetaStruct {
  typedef  ::UATM::airspaceRestrictions T;

#ifndef OPENDDS_NO_MULTI_TOPIC
  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 1; }

#endif /* OPENDDS_NO_MULTI_TOPIC */

  Value getValue(const void* stru, const char* field) const
  {
    const ::UATM::airspaceRestrictions& typed = *static_cast<const ::UATM::airspaceRestrictions*>(stru);
    ACE_UNUSED_ARG(typed);
    if (std::strcmp(field, "restriction_id") == 0) {
      return typed.restriction_id;
    }
    if (std::strcmp(field, "area") == 0) {
      return typed.area.in();
    }
    if (std::strcmp(field, "restriction_type") == 0) {
      return typed.restriction_type.in();
    }
    if (std::strcmp(field, "start_time") == 0) {
      return typed.start_time.in();
    }
    if (std::strcmp(field, "end_time") == 0) {
      return typed.end_time.in();
    }
    if (std::strcmp(field, "authority") == 0) {
      return typed.authority.in();
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::airspaceRestrictions)");
  }

  Value getValue(Serializer& strm, const char* field, TypeSupportImpl* = 0) const
  {
    const Encoding& encoding = strm.encoding();
    ACE_UNUSED_ARG(encoding);
    size_t total_size = 0;
    if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
      if (!strm.read_delimiter(total_size)) {
        throw std::runtime_error("Unable to reader delimiter in getValue");
      }
    }
    std::string base_field = field;
    const size_t index = base_field.find('.');
    std::string subfield;
    if (index != std::string::npos) {
      subfield = base_field.substr(index + 1);
      base_field = base_field.substr(0, index);
    }
    if (base_field == "restriction_id") {
      ACE_CDR::Long val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'restriction_id' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'restriction_id' could not be skipped");
      }
    }
    if (base_field == "area") {
      TAO::String_Manager val;
      if (!(strm >> val.out())) {
        throw std::runtime_error("Field 'area' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(strm >> len)) {
        throw std::runtime_error("String 'area' length could not be deserialized");
      }
      if (!strm.skip(len)) {
        throw std::runtime_error("String 'area' contents could not be skipped");
      }
    }
    if (base_field == "restriction_type") {
      TAO::String_Manager val;
      if (!(strm >> val.out())) {
        throw std::runtime_error("Field 'restriction_type' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(strm >> len)) {
        throw std::runtime_error("String 'restriction_type' length could not be deserialized");
      }
      if (!strm.skip(len)) {
        throw std::runtime_error("String 'restriction_type' contents could not be skipped");
      }
    }
    if (base_field == "start_time") {
      TAO::String_Manager val;
      if (!(strm >> val.out())) {
        throw std::runtime_error("Field 'start_time' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(strm >> len)) {
        throw std::runtime_error("String 'start_time' length could not be deserialized");
      }
      if (!strm.skip(len)) {
        throw std::runtime_error("String 'start_time' contents could not be skipped");
      }
    }
    if (base_field == "end_time") {
      TAO::String_Manager val;
      if (!(strm >> val.out())) {
        throw std::runtime_error("Field 'end_time' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(strm >> len)) {
        throw std::runtime_error("String 'end_time' length could not be deserialized");
      }
      if (!strm.skip(len)) {
        throw std::runtime_error("String 'end_time' contents could not be skipped");
      }
    }
    if (base_field == "authority") {
      TAO::String_Manager val;
      if (!(strm >> val.out())) {
        throw std::runtime_error("Field 'authority' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(strm >> len)) {
        throw std::runtime_error("String 'authority' length could not be deserialized");
      }
      if (!strm.skip(len)) {
        throw std::runtime_error("String 'authority' contents could not be skipped");
      }
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Did not find field in getValue");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "restriction_id") == 0) {
      return make_field_cmp(&T::restriction_id, next);
    }
    if (std::strcmp(field, "area") == 0) {
      return make_field_cmp(&T::area, next);
    }
    if (std::strcmp(field, "restriction_type") == 0) {
      return make_field_cmp(&T::restriction_type, next);
    }
    if (std::strcmp(field, "start_time") == 0) {
      return make_field_cmp(&T::start_time, next);
    }
    if (std::strcmp(field, "end_time") == 0) {
      return make_field_cmp(&T::end_time, next);
    }
    if (std::strcmp(field, "authority") == 0) {
      return make_field_cmp(&T::authority, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::airspaceRestrictions)");
  }

#ifndef OPENDDS_NO_MULTI_TOPIC
  const char** getFieldNames() const
  {
    static const char* names[] = {"restriction_id", "area", "restriction_type", "start_time", "end_time", "authority", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "restriction_id") == 0) {
      return &static_cast<const T*>(stru)->restriction_id;
    }
    if (std::strcmp(field, "area") == 0) {
      return &static_cast<const T*>(stru)->area;
    }
    if (std::strcmp(field, "restriction_type") == 0) {
      return &static_cast<const T*>(stru)->restriction_type;
    }
    if (std::strcmp(field, "start_time") == 0) {
      return &static_cast<const T*>(stru)->start_time;
    }
    if (std::strcmp(field, "end_time") == 0) {
      return &static_cast<const T*>(stru)->end_time;
    }
    if (std::strcmp(field, "authority") == 0) {
      return &static_cast<const T*>(stru)->authority;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::airspaceRestrictions)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "restriction_id") == 0) {
      static_cast<T*>(lhs)->restriction_id = *static_cast<const  ::CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "area") == 0) {
      static_cast<T*>(lhs)->area = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "restriction_type") == 0) {
      static_cast<T*>(lhs)->restriction_type = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "start_time") == 0) {
      static_cast<T*>(lhs)->start_time = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "end_time") == 0) {
      static_cast<T*>(lhs)->end_time = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "authority") == 0) {
      static_cast<T*>(lhs)->authority = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::airspaceRestrictions)");
  }

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "restriction_id") == 0) {
      return static_cast<const T*>(lhs)->restriction_id == static_cast<const T*>(rhs)->restriction_id;
    }
    if (std::strcmp(field, "area") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->area.in(), static_cast<const T*>(rhs)->area.in());
    }
    if (std::strcmp(field, "restriction_type") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->restriction_type.in(), static_cast<const T*>(rhs)->restriction_type.in());
    }
    if (std::strcmp(field, "start_time") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->start_time.in(), static_cast<const T*>(rhs)->start_time.in());
    }
    if (std::strcmp(field, "end_time") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->end_time.in(), static_cast<const T*>(rhs)->end_time.in());
    }
    if (std::strcmp(field, "authority") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->authority.in(), static_cast<const T*>(rhs)->authority.in());
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::airspaceRestrictions)");
  }
#endif /* OPENDDS_NO_MULTI_TOPIC */

};

template<>
const MetaStruct& getMetaStruct< ::UATM::airspaceRestrictions>()
{
  static MetaStructImpl< ::UATM::airspaceRestrictions> msi;
  return msi;
}

bool gen_skip_over(Serializer& ser,  ::UATM::airspaceRestrictions*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl< ::UATM::airspaceRestrictions>().getValue(ser, "");
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif // ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace XTypes {

#ifndef OPENDDS_SAFETY_PROFILE
#if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
template <>
class DynamicDataAdapterImpl< ::UATM::airspaceRestrictions,  ::UATM::airspaceRestrictions > : public DynamicDataAdapter_T< ::UATM::airspaceRestrictions> {
public:
  DynamicDataAdapterImpl(DDS::DynamicType_ptr type,  ::UATM::airspaceRestrictions& value)
    : DynamicDataAdapter_T< ::UATM::airspaceRestrictions>(type, value)
  {
  }

  DynamicDataAdapterImpl(DDS::DynamicType_ptr type, const  ::UATM::airspaceRestrictions& value)
    : DynamicDataAdapter_T< ::UATM::airspaceRestrictions>(type, value)
  {
  }

  DDS::ReturnCode_t clear_all_values()
  {
    const DDS::ReturnCode_t rc = assert_mutable("DynamicDataAdapter::clear_all_values");
    if (rc == DDS::RETCODE_OK) {
      OpenDDS::DCPS::set_default(value_);
    }
    return rc;
  }

  DDS::UInt32 get_item_count()
  {
    return 6;
  }

  bool serialized_size(const OpenDDS::DCPS::Encoding& enc, size_t& size, OpenDDS::DCPS::Sample::Extent ext) const
  {
    using namespace OpenDDS::DCPS;
    if (ext == Sample::Full) {
      DCPS::serialized_size(enc, size, value_);
    } else if (ext == Sample::NestedKeyOnly) {
      const NestedKeyOnly<const  ::UATM::airspaceRestrictions> nested_key_only(value_);
      DCPS::serialized_size(enc, size, nested_key_only);
    } else {
      return false; // Non-topic type
    }
    return true;
  }

  bool serialize(OpenDDS::DCPS::Serializer& ser, OpenDDS::DCPS::Sample::Extent ext) const
  {
    using namespace OpenDDS::DCPS;
    if (ext == Sample::Full) {
      return ser << value_;
    } else if (ext == Sample::NestedKeyOnly) {
      NestedKeyOnly<const  ::UATM::airspaceRestrictions> nested_key_only(value_);
      return ser << nested_key_only;
    } else {
      return false; // Non-topic type
    }
  }

protected:
  DDS::ReturnCode_t get_raw_value(const char* method, void* dest, DDS::TypeKind tk, DDS::MemberId id)
  {
    switch (id) {
    case 0:
      {
        return get_simple_raw_value(method, dest, tk, value_.restriction_id, id);
      }
    case 1:
      {
        return get_s8_raw_value(method, dest, tk, value_.area, id);
      }
    case 2:
      {
        return get_s8_raw_value(method, dest, tk, value_.restriction_type, id);
      }
    case 3:
      {
        return get_s8_raw_value(method, dest, tk, value_.start_time, id);
      }
    case 4:
      {
        return get_s8_raw_value(method, dest, tk, value_.end_time, id);
      }
    case 5:
      {
        return get_s8_raw_value(method, dest, tk, value_.authority, id);
      }
    default:
      return invalid_id(method, id);
    }
  }

  DDS::ReturnCode_t set_raw_value(const char* method, DDS::MemberId id, const void* source, DDS::TypeKind tk)
  {
    DDS::ReturnCode_t rc = assert_mutable(method);
    if (rc != DDS::RETCODE_OK) {
      return rc;
    }
    switch (id) {
    case 0:
      {
        return set_simple_raw_value(method, value_.restriction_id, id, source, tk);
      }
    case 1:
      {
        return set_s8_raw_value(method, value_.area.inout(), id, source, tk);
      }
    case 2:
      {
        return set_s8_raw_value(method, value_.restriction_type.inout(), id, source, tk);
      }
    case 3:
      {
        return set_s8_raw_value(method, value_.start_time.inout(), id, source, tk);
      }
    case 4:
      {
        return set_s8_raw_value(method, value_.end_time.inout(), id, source, tk);
      }
    case 5:
      {
        return set_s8_raw_value(method, value_.authority.inout(), id, source, tk);
      }
    default:
      return invalid_id(method, id);
    }
  }
};

#endif // if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER

template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::airspaceRestrictions,  ::UATM::airspaceRestrictions>(DDS::DynamicType_ptr type, const  ::UATM::airspaceRestrictions& value)
{
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  if (type) {
    return new DynamicDataAdapterImpl< ::UATM::airspaceRestrictions,  ::UATM::airspaceRestrictions>(type, value);
  }
#  else
  ACE_UNUSED_ARG(type);
  ACE_UNUSED_ARG(value);
#  endif
  return 0;
}

template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::airspaceRestrictions,  ::UATM::airspaceRestrictions>(DDS::DynamicType_ptr type,  ::UATM::airspaceRestrictions& value)
{
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  if (type) {
    return new DynamicDataAdapterImpl< ::UATM::airspaceRestrictions,  ::UATM::airspaceRestrictions>(type, value);
  }
#  else
  ACE_UNUSED_ARG(type);
  ACE_UNUSED_ARG(value);
#  endif
  return 0;
}

template <>
const  ::UATM::airspaceRestrictions* get_dynamic_data_adapter_value< ::UATM::airspaceRestrictions,  ::UATM::airspaceRestrictions>(DDS::DynamicData_ptr dd)
{
  ACE_UNUSED_ARG(dd);
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  typedef DynamicDataAdapterImpl< ::UATM::airspaceRestrictions,  ::UATM::airspaceRestrictions> Dda;
  const Dda* const dda = dynamic_cast<Dda*>(dd);
  if (dda) {
    return &dda->wrapped();
  }
#  endif
  return 0;
}
#endif // ifndef OPENDDS_SAFETY_PROFILE

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End STRUCT: airspaceRestrictions */

/* End MODULE: UATM */


/* Begin MODULE: UATM */



/* Begin STRUCT: availabilityInfo */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> const XTypes::TypeIdentifier& getMinimalTypeIdentifier<UATM_availabilityInfo_xtag>()
{
  static XTypes::TypeIdentifier ti;
  ACE_GUARD_RETURN(ACE_Thread_Mutex, guard, TheServiceParticipant->get_static_xtypes_lock(), ti);
  if (ti.kind() == XTypes::TK_NONE) {
    ti = XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(19, 168, 58, 29, 6, 237, 50, 67, 22, 43, 153, 216, 181, 78));
  }
  return ti;
}

template<> const XTypes::TypeMap& getMinimalTypeMap<UATM_availabilityInfo_xtag>()
{
  return OPENDDS_IDL_FILE_SPECIFIC(get_minimal_type_map, 0)();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool vread(OpenDDS::DCPS::ValueReader& value_reader,  ::UATM::availabilityInfo& value)
{
  ACE_UNUSED_ARG(value_reader);
  ACE_UNUSED_ARG(value);
  static const ListMemberHelper::Pair pairs[] = {{"resource_id",0},{"resource_type",1},{"status",2},{"location",3},{"availability_time",4},{0,0}};
  ListMemberHelper helper(pairs);
  if (!value_reader.begin_struct(OpenDDS::DCPS::APPENDABLE)) return false;
  XTypes::MemberId member_id;
  while (value_reader.members_remaining()) {
    if (!value_reader.begin_struct_member(member_id, helper)) return false;
    switch (member_id) {
    case 0: {
      if (!value_reader.read_int32(value.resource_id)) return false;
      break;
    }
    case 1: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.resource_type = x.c_str();
      }
      break;
    }
    case 2: {
      {
         ::CORBA::Boolean bx;
        if (!value_reader.read_boolean(bx)) return false;
        value.status = bx;
      }
      break;
    }
    case 3: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.location = x.c_str();
      }
      break;
    }
    case 4: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.availability_time = x.c_str();
      }
      break;
    }
    }
    if (!value_reader.end_struct_member()) return false;
  }
  if (!value_reader.end_struct()) return false;
  return true;
}

bool vread(OpenDDS::DCPS::ValueReader& value_reader, const NestedKeyOnly< ::UATM::availabilityInfo>& value)
{
  ACE_UNUSED_ARG(value_reader);
  ACE_UNUSED_ARG(value);
  static const ListMemberHelper::Pair pairs[] = {{"resource_id",0},{"resource_type",1},{"status",2},{"location",3},{"availability_time",4},{0,0}};
  ListMemberHelper helper(pairs);
  if (!value_reader.begin_struct(OpenDDS::DCPS::APPENDABLE)) return false;
  XTypes::MemberId member_id;
  while (value_reader.members_remaining()) {
    if (!value_reader.begin_struct_member(member_id, helper)) return false;
    switch (member_id) {
    case 0: {
      if (!value_reader.read_int32(value.value.resource_id)) return false;
      break;
    }
    case 1: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.value.resource_type = x.c_str();
      }
      break;
    }
    case 2: {
      {
         ::CORBA::Boolean bx;
        if (!value_reader.read_boolean(bx)) return false;
        value.value.status = bx;
      }
      break;
    }
    case 3: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.value.location = x.c_str();
      }
      break;
    }
    case 4: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.value.availability_time = x.c_str();
      }
      break;
    }
    }
    if (!value_reader.end_struct_member()) return false;
  }
  if (!value_reader.end_struct()) return false;
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const  ::UATM::availabilityInfo& value)
{
  ACE_UNUSED_ARG(value_writer);
  ACE_UNUSED_ARG(value);
  if (!value_writer.begin_struct(OpenDDS::DCPS::APPENDABLE)) {
    return false;
  }
  {
    MemberParam param(0, false, "resource_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.resource_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(1, false, "resource_type", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.resource_type)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(2, false, "status", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_boolean(value.status)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(3, false, "location", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.location)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(4, false, "availability_time", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.availability_time)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  return value_writer.end_struct();
}

bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const NestedKeyOnly<const  ::UATM::availabilityInfo>& value)
{
  ACE_UNUSED_ARG(value_writer);
  ACE_UNUSED_ARG(value);
  if (!value_writer.begin_struct(OpenDDS::DCPS::APPENDABLE)) {
    return false;
  }
  {
    MemberParam param(0, false, "resource_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.value.resource_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(1, false, "resource_type", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.value.resource_type)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(2, false, "status", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_boolean(value.value.status)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(3, false, "location", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.value.location)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(4, false, "availability_time", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.value.availability_time)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  return value_writer.end_struct();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> void set_default( ::UATM::availabilityInfo& stru)
{
  ACE_UNUSED_ARG(stru);
  stru.resource_id = 0;
  stru.resource_type = "";
  stru.status = 0;
  stru.location = "";
  stru.availability_time = "";
}

void serialized_size(const Encoding& encoding, size_t& size, const ::UATM::availabilityInfo& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
  primitive_serialized_size(encoding, size, stru.resource_id);
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.resource_type.in()) + 1;
  primitive_serialized_size(encoding, size, ACE_OutputCDR::from_boolean(stru.status));
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.location.in()) + 1;
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.availability_time.in()) + 1;
}

bool operator<<(Serializer& strm, const ::UATM::availabilityInfo& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
  return (strm << stru.resource_id)
    && (strm << ACE_OutputCDR::from_string(stru.resource_type.in(), 20))
    && (strm << ACE_OutputCDR::from_boolean(stru.status))
    && (strm << ACE_OutputCDR::from_string(stru.location.in(), 20))
    && (strm << ACE_OutputCDR::from_string(stru.availability_time.in(), 20));
}

bool operator>>(Serializer& strm,  ::UATM::availabilityInfo& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  bool reached_end_of_struct = false;
  ACE_UNUSED_ARG(reached_end_of_struct);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.resource_id = 0;
  } else {
    if (!(strm >> stru.resource_id)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.resource_type = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.resource_type.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.status = 0;
  } else {
    if (!(strm >> ACE_InputCDR::to_boolean(stru.status))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.location = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.location.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.availability_time = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.availability_time.out(), 20))) {
      return false;
    }
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const ::UATM::availabilityInfo>& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
  primitive_serialized_size(encoding, size, stru.value.resource_id);
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.value.resource_type.in()) + 1;
  primitive_serialized_size(encoding, size, ACE_OutputCDR::from_boolean(stru.value.status));
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.value.location.in()) + 1;
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.value.availability_time.in()) + 1;
}

bool operator<<(Serializer& strm, const NestedKeyOnly<const ::UATM::availabilityInfo>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
  return (strm << stru.value.resource_id)
    && (strm << ACE_OutputCDR::from_string(stru.value.resource_type.in(), 20))
    && (strm << ACE_OutputCDR::from_boolean(stru.value.status))
    && (strm << ACE_OutputCDR::from_string(stru.value.location.in(), 20))
    && (strm << ACE_OutputCDR::from_string(stru.value.availability_time.in(), 20));
}

bool operator>>(Serializer& strm, const NestedKeyOnly< ::UATM::availabilityInfo>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  bool reached_end_of_struct = false;
  ACE_UNUSED_ARG(reached_end_of_struct);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.resource_id = 0;
  } else {
    if (!(strm >> stru.value.resource_id)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.resource_type = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.value.resource_type.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.status = 0;
  } else {
    if (!(strm >> ACE_InputCDR::to_boolean(stru.value.status))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.location = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.value.location.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.availability_time = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.value.availability_time.out(), 20))) {
      return false;
    }
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

void serialized_size(const Encoding& encoding, size_t& size, const KeyOnly<const  ::UATM::availabilityInfo> stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  switch (encoding.xcdr_version()) {
  case Encoding::XCDR_VERSION_1:
    {
    primitive_serialized_size(encoding, size, stru.value.resource_id);
    break;
    }
  case Encoding::XCDR_VERSION_2:
    {
    primitive_serialized_size(encoding, size, stru.value.resource_id);
    break;
    }
  case Encoding::XCDR_VERSION_NONE:
    {
    primitive_serialized_size(encoding, size, stru.value.resource_id);
    break;
    }
  }
}

bool operator<<(Serializer& strm, KeyOnly<const  ::UATM::availabilityInfo> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.value.resource_id);
}

bool operator>>(Serializer& strm, KeyOnly< ::UATM::availabilityInfo> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.value.resource_id);
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace DCPS {
bool DDSTraits< ::UATM::availabilityInfo>::is_key(const char* field)
{
  ACE_UNUSED_ARG(field);
  if (!ACE_OS::strcmp(field, "resource_id")) {
    return true;
  }
  return false;
}
} // namespace DCPS
} // namespace OpenDDS
OPENDDS_END_VERSIONED_NAMESPACE_DECL

namespace UATM {
::DDS::DataWriter_ptr availabilityInfoTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<availabilityInfo> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}

::DDS::DataReader_ptr availabilityInfoTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<availabilityInfo> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}

#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr availabilityInfoTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<availabilityInfo> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<availabilityInfo, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */

#ifndef OPENDDS_SAFETY_PROFILE
availabilityInfo* availabilityInfoTypeSupportImpl::create_sample(::DDS::DynamicData_ptr src)
{
  availabilityInfo* value = new availabilityInfo;
  const ::DDS::ReturnCode_t rc = OpenDDS::DCPS::TypeSupportImpl_T<availabilityInfo>::create_sample_rc(*value, src);
  if (rc != ::DDS::RETCODE_OK && OpenDDS::DCPS::log_level >= OpenDDS::DCPS::LogLevel::Warning) {
    ACE_ERROR((LM_WARNING, "(%P|%t) WARNING: availabilityInfoTypeSupportImpl::create_sample: "
      "create_sample_rc failed: %C\n", OpenDDS::DCPS::retcode_to_string(rc)));
  }
  return value;
}
#endif

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& availabilityInfoTypeSupportImpl::getMetaStructForType() const
{
  return OpenDDS::DCPS::getMetaStruct<availabilityInfo>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */

namespace {
  OpenDDS::DCPS::TypeSupportInitializer<availabilityInfoTypeSupportImpl> ts_init_UATM_availabilityInfo;
}

const OpenDDS::XTypes::TypeIdentifier& availabilityInfoTypeSupportImpl::getMinimalTypeIdentifier() const
{
  return OpenDDS::DCPS::getMinimalTypeIdentifier<OpenDDS::DCPS::UATM_availabilityInfo_xtag>();
}

const OpenDDS::XTypes::TypeMap& availabilityInfoTypeSupportImpl::getMinimalTypeMap() const
{
  return OpenDDS::DCPS::getMinimalTypeMap<OpenDDS::DCPS::UATM_availabilityInfo_xtag>();
}

const OpenDDS::XTypes::TypeIdentifier& availabilityInfoTypeSupportImpl::getCompleteTypeIdentifier() const
{
  static OpenDDS::XTypes::TypeIdentifier ti;
  return ti;
}

const OpenDDS::XTypes::TypeMap& availabilityInfoTypeSupportImpl::getCompleteTypeMap() const
{
  static OpenDDS::XTypes::TypeMap tm;
  return tm;
}

::DDS::ReturnCode_t availabilityInfoTypeSupportImpl::encode_to_string(const availabilityInfo& in, CORBA::String_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
#if OPENDDS_HAS_JSON_VALUE_WRITER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    rapidjson::StringBuffer buffer;
    rapidjson::Writer<rapidjson::StringBuffer> writer(buffer);
    OpenDDS::DCPS::JsonValueWriter<rapidjson::Writer<rapidjson::StringBuffer> > jvw(writer);
    if (!vwrite(jvw, in)) {
      return ::DDS::RETCODE_ERROR;
    }
    out = buffer.GetString();
    return ::DDS::RETCODE_OK;
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  out = "";
  return ::DDS::RETCODE_UNSUPPORTED;
}

::DDS::ReturnCode_t availabilityInfoTypeSupportImpl::encode_to_bytes(const availabilityInfo& in, ::DDS::OctetSeq_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
#if OPENDDS_HAS_JSON_VALUE_WRITER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    CORBA::String_var buffer;
    const ::DDS::ReturnCode_t ret = encode_to_string(in, buffer, format);
    if (ret == ::DDS::RETCODE_OK) {
      const ::DDS::UInt32 len = static_cast< ::DDS::UInt32>(std::strlen(buffer));
      out = new ::DDS::OctetSeq(len);
      out->length(len);
      std::memcpy(out->get_buffer(), buffer, len);
      return ::DDS::RETCODE_OK;
    } else {
      out = new ::DDS::OctetSeq();
      return ret;
    }
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  out = new ::DDS::OctetSeq();
  return ::DDS::RETCODE_UNSUPPORTED;
}

::DDS::ReturnCode_t availabilityInfoTypeSupportImpl::decode_from_string(const char* in, availabilityInfo_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
  out = new availabilityInfo;
  OpenDDS::DCPS::set_default(*out);
#if OPENDDS_HAS_JSON_VALUE_READER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    rapidjson::StringStream buffer(in);
    OpenDDS::DCPS::JsonValueReader<> jvr(buffer);
    return vread(jvr, *out) ? ::DDS::RETCODE_OK : ::DDS::RETCODE_ERROR;
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  return ::DDS::RETCODE_UNSUPPORTED;
}

::DDS::ReturnCode_t availabilityInfoTypeSupportImpl::decode_from_bytes(const ::DDS::OctetSeq& in, availabilityInfo_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
#if OPENDDS_HAS_JSON_VALUE_READER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    return decode_from_string(reinterpret_cast<const char*>(in.get_buffer()), out, format);
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  out = new availabilityInfo();
  return ::DDS::RETCODE_UNSUPPORTED;
}

availabilityInfoTypeSupport::_ptr_type availabilityInfoTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl< ::UATM::availabilityInfo> : MetaStruct {
  typedef  ::UATM::availabilityInfo T;

#ifndef OPENDDS_NO_MULTI_TOPIC
  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 1; }

#endif /* OPENDDS_NO_MULTI_TOPIC */

  Value getValue(const void* stru, const char* field) const
  {
    const ::UATM::availabilityInfo& typed = *static_cast<const ::UATM::availabilityInfo*>(stru);
    ACE_UNUSED_ARG(typed);
    if (std::strcmp(field, "resource_id") == 0) {
      return typed.resource_id;
    }
    if (std::strcmp(field, "resource_type") == 0) {
      return typed.resource_type.in();
    }
    if (std::strcmp(field, "status") == 0) {
      return typed.status;
    }
    if (std::strcmp(field, "location") == 0) {
      return typed.location.in();
    }
    if (std::strcmp(field, "availability_time") == 0) {
      return typed.availability_time.in();
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::availabilityInfo)");
  }

  Value getValue(Serializer& strm, const char* field, TypeSupportImpl* = 0) const
  {
    const Encoding& encoding = strm.encoding();
    ACE_UNUSED_ARG(encoding);
    size_t total_size = 0;
    if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
      if (!strm.read_delimiter(total_size)) {
        throw std::runtime_error("Unable to reader delimiter in getValue");
      }
    }
    std::string base_field = field;
    const size_t index = base_field.find('.');
    std::string subfield;
    if (index != std::string::npos) {
      subfield = base_field.substr(index + 1);
      base_field = base_field.substr(0, index);
    }
    if (base_field == "resource_id") {
      ACE_CDR::Long val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'resource_id' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'resource_id' could not be skipped");
      }
    }
    if (base_field == "resource_type") {
      TAO::String_Manager val;
      if (!(strm >> val.out())) {
        throw std::runtime_error("Field 'resource_type' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(strm >> len)) {
        throw std::runtime_error("String 'resource_type' length could not be deserialized");
      }
      if (!strm.skip(len)) {
        throw std::runtime_error("String 'resource_type' contents could not be skipped");
      }
    }
    if (base_field == "status") {
      ACE_CDR::Boolean val;
      if (!(strm >> ACE_InputCDR::to_boolean(val))) {
        throw std::runtime_error("Field 'status' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  1 )) {
        throw std::runtime_error("Field 'status' could not be skipped");
      }
    }
    if (base_field == "location") {
      TAO::String_Manager val;
      if (!(strm >> val.out())) {
        throw std::runtime_error("Field 'location' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(strm >> len)) {
        throw std::runtime_error("String 'location' length could not be deserialized");
      }
      if (!strm.skip(len)) {
        throw std::runtime_error("String 'location' contents could not be skipped");
      }
    }
    if (base_field == "availability_time") {
      TAO::String_Manager val;
      if (!(strm >> val.out())) {
        throw std::runtime_error("Field 'availability_time' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(strm >> len)) {
        throw std::runtime_error("String 'availability_time' length could not be deserialized");
      }
      if (!strm.skip(len)) {
        throw std::runtime_error("String 'availability_time' contents could not be skipped");
      }
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Did not find field in getValue");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "resource_id") == 0) {
      return make_field_cmp(&T::resource_id, next);
    }
    if (std::strcmp(field, "resource_type") == 0) {
      return make_field_cmp(&T::resource_type, next);
    }
    if (std::strcmp(field, "status") == 0) {
      return make_field_cmp(&T::status, next);
    }
    if (std::strcmp(field, "location") == 0) {
      return make_field_cmp(&T::location, next);
    }
    if (std::strcmp(field, "availability_time") == 0) {
      return make_field_cmp(&T::availability_time, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::availabilityInfo)");
  }

#ifndef OPENDDS_NO_MULTI_TOPIC
  const char** getFieldNames() const
  {
    static const char* names[] = {"resource_id", "resource_type", "status", "location", "availability_time", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "resource_id") == 0) {
      return &static_cast<const T*>(stru)->resource_id;
    }
    if (std::strcmp(field, "resource_type") == 0) {
      return &static_cast<const T*>(stru)->resource_type;
    }
    if (std::strcmp(field, "status") == 0) {
      return &static_cast<const T*>(stru)->status;
    }
    if (std::strcmp(field, "location") == 0) {
      return &static_cast<const T*>(stru)->location;
    }
    if (std::strcmp(field, "availability_time") == 0) {
      return &static_cast<const T*>(stru)->availability_time;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::availabilityInfo)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "resource_id") == 0) {
      static_cast<T*>(lhs)->resource_id = *static_cast<const  ::CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "resource_type") == 0) {
      static_cast<T*>(lhs)->resource_type = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "status") == 0) {
      static_cast<T*>(lhs)->status = *static_cast<const  ::CORBA::Boolean*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "location") == 0) {
      static_cast<T*>(lhs)->location = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "availability_time") == 0) {
      static_cast<T*>(lhs)->availability_time = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::availabilityInfo)");
  }

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "resource_id") == 0) {
      return static_cast<const T*>(lhs)->resource_id == static_cast<const T*>(rhs)->resource_id;
    }
    if (std::strcmp(field, "resource_type") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->resource_type.in(), static_cast<const T*>(rhs)->resource_type.in());
    }
    if (std::strcmp(field, "status") == 0) {
      return static_cast<const T*>(lhs)->status == static_cast<const T*>(rhs)->status;
    }
    if (std::strcmp(field, "location") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->location.in(), static_cast<const T*>(rhs)->location.in());
    }
    if (std::strcmp(field, "availability_time") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->availability_time.in(), static_cast<const T*>(rhs)->availability_time.in());
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::availabilityInfo)");
  }
#endif /* OPENDDS_NO_MULTI_TOPIC */

};

template<>
const MetaStruct& getMetaStruct< ::UATM::availabilityInfo>()
{
  static MetaStructImpl< ::UATM::availabilityInfo> msi;
  return msi;
}

bool gen_skip_over(Serializer& ser,  ::UATM::availabilityInfo*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl< ::UATM::availabilityInfo>().getValue(ser, "");
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif // ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace XTypes {

#ifndef OPENDDS_SAFETY_PROFILE
#if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
template <>
class DynamicDataAdapterImpl< ::UATM::availabilityInfo,  ::UATM::availabilityInfo > : public DynamicDataAdapter_T< ::UATM::availabilityInfo> {
public:
  DynamicDataAdapterImpl(DDS::DynamicType_ptr type,  ::UATM::availabilityInfo& value)
    : DynamicDataAdapter_T< ::UATM::availabilityInfo>(type, value)
  {
  }

  DynamicDataAdapterImpl(DDS::DynamicType_ptr type, const  ::UATM::availabilityInfo& value)
    : DynamicDataAdapter_T< ::UATM::availabilityInfo>(type, value)
  {
  }

  DDS::ReturnCode_t clear_all_values()
  {
    const DDS::ReturnCode_t rc = assert_mutable("DynamicDataAdapter::clear_all_values");
    if (rc == DDS::RETCODE_OK) {
      OpenDDS::DCPS::set_default(value_);
    }
    return rc;
  }

  DDS::UInt32 get_item_count()
  {
    return 5;
  }

  bool serialized_size(const OpenDDS::DCPS::Encoding& enc, size_t& size, OpenDDS::DCPS::Sample::Extent ext) const
  {
    using namespace OpenDDS::DCPS;
    if (ext == Sample::Full) {
      DCPS::serialized_size(enc, size, value_);
    } else if (ext == Sample::NestedKeyOnly) {
      const NestedKeyOnly<const  ::UATM::availabilityInfo> nested_key_only(value_);
      DCPS::serialized_size(enc, size, nested_key_only);
    } else {
      return false; // Non-topic type
    }
    return true;
  }

  bool serialize(OpenDDS::DCPS::Serializer& ser, OpenDDS::DCPS::Sample::Extent ext) const
  {
    using namespace OpenDDS::DCPS;
    if (ext == Sample::Full) {
      return ser << value_;
    } else if (ext == Sample::NestedKeyOnly) {
      NestedKeyOnly<const  ::UATM::availabilityInfo> nested_key_only(value_);
      return ser << nested_key_only;
    } else {
      return false; // Non-topic type
    }
  }

protected:
  DDS::ReturnCode_t get_raw_value(const char* method, void* dest, DDS::TypeKind tk, DDS::MemberId id)
  {
    switch (id) {
    case 0:
      {
        return get_simple_raw_value(method, dest, tk, value_.resource_id, id);
      }
    case 1:
      {
        return get_s8_raw_value(method, dest, tk, value_.resource_type, id);
      }
    case 2:
      {
        return get_simple_raw_value(method, dest, tk, value_.status, id);
      }
    case 3:
      {
        return get_s8_raw_value(method, dest, tk, value_.location, id);
      }
    case 4:
      {
        return get_s8_raw_value(method, dest, tk, value_.availability_time, id);
      }
    default:
      return invalid_id(method, id);
    }
  }

  DDS::ReturnCode_t set_raw_value(const char* method, DDS::MemberId id, const void* source, DDS::TypeKind tk)
  {
    DDS::ReturnCode_t rc = assert_mutable(method);
    if (rc != DDS::RETCODE_OK) {
      return rc;
    }
    switch (id) {
    case 0:
      {
        return set_simple_raw_value(method, value_.resource_id, id, source, tk);
      }
    case 1:
      {
        return set_s8_raw_value(method, value_.resource_type.inout(), id, source, tk);
      }
    case 2:
      {
        return set_simple_raw_value(method, value_.status, id, source, tk);
      }
    case 3:
      {
        return set_s8_raw_value(method, value_.location.inout(), id, source, tk);
      }
    case 4:
      {
        return set_s8_raw_value(method, value_.availability_time.inout(), id, source, tk);
      }
    default:
      return invalid_id(method, id);
    }
  }
};

#endif // if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER

template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::availabilityInfo,  ::UATM::availabilityInfo>(DDS::DynamicType_ptr type, const  ::UATM::availabilityInfo& value)
{
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  if (type) {
    return new DynamicDataAdapterImpl< ::UATM::availabilityInfo,  ::UATM::availabilityInfo>(type, value);
  }
#  else
  ACE_UNUSED_ARG(type);
  ACE_UNUSED_ARG(value);
#  endif
  return 0;
}

template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::availabilityInfo,  ::UATM::availabilityInfo>(DDS::DynamicType_ptr type,  ::UATM::availabilityInfo& value)
{
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  if (type) {
    return new DynamicDataAdapterImpl< ::UATM::availabilityInfo,  ::UATM::availabilityInfo>(type, value);
  }
#  else
  ACE_UNUSED_ARG(type);
  ACE_UNUSED_ARG(value);
#  endif
  return 0;
}

template <>
const  ::UATM::availabilityInfo* get_dynamic_data_adapter_value< ::UATM::availabilityInfo,  ::UATM::availabilityInfo>(DDS::DynamicData_ptr dd)
{
  ACE_UNUSED_ARG(dd);
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  typedef DynamicDataAdapterImpl< ::UATM::availabilityInfo,  ::UATM::availabilityInfo> Dda;
  const Dda* const dda = dynamic_cast<Dda*>(dd);
  if (dda) {
    return &dda->wrapped();
  }
#  endif
  return 0;
}
#endif // ifndef OPENDDS_SAFETY_PROFILE

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End STRUCT: availabilityInfo */

/* End MODULE: UATM */


/* Begin MODULE: UATM */



/* Begin STRUCT: bookingFlightRequest */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> const XTypes::TypeIdentifier& getMinimalTypeIdentifier<UATM_bookingFlightRequest_xtag>()
{
  static XTypes::TypeIdentifier ti;
  ACE_GUARD_RETURN(ACE_Thread_Mutex, guard, TheServiceParticipant->get_static_xtypes_lock(), ti);
  if (ti.kind() == XTypes::TK_NONE) {
    ti = XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(203, 78, 209, 7, 193, 170, 16, 253, 20, 115, 164, 230, 57, 79));
  }
  return ti;
}

template<> const XTypes::TypeMap& getMinimalTypeMap<UATM_bookingFlightRequest_xtag>()
{
  return OPENDDS_IDL_FILE_SPECIFIC(get_minimal_type_map, 0)();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool vread(OpenDDS::DCPS::ValueReader& value_reader,  ::UATM::bookingFlightRequest& value)
{
  ACE_UNUSED_ARG(value_reader);
  ACE_UNUSED_ARG(value);
  static const ListMemberHelper::Pair pairs[] = {{"booking_id",0},{"customer_id",1},{"flight_id",2},{"departure_time",3},{"arrival_time",4},{"route_id",5},{"request_status",6},{0,0}};
  ListMemberHelper helper(pairs);
  if (!value_reader.begin_struct(OpenDDS::DCPS::APPENDABLE)) return false;
  XTypes::MemberId member_id;
  while (value_reader.members_remaining()) {
    if (!value_reader.begin_struct_member(member_id, helper)) return false;
    switch (member_id) {
    case 0: {
      if (!value_reader.read_int32(value.booking_id)) return false;
      break;
    }
    case 1: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.customer_id = x.c_str();
      }
      break;
    }
    case 2: {
      if (!value_reader.read_int32(value.flight_id)) return false;
      break;
    }
    case 3: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.departure_time = x.c_str();
      }
      break;
    }
    case 4: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.arrival_time = x.c_str();
      }
      break;
    }
    case 5: {
      if (!value_reader.read_int32(value.route_id)) return false;
      break;
    }
    case 6: {
      {
         ::CORBA::Boolean bx;
        if (!value_reader.read_boolean(bx)) return false;
        value.request_status = bx;
      }
      break;
    }
    }
    if (!value_reader.end_struct_member()) return false;
  }
  if (!value_reader.end_struct()) return false;
  return true;
}

bool vread(OpenDDS::DCPS::ValueReader& value_reader, const NestedKeyOnly< ::UATM::bookingFlightRequest>& value)
{
  ACE_UNUSED_ARG(value_reader);
  ACE_UNUSED_ARG(value);
  static const ListMemberHelper::Pair pairs[] = {{"booking_id",0},{"customer_id",1},{"flight_id",2},{"departure_time",3},{"arrival_time",4},{"route_id",5},{"request_status",6},{0,0}};
  ListMemberHelper helper(pairs);
  if (!value_reader.begin_struct(OpenDDS::DCPS::APPENDABLE)) return false;
  XTypes::MemberId member_id;
  while (value_reader.members_remaining()) {
    if (!value_reader.begin_struct_member(member_id, helper)) return false;
    switch (member_id) {
    case 0: {
      if (!value_reader.read_int32(value.value.booking_id)) return false;
      break;
    }
    case 1: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.value.customer_id = x.c_str();
      }
      break;
    }
    case 2: {
      if (!value_reader.read_int32(value.value.flight_id)) return false;
      break;
    }
    case 3: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.value.departure_time = x.c_str();
      }
      break;
    }
    case 4: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.value.arrival_time = x.c_str();
      }
      break;
    }
    case 5: {
      if (!value_reader.read_int32(value.value.route_id)) return false;
      break;
    }
    case 6: {
      {
         ::CORBA::Boolean bx;
        if (!value_reader.read_boolean(bx)) return false;
        value.value.request_status = bx;
      }
      break;
    }
    }
    if (!value_reader.end_struct_member()) return false;
  }
  if (!value_reader.end_struct()) return false;
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const  ::UATM::bookingFlightRequest& value)
{
  ACE_UNUSED_ARG(value_writer);
  ACE_UNUSED_ARG(value);
  if (!value_writer.begin_struct(OpenDDS::DCPS::APPENDABLE)) {
    return false;
  }
  {
    MemberParam param(0, false, "booking_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.booking_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(1, false, "customer_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.customer_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(2, false, "flight_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.flight_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(3, false, "departure_time", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.departure_time)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(4, false, "arrival_time", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.arrival_time)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(5, false, "route_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.route_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(6, false, "request_status", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_boolean(value.request_status)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  return value_writer.end_struct();
}

bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const NestedKeyOnly<const  ::UATM::bookingFlightRequest>& value)
{
  ACE_UNUSED_ARG(value_writer);
  ACE_UNUSED_ARG(value);
  if (!value_writer.begin_struct(OpenDDS::DCPS::APPENDABLE)) {
    return false;
  }
  {
    MemberParam param(0, false, "booking_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.value.booking_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(1, false, "customer_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.value.customer_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(2, false, "flight_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.value.flight_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(3, false, "departure_time", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.value.departure_time)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(4, false, "arrival_time", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.value.arrival_time)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(5, false, "route_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.value.route_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(6, false, "request_status", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_boolean(value.value.request_status)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  return value_writer.end_struct();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> void set_default( ::UATM::bookingFlightRequest& stru)
{
  ACE_UNUSED_ARG(stru);
  stru.booking_id = 0;
  stru.customer_id = "";
  stru.flight_id = 0;
  stru.departure_time = "";
  stru.arrival_time = "";
  stru.route_id = 0;
  stru.request_status = 0;
}

void serialized_size(const Encoding& encoding, size_t& size, const ::UATM::bookingFlightRequest& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
  primitive_serialized_size(encoding, size, stru.booking_id);
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.customer_id.in()) + 1;
  primitive_serialized_size(encoding, size, stru.flight_id);
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.departure_time.in()) + 1;
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.arrival_time.in()) + 1;
  primitive_serialized_size(encoding, size, stru.route_id);
  primitive_serialized_size(encoding, size, ACE_OutputCDR::from_boolean(stru.request_status));
}

bool operator<<(Serializer& strm, const ::UATM::bookingFlightRequest& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
  return (strm << stru.booking_id)
    && (strm << ACE_OutputCDR::from_string(stru.customer_id.in(), 20))
    && (strm << stru.flight_id)
    && (strm << ACE_OutputCDR::from_string(stru.departure_time.in(), 20))
    && (strm << ACE_OutputCDR::from_string(stru.arrival_time.in(), 20))
    && (strm << stru.route_id)
    && (strm << ACE_OutputCDR::from_boolean(stru.request_status));
}

bool operator>>(Serializer& strm,  ::UATM::bookingFlightRequest& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  bool reached_end_of_struct = false;
  ACE_UNUSED_ARG(reached_end_of_struct);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.booking_id = 0;
  } else {
    if (!(strm >> stru.booking_id)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.customer_id = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.customer_id.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.flight_id = 0;
  } else {
    if (!(strm >> stru.flight_id)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.departure_time = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.departure_time.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.arrival_time = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.arrival_time.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.route_id = 0;
  } else {
    if (!(strm >> stru.route_id)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.request_status = 0;
  } else {
    if (!(strm >> ACE_InputCDR::to_boolean(stru.request_status))) {
      return false;
    }
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const ::UATM::bookingFlightRequest>& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
  primitive_serialized_size(encoding, size, stru.value.booking_id);
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.value.customer_id.in()) + 1;
  primitive_serialized_size(encoding, size, stru.value.flight_id);
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.value.departure_time.in()) + 1;
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.value.arrival_time.in()) + 1;
  primitive_serialized_size(encoding, size, stru.value.route_id);
  primitive_serialized_size(encoding, size, ACE_OutputCDR::from_boolean(stru.value.request_status));
}

bool operator<<(Serializer& strm, const NestedKeyOnly<const ::UATM::bookingFlightRequest>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
  return (strm << stru.value.booking_id)
    && (strm << ACE_OutputCDR::from_string(stru.value.customer_id.in(), 20))
    && (strm << stru.value.flight_id)
    && (strm << ACE_OutputCDR::from_string(stru.value.departure_time.in(), 20))
    && (strm << ACE_OutputCDR::from_string(stru.value.arrival_time.in(), 20))
    && (strm << stru.value.route_id)
    && (strm << ACE_OutputCDR::from_boolean(stru.value.request_status));
}

bool operator>>(Serializer& strm, const NestedKeyOnly< ::UATM::bookingFlightRequest>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  bool reached_end_of_struct = false;
  ACE_UNUSED_ARG(reached_end_of_struct);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.booking_id = 0;
  } else {
    if (!(strm >> stru.value.booking_id)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.customer_id = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.value.customer_id.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.flight_id = 0;
  } else {
    if (!(strm >> stru.value.flight_id)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.departure_time = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.value.departure_time.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.arrival_time = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.value.arrival_time.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.route_id = 0;
  } else {
    if (!(strm >> stru.value.route_id)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.request_status = 0;
  } else {
    if (!(strm >> ACE_InputCDR::to_boolean(stru.value.request_status))) {
      return false;
    }
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

void serialized_size(const Encoding& encoding, size_t& size, const KeyOnly<const  ::UATM::bookingFlightRequest> stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  switch (encoding.xcdr_version()) {
  case Encoding::XCDR_VERSION_1:
    {
    primitive_serialized_size(encoding, size, stru.value.booking_id);
    break;
    }
  case Encoding::XCDR_VERSION_2:
    {
    primitive_serialized_size(encoding, size, stru.value.booking_id);
    break;
    }
  case Encoding::XCDR_VERSION_NONE:
    {
    primitive_serialized_size(encoding, size, stru.value.booking_id);
    break;
    }
  }
}

bool operator<<(Serializer& strm, KeyOnly<const  ::UATM::bookingFlightRequest> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.value.booking_id);
}

bool operator>>(Serializer& strm, KeyOnly< ::UATM::bookingFlightRequest> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.value.booking_id);
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace DCPS {
bool DDSTraits< ::UATM::bookingFlightRequest>::is_key(const char* field)
{
  ACE_UNUSED_ARG(field);
  if (!ACE_OS::strcmp(field, "booking_id")) {
    return true;
  }
  return false;
}
} // namespace DCPS
} // namespace OpenDDS
OPENDDS_END_VERSIONED_NAMESPACE_DECL

namespace UATM {
::DDS::DataWriter_ptr bookingFlightRequestTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<bookingFlightRequest> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}

::DDS::DataReader_ptr bookingFlightRequestTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<bookingFlightRequest> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}

#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr bookingFlightRequestTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<bookingFlightRequest> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<bookingFlightRequest, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */

#ifndef OPENDDS_SAFETY_PROFILE
bookingFlightRequest* bookingFlightRequestTypeSupportImpl::create_sample(::DDS::DynamicData_ptr src)
{
  bookingFlightRequest* value = new bookingFlightRequest;
  const ::DDS::ReturnCode_t rc = OpenDDS::DCPS::TypeSupportImpl_T<bookingFlightRequest>::create_sample_rc(*value, src);
  if (rc != ::DDS::RETCODE_OK && OpenDDS::DCPS::log_level >= OpenDDS::DCPS::LogLevel::Warning) {
    ACE_ERROR((LM_WARNING, "(%P|%t) WARNING: bookingFlightRequestTypeSupportImpl::create_sample: "
      "create_sample_rc failed: %C\n", OpenDDS::DCPS::retcode_to_string(rc)));
  }
  return value;
}
#endif

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& bookingFlightRequestTypeSupportImpl::getMetaStructForType() const
{
  return OpenDDS::DCPS::getMetaStruct<bookingFlightRequest>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */

namespace {
  OpenDDS::DCPS::TypeSupportInitializer<bookingFlightRequestTypeSupportImpl> ts_init_UATM_bookingFlightRequest;
}

const OpenDDS::XTypes::TypeIdentifier& bookingFlightRequestTypeSupportImpl::getMinimalTypeIdentifier() const
{
  return OpenDDS::DCPS::getMinimalTypeIdentifier<OpenDDS::DCPS::UATM_bookingFlightRequest_xtag>();
}

const OpenDDS::XTypes::TypeMap& bookingFlightRequestTypeSupportImpl::getMinimalTypeMap() const
{
  return OpenDDS::DCPS::getMinimalTypeMap<OpenDDS::DCPS::UATM_bookingFlightRequest_xtag>();
}

const OpenDDS::XTypes::TypeIdentifier& bookingFlightRequestTypeSupportImpl::getCompleteTypeIdentifier() const
{
  static OpenDDS::XTypes::TypeIdentifier ti;
  return ti;
}

const OpenDDS::XTypes::TypeMap& bookingFlightRequestTypeSupportImpl::getCompleteTypeMap() const
{
  static OpenDDS::XTypes::TypeMap tm;
  return tm;
}

::DDS::ReturnCode_t bookingFlightRequestTypeSupportImpl::encode_to_string(const bookingFlightRequest& in, CORBA::String_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
#if OPENDDS_HAS_JSON_VALUE_WRITER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    rapidjson::StringBuffer buffer;
    rapidjson::Writer<rapidjson::StringBuffer> writer(buffer);
    OpenDDS::DCPS::JsonValueWriter<rapidjson::Writer<rapidjson::StringBuffer> > jvw(writer);
    if (!vwrite(jvw, in)) {
      return ::DDS::RETCODE_ERROR;
    }
    out = buffer.GetString();
    return ::DDS::RETCODE_OK;
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  out = "";
  return ::DDS::RETCODE_UNSUPPORTED;
}

::DDS::ReturnCode_t bookingFlightRequestTypeSupportImpl::encode_to_bytes(const bookingFlightRequest& in, ::DDS::OctetSeq_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
#if OPENDDS_HAS_JSON_VALUE_WRITER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    CORBA::String_var buffer;
    const ::DDS::ReturnCode_t ret = encode_to_string(in, buffer, format);
    if (ret == ::DDS::RETCODE_OK) {
      const ::DDS::UInt32 len = static_cast< ::DDS::UInt32>(std::strlen(buffer));
      out = new ::DDS::OctetSeq(len);
      out->length(len);
      std::memcpy(out->get_buffer(), buffer, len);
      return ::DDS::RETCODE_OK;
    } else {
      out = new ::DDS::OctetSeq();
      return ret;
    }
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  out = new ::DDS::OctetSeq();
  return ::DDS::RETCODE_UNSUPPORTED;
}

::DDS::ReturnCode_t bookingFlightRequestTypeSupportImpl::decode_from_string(const char* in, bookingFlightRequest_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
  out = new bookingFlightRequest;
  OpenDDS::DCPS::set_default(*out);
#if OPENDDS_HAS_JSON_VALUE_READER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    rapidjson::StringStream buffer(in);
    OpenDDS::DCPS::JsonValueReader<> jvr(buffer);
    return vread(jvr, *out) ? ::DDS::RETCODE_OK : ::DDS::RETCODE_ERROR;
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  return ::DDS::RETCODE_UNSUPPORTED;
}

::DDS::ReturnCode_t bookingFlightRequestTypeSupportImpl::decode_from_bytes(const ::DDS::OctetSeq& in, bookingFlightRequest_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
#if OPENDDS_HAS_JSON_VALUE_READER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    return decode_from_string(reinterpret_cast<const char*>(in.get_buffer()), out, format);
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  out = new bookingFlightRequest();
  return ::DDS::RETCODE_UNSUPPORTED;
}

bookingFlightRequestTypeSupport::_ptr_type bookingFlightRequestTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl< ::UATM::bookingFlightRequest> : MetaStruct {
  typedef  ::UATM::bookingFlightRequest T;

#ifndef OPENDDS_NO_MULTI_TOPIC
  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 1; }

#endif /* OPENDDS_NO_MULTI_TOPIC */

  Value getValue(const void* stru, const char* field) const
  {
    const ::UATM::bookingFlightRequest& typed = *static_cast<const ::UATM::bookingFlightRequest*>(stru);
    ACE_UNUSED_ARG(typed);
    if (std::strcmp(field, "booking_id") == 0) {
      return typed.booking_id;
    }
    if (std::strcmp(field, "customer_id") == 0) {
      return typed.customer_id.in();
    }
    if (std::strcmp(field, "flight_id") == 0) {
      return typed.flight_id;
    }
    if (std::strcmp(field, "departure_time") == 0) {
      return typed.departure_time.in();
    }
    if (std::strcmp(field, "arrival_time") == 0) {
      return typed.arrival_time.in();
    }
    if (std::strcmp(field, "route_id") == 0) {
      return typed.route_id;
    }
    if (std::strcmp(field, "request_status") == 0) {
      return typed.request_status;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::bookingFlightRequest)");
  }

  Value getValue(Serializer& strm, const char* field, TypeSupportImpl* = 0) const
  {
    const Encoding& encoding = strm.encoding();
    ACE_UNUSED_ARG(encoding);
    size_t total_size = 0;
    if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
      if (!strm.read_delimiter(total_size)) {
        throw std::runtime_error("Unable to reader delimiter in getValue");
      }
    }
    std::string base_field = field;
    const size_t index = base_field.find('.');
    std::string subfield;
    if (index != std::string::npos) {
      subfield = base_field.substr(index + 1);
      base_field = base_field.substr(0, index);
    }
    if (base_field == "booking_id") {
      ACE_CDR::Long val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'booking_id' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'booking_id' could not be skipped");
      }
    }
    if (base_field == "customer_id") {
      TAO::String_Manager val;
      if (!(strm >> val.out())) {
        throw std::runtime_error("Field 'customer_id' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(strm >> len)) {
        throw std::runtime_error("String 'customer_id' length could not be deserialized");
      }
      if (!strm.skip(len)) {
        throw std::runtime_error("String 'customer_id' contents could not be skipped");
      }
    }
    if (base_field == "flight_id") {
      ACE_CDR::Long val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'flight_id' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'flight_id' could not be skipped");
      }
    }
    if (base_field == "departure_time") {
      TAO::String_Manager val;
      if (!(strm >> val.out())) {
        throw std::runtime_error("Field 'departure_time' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(strm >> len)) {
        throw std::runtime_error("String 'departure_time' length could not be deserialized");
      }
      if (!strm.skip(len)) {
        throw std::runtime_error("String 'departure_time' contents could not be skipped");
      }
    }
    if (base_field == "arrival_time") {
      TAO::String_Manager val;
      if (!(strm >> val.out())) {
        throw std::runtime_error("Field 'arrival_time' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(strm >> len)) {
        throw std::runtime_error("String 'arrival_time' length could not be deserialized");
      }
      if (!strm.skip(len)) {
        throw std::runtime_error("String 'arrival_time' contents could not be skipped");
      }
    }
    if (base_field == "route_id") {
      ACE_CDR::Long val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'route_id' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'route_id' could not be skipped");
      }
    }
    if (base_field == "request_status") {
      ACE_CDR::Boolean val;
      if (!(strm >> ACE_InputCDR::to_boolean(val))) {
        throw std::runtime_error("Field 'request_status' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  1 )) {
        throw std::runtime_error("Field 'request_status' could not be skipped");
      }
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Did not find field in getValue");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "booking_id") == 0) {
      return make_field_cmp(&T::booking_id, next);
    }
    if (std::strcmp(field, "customer_id") == 0) {
      return make_field_cmp(&T::customer_id, next);
    }
    if (std::strcmp(field, "flight_id") == 0) {
      return make_field_cmp(&T::flight_id, next);
    }
    if (std::strcmp(field, "departure_time") == 0) {
      return make_field_cmp(&T::departure_time, next);
    }
    if (std::strcmp(field, "arrival_time") == 0) {
      return make_field_cmp(&T::arrival_time, next);
    }
    if (std::strcmp(field, "route_id") == 0) {
      return make_field_cmp(&T::route_id, next);
    }
    if (std::strcmp(field, "request_status") == 0) {
      return make_field_cmp(&T::request_status, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::bookingFlightRequest)");
  }

#ifndef OPENDDS_NO_MULTI_TOPIC
  const char** getFieldNames() const
  {
    static const char* names[] = {"booking_id", "customer_id", "flight_id", "departure_time", "arrival_time", "route_id", "request_status", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "booking_id") == 0) {
      return &static_cast<const T*>(stru)->booking_id;
    }
    if (std::strcmp(field, "customer_id") == 0) {
      return &static_cast<const T*>(stru)->customer_id;
    }
    if (std::strcmp(field, "flight_id") == 0) {
      return &static_cast<const T*>(stru)->flight_id;
    }
    if (std::strcmp(field, "departure_time") == 0) {
      return &static_cast<const T*>(stru)->departure_time;
    }
    if (std::strcmp(field, "arrival_time") == 0) {
      return &static_cast<const T*>(stru)->arrival_time;
    }
    if (std::strcmp(field, "route_id") == 0) {
      return &static_cast<const T*>(stru)->route_id;
    }
    if (std::strcmp(field, "request_status") == 0) {
      return &static_cast<const T*>(stru)->request_status;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::bookingFlightRequest)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "booking_id") == 0) {
      static_cast<T*>(lhs)->booking_id = *static_cast<const  ::CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "customer_id") == 0) {
      static_cast<T*>(lhs)->customer_id = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "flight_id") == 0) {
      static_cast<T*>(lhs)->flight_id = *static_cast<const  ::CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "departure_time") == 0) {
      static_cast<T*>(lhs)->departure_time = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "arrival_time") == 0) {
      static_cast<T*>(lhs)->arrival_time = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "route_id") == 0) {
      static_cast<T*>(lhs)->route_id = *static_cast<const  ::CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "request_status") == 0) {
      static_cast<T*>(lhs)->request_status = *static_cast<const  ::CORBA::Boolean*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::bookingFlightRequest)");
  }

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "booking_id") == 0) {
      return static_cast<const T*>(lhs)->booking_id == static_cast<const T*>(rhs)->booking_id;
    }
    if (std::strcmp(field, "customer_id") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->customer_id.in(), static_cast<const T*>(rhs)->customer_id.in());
    }
    if (std::strcmp(field, "flight_id") == 0) {
      return static_cast<const T*>(lhs)->flight_id == static_cast<const T*>(rhs)->flight_id;
    }
    if (std::strcmp(field, "departure_time") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->departure_time.in(), static_cast<const T*>(rhs)->departure_time.in());
    }
    if (std::strcmp(field, "arrival_time") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->arrival_time.in(), static_cast<const T*>(rhs)->arrival_time.in());
    }
    if (std::strcmp(field, "route_id") == 0) {
      return static_cast<const T*>(lhs)->route_id == static_cast<const T*>(rhs)->route_id;
    }
    if (std::strcmp(field, "request_status") == 0) {
      return static_cast<const T*>(lhs)->request_status == static_cast<const T*>(rhs)->request_status;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::bookingFlightRequest)");
  }
#endif /* OPENDDS_NO_MULTI_TOPIC */

};

template<>
const MetaStruct& getMetaStruct< ::UATM::bookingFlightRequest>()
{
  static MetaStructImpl< ::UATM::bookingFlightRequest> msi;
  return msi;
}

bool gen_skip_over(Serializer& ser,  ::UATM::bookingFlightRequest*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl< ::UATM::bookingFlightRequest>().getValue(ser, "");
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif // ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace XTypes {

#ifndef OPENDDS_SAFETY_PROFILE
#if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
template <>
class DynamicDataAdapterImpl< ::UATM::bookingFlightRequest,  ::UATM::bookingFlightRequest > : public DynamicDataAdapter_T< ::UATM::bookingFlightRequest> {
public:
  DynamicDataAdapterImpl(DDS::DynamicType_ptr type,  ::UATM::bookingFlightRequest& value)
    : DynamicDataAdapter_T< ::UATM::bookingFlightRequest>(type, value)
  {
  }

  DynamicDataAdapterImpl(DDS::DynamicType_ptr type, const  ::UATM::bookingFlightRequest& value)
    : DynamicDataAdapter_T< ::UATM::bookingFlightRequest>(type, value)
  {
  }

  DDS::ReturnCode_t clear_all_values()
  {
    const DDS::ReturnCode_t rc = assert_mutable("DynamicDataAdapter::clear_all_values");
    if (rc == DDS::RETCODE_OK) {
      OpenDDS::DCPS::set_default(value_);
    }
    return rc;
  }

  DDS::UInt32 get_item_count()
  {
    return 7;
  }

  bool serialized_size(const OpenDDS::DCPS::Encoding& enc, size_t& size, OpenDDS::DCPS::Sample::Extent ext) const
  {
    using namespace OpenDDS::DCPS;
    if (ext == Sample::Full) {
      DCPS::serialized_size(enc, size, value_);
    } else if (ext == Sample::NestedKeyOnly) {
      const NestedKeyOnly<const  ::UATM::bookingFlightRequest> nested_key_only(value_);
      DCPS::serialized_size(enc, size, nested_key_only);
    } else {
      return false; // Non-topic type
    }
    return true;
  }

  bool serialize(OpenDDS::DCPS::Serializer& ser, OpenDDS::DCPS::Sample::Extent ext) const
  {
    using namespace OpenDDS::DCPS;
    if (ext == Sample::Full) {
      return ser << value_;
    } else if (ext == Sample::NestedKeyOnly) {
      NestedKeyOnly<const  ::UATM::bookingFlightRequest> nested_key_only(value_);
      return ser << nested_key_only;
    } else {
      return false; // Non-topic type
    }
  }

protected:
  DDS::ReturnCode_t get_raw_value(const char* method, void* dest, DDS::TypeKind tk, DDS::MemberId id)
  {
    switch (id) {
    case 0:
      {
        return get_simple_raw_value(method, dest, tk, value_.booking_id, id);
      }
    case 1:
      {
        return get_s8_raw_value(method, dest, tk, value_.customer_id, id);
      }
    case 2:
      {
        return get_simple_raw_value(method, dest, tk, value_.flight_id, id);
      }
    case 3:
      {
        return get_s8_raw_value(method, dest, tk, value_.departure_time, id);
      }
    case 4:
      {
        return get_s8_raw_value(method, dest, tk, value_.arrival_time, id);
      }
    case 5:
      {
        return get_simple_raw_value(method, dest, tk, value_.route_id, id);
      }
    case 6:
      {
        return get_simple_raw_value(method, dest, tk, value_.request_status, id);
      }
    default:
      return invalid_id(method, id);
    }
  }

  DDS::ReturnCode_t set_raw_value(const char* method, DDS::MemberId id, const void* source, DDS::TypeKind tk)
  {
    DDS::ReturnCode_t rc = assert_mutable(method);
    if (rc != DDS::RETCODE_OK) {
      return rc;
    }
    switch (id) {
    case 0:
      {
        return set_simple_raw_value(method, value_.booking_id, id, source, tk);
      }
    case 1:
      {
        return set_s8_raw_value(method, value_.customer_id.inout(), id, source, tk);
      }
    case 2:
      {
        return set_simple_raw_value(method, value_.flight_id, id, source, tk);
      }
    case 3:
      {
        return set_s8_raw_value(method, value_.departure_time.inout(), id, source, tk);
      }
    case 4:
      {
        return set_s8_raw_value(method, value_.arrival_time.inout(), id, source, tk);
      }
    case 5:
      {
        return set_simple_raw_value(method, value_.route_id, id, source, tk);
      }
    case 6:
      {
        return set_simple_raw_value(method, value_.request_status, id, source, tk);
      }
    default:
      return invalid_id(method, id);
    }
  }
};

#endif // if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER

template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::bookingFlightRequest,  ::UATM::bookingFlightRequest>(DDS::DynamicType_ptr type, const  ::UATM::bookingFlightRequest& value)
{
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  if (type) {
    return new DynamicDataAdapterImpl< ::UATM::bookingFlightRequest,  ::UATM::bookingFlightRequest>(type, value);
  }
#  else
  ACE_UNUSED_ARG(type);
  ACE_UNUSED_ARG(value);
#  endif
  return 0;
}

template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::bookingFlightRequest,  ::UATM::bookingFlightRequest>(DDS::DynamicType_ptr type,  ::UATM::bookingFlightRequest& value)
{
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  if (type) {
    return new DynamicDataAdapterImpl< ::UATM::bookingFlightRequest,  ::UATM::bookingFlightRequest>(type, value);
  }
#  else
  ACE_UNUSED_ARG(type);
  ACE_UNUSED_ARG(value);
#  endif
  return 0;
}

template <>
const  ::UATM::bookingFlightRequest* get_dynamic_data_adapter_value< ::UATM::bookingFlightRequest,  ::UATM::bookingFlightRequest>(DDS::DynamicData_ptr dd)
{
  ACE_UNUSED_ARG(dd);
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  typedef DynamicDataAdapterImpl< ::UATM::bookingFlightRequest,  ::UATM::bookingFlightRequest> Dda;
  const Dda* const dda = dynamic_cast<Dda*>(dd);
  if (dda) {
    return &dda->wrapped();
  }
#  endif
  return 0;
}
#endif // ifndef OPENDDS_SAFETY_PROFILE

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End STRUCT: bookingFlightRequest */

/* End MODULE: UATM */


/* Begin MODULE: UATM */



/* Begin STRUCT: flightAuthorization */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> const XTypes::TypeIdentifier& getMinimalTypeIdentifier<UATM_flightAuthorization_xtag>()
{
  static XTypes::TypeIdentifier ti;
  ACE_GUARD_RETURN(ACE_Thread_Mutex, guard, TheServiceParticipant->get_static_xtypes_lock(), ti);
  if (ti.kind() == XTypes::TK_NONE) {
    ti = XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(224, 2, 25, 151, 93, 69, 55, 8, 242, 60, 174, 242, 37, 244));
  }
  return ti;
}

template<> const XTypes::TypeMap& getMinimalTypeMap<UATM_flightAuthorization_xtag>()
{
  return OPENDDS_IDL_FILE_SPECIFIC(get_minimal_type_map, 0)();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool vread(OpenDDS::DCPS::ValueReader& value_reader,  ::UATM::flightAuthorization& value)
{
  ACE_UNUSED_ARG(value_reader);
  ACE_UNUSED_ARG(value);
  static const ListMemberHelper::Pair pairs[] = {{"authorization_id",0},{"flight_id",1},{"approved_route_id",2},{"authority",3},{"authorization_time",4},{"valid_until",5},{0,0}};
  ListMemberHelper helper(pairs);
  if (!value_reader.begin_struct(OpenDDS::DCPS::APPENDABLE)) return false;
  XTypes::MemberId member_id;
  while (value_reader.members_remaining()) {
    if (!value_reader.begin_struct_member(member_id, helper)) return false;
    switch (member_id) {
    case 0: {
      if (!value_reader.read_int32(value.authorization_id)) return false;
      break;
    }
    case 1: {
      if (!value_reader.read_int32(value.flight_id)) return false;
      break;
    }
    case 2: {
      if (!value_reader.read_int32(value.approved_route_id)) return false;
      break;
    }
    case 3: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.authority = x.c_str();
      }
      break;
    }
    case 4: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.authorization_time = x.c_str();
      }
      break;
    }
    case 5: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.valid_until = x.c_str();
      }
      break;
    }
    }
    if (!value_reader.end_struct_member()) return false;
  }
  if (!value_reader.end_struct()) return false;
  return true;
}

bool vread(OpenDDS::DCPS::ValueReader& value_reader, const NestedKeyOnly< ::UATM::flightAuthorization>& value)
{
  ACE_UNUSED_ARG(value_reader);
  ACE_UNUSED_ARG(value);
  static const ListMemberHelper::Pair pairs[] = {{"authorization_id",0},{"flight_id",1},{"approved_route_id",2},{"authority",3},{"authorization_time",4},{"valid_until",5},{0,0}};
  ListMemberHelper helper(pairs);
  if (!value_reader.begin_struct(OpenDDS::DCPS::APPENDABLE)) return false;
  XTypes::MemberId member_id;
  while (value_reader.members_remaining()) {
    if (!value_reader.begin_struct_member(member_id, helper)) return false;
    switch (member_id) {
    case 0: {
      if (!value_reader.read_int32(value.value.authorization_id)) return false;
      break;
    }
    case 1: {
      if (!value_reader.read_int32(value.value.flight_id)) return false;
      break;
    }
    case 2: {
      if (!value_reader.read_int32(value.value.approved_route_id)) return false;
      break;
    }
    case 3: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.value.authority = x.c_str();
      }
      break;
    }
    case 4: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.value.authorization_time = x.c_str();
      }
      break;
    }
    case 5: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.value.valid_until = x.c_str();
      }
      break;
    }
    }
    if (!value_reader.end_struct_member()) return false;
  }
  if (!value_reader.end_struct()) return false;
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const  ::UATM::flightAuthorization& value)
{
  ACE_UNUSED_ARG(value_writer);
  ACE_UNUSED_ARG(value);
  if (!value_writer.begin_struct(OpenDDS::DCPS::APPENDABLE)) {
    return false;
  }
  {
    MemberParam param(0, false, "authorization_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.authorization_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(1, false, "flight_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.flight_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(2, false, "approved_route_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.approved_route_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(3, false, "authority", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.authority)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(4, false, "authorization_time", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.authorization_time)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(5, false, "valid_until", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.valid_until)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  return value_writer.end_struct();
}

bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const NestedKeyOnly<const  ::UATM::flightAuthorization>& value)
{
  ACE_UNUSED_ARG(value_writer);
  ACE_UNUSED_ARG(value);
  if (!value_writer.begin_struct(OpenDDS::DCPS::APPENDABLE)) {
    return false;
  }
  {
    MemberParam param(0, false, "authorization_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.value.authorization_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(1, false, "flight_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.value.flight_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(2, false, "approved_route_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.value.approved_route_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(3, false, "authority", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.value.authority)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(4, false, "authorization_time", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.value.authorization_time)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(5, false, "valid_until", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.value.valid_until)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  return value_writer.end_struct();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> void set_default( ::UATM::flightAuthorization& stru)
{
  ACE_UNUSED_ARG(stru);
  stru.authorization_id = 0;
  stru.flight_id = 0;
  stru.approved_route_id = 0;
  stru.authority = "";
  stru.authorization_time = "";
  stru.valid_until = "";
}

void serialized_size(const Encoding& encoding, size_t& size, const ::UATM::flightAuthorization& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
  primitive_serialized_size(encoding, size, stru.authorization_id);
  primitive_serialized_size(encoding, size, stru.flight_id);
  primitive_serialized_size(encoding, size, stru.approved_route_id);
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.authority.in()) + 1;
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.authorization_time.in()) + 1;
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.valid_until.in()) + 1;
}

bool operator<<(Serializer& strm, const ::UATM::flightAuthorization& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
  return (strm << stru.authorization_id)
    && (strm << stru.flight_id)
    && (strm << stru.approved_route_id)
    && (strm << ACE_OutputCDR::from_string(stru.authority.in(), 20))
    && (strm << ACE_OutputCDR::from_string(stru.authorization_time.in(), 20))
    && (strm << ACE_OutputCDR::from_string(stru.valid_until.in(), 20));
}

bool operator>>(Serializer& strm,  ::UATM::flightAuthorization& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  bool reached_end_of_struct = false;
  ACE_UNUSED_ARG(reached_end_of_struct);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.authorization_id = 0;
  } else {
    if (!(strm >> stru.authorization_id)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.flight_id = 0;
  } else {
    if (!(strm >> stru.flight_id)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.approved_route_id = 0;
  } else {
    if (!(strm >> stru.approved_route_id)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.authority = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.authority.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.authorization_time = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.authorization_time.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.valid_until = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.valid_until.out(), 20))) {
      return false;
    }
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const ::UATM::flightAuthorization>& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
  primitive_serialized_size(encoding, size, stru.value.authorization_id);
  primitive_serialized_size(encoding, size, stru.value.flight_id);
  primitive_serialized_size(encoding, size, stru.value.approved_route_id);
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.value.authority.in()) + 1;
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.value.authorization_time.in()) + 1;
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.value.valid_until.in()) + 1;
}

bool operator<<(Serializer& strm, const NestedKeyOnly<const ::UATM::flightAuthorization>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
  return (strm << stru.value.authorization_id)
    && (strm << stru.value.flight_id)
    && (strm << stru.value.approved_route_id)
    && (strm << ACE_OutputCDR::from_string(stru.value.authority.in(), 20))
    && (strm << ACE_OutputCDR::from_string(stru.value.authorization_time.in(), 20))
    && (strm << ACE_OutputCDR::from_string(stru.value.valid_until.in(), 20));
}

bool operator>>(Serializer& strm, const NestedKeyOnly< ::UATM::flightAuthorization>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  bool reached_end_of_struct = false;
  ACE_UNUSED_ARG(reached_end_of_struct);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.authorization_id = 0;
  } else {
    if (!(strm >> stru.value.authorization_id)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.flight_id = 0;
  } else {
    if (!(strm >> stru.value.flight_id)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.approved_route_id = 0;
  } else {
    if (!(strm >> stru.value.approved_route_id)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.authority = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.value.authority.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.authorization_time = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.value.authorization_time.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.valid_until = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.value.valid_until.out(), 20))) {
      return false;
    }
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

void serialized_size(const Encoding& encoding, size_t& size, const KeyOnly<const  ::UATM::flightAuthorization> stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  switch (encoding.xcdr_version()) {
  case Encoding::XCDR_VERSION_1:
    {
    primitive_serialized_size(encoding, size, stru.value.authorization_id);
    break;
    }
  case Encoding::XCDR_VERSION_2:
    {
    primitive_serialized_size(encoding, size, stru.value.authorization_id);
    break;
    }
  case Encoding::XCDR_VERSION_NONE:
    {
    primitive_serialized_size(encoding, size, stru.value.authorization_id);
    break;
    }
  }
}

bool operator<<(Serializer& strm, KeyOnly<const  ::UATM::flightAuthorization> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.value.authorization_id);
}

bool operator>>(Serializer& strm, KeyOnly< ::UATM::flightAuthorization> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.value.authorization_id);
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace DCPS {
bool DDSTraits< ::UATM::flightAuthorization>::is_key(const char* field)
{
  ACE_UNUSED_ARG(field);
  if (!ACE_OS::strcmp(field, "authorization_id")) {
    return true;
  }
  return false;
}
} // namespace DCPS
} // namespace OpenDDS
OPENDDS_END_VERSIONED_NAMESPACE_DECL

namespace UATM {
::DDS::DataWriter_ptr flightAuthorizationTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<flightAuthorization> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}

::DDS::DataReader_ptr flightAuthorizationTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<flightAuthorization> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}

#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr flightAuthorizationTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<flightAuthorization> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<flightAuthorization, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */

#ifndef OPENDDS_SAFETY_PROFILE
flightAuthorization* flightAuthorizationTypeSupportImpl::create_sample(::DDS::DynamicData_ptr src)
{
  flightAuthorization* value = new flightAuthorization;
  const ::DDS::ReturnCode_t rc = OpenDDS::DCPS::TypeSupportImpl_T<flightAuthorization>::create_sample_rc(*value, src);
  if (rc != ::DDS::RETCODE_OK && OpenDDS::DCPS::log_level >= OpenDDS::DCPS::LogLevel::Warning) {
    ACE_ERROR((LM_WARNING, "(%P|%t) WARNING: flightAuthorizationTypeSupportImpl::create_sample: "
      "create_sample_rc failed: %C\n", OpenDDS::DCPS::retcode_to_string(rc)));
  }
  return value;
}
#endif

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& flightAuthorizationTypeSupportImpl::getMetaStructForType() const
{
  return OpenDDS::DCPS::getMetaStruct<flightAuthorization>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */

namespace {
  OpenDDS::DCPS::TypeSupportInitializer<flightAuthorizationTypeSupportImpl> ts_init_UATM_flightAuthorization;
}

const OpenDDS::XTypes::TypeIdentifier& flightAuthorizationTypeSupportImpl::getMinimalTypeIdentifier() const
{
  return OpenDDS::DCPS::getMinimalTypeIdentifier<OpenDDS::DCPS::UATM_flightAuthorization_xtag>();
}

const OpenDDS::XTypes::TypeMap& flightAuthorizationTypeSupportImpl::getMinimalTypeMap() const
{
  return OpenDDS::DCPS::getMinimalTypeMap<OpenDDS::DCPS::UATM_flightAuthorization_xtag>();
}

const OpenDDS::XTypes::TypeIdentifier& flightAuthorizationTypeSupportImpl::getCompleteTypeIdentifier() const
{
  static OpenDDS::XTypes::TypeIdentifier ti;
  return ti;
}

const OpenDDS::XTypes::TypeMap& flightAuthorizationTypeSupportImpl::getCompleteTypeMap() const
{
  static OpenDDS::XTypes::TypeMap tm;
  return tm;
}

::DDS::ReturnCode_t flightAuthorizationTypeSupportImpl::encode_to_string(const flightAuthorization& in, CORBA::String_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
#if OPENDDS_HAS_JSON_VALUE_WRITER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    rapidjson::StringBuffer buffer;
    rapidjson::Writer<rapidjson::StringBuffer> writer(buffer);
    OpenDDS::DCPS::JsonValueWriter<rapidjson::Writer<rapidjson::StringBuffer> > jvw(writer);
    if (!vwrite(jvw, in)) {
      return ::DDS::RETCODE_ERROR;
    }
    out = buffer.GetString();
    return ::DDS::RETCODE_OK;
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  out = "";
  return ::DDS::RETCODE_UNSUPPORTED;
}

::DDS::ReturnCode_t flightAuthorizationTypeSupportImpl::encode_to_bytes(const flightAuthorization& in, ::DDS::OctetSeq_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
#if OPENDDS_HAS_JSON_VALUE_WRITER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    CORBA::String_var buffer;
    const ::DDS::ReturnCode_t ret = encode_to_string(in, buffer, format);
    if (ret == ::DDS::RETCODE_OK) {
      const ::DDS::UInt32 len = static_cast< ::DDS::UInt32>(std::strlen(buffer));
      out = new ::DDS::OctetSeq(len);
      out->length(len);
      std::memcpy(out->get_buffer(), buffer, len);
      return ::DDS::RETCODE_OK;
    } else {
      out = new ::DDS::OctetSeq();
      return ret;
    }
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  out = new ::DDS::OctetSeq();
  return ::DDS::RETCODE_UNSUPPORTED;
}

::DDS::ReturnCode_t flightAuthorizationTypeSupportImpl::decode_from_string(const char* in, flightAuthorization_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
  out = new flightAuthorization;
  OpenDDS::DCPS::set_default(*out);
#if OPENDDS_HAS_JSON_VALUE_READER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    rapidjson::StringStream buffer(in);
    OpenDDS::DCPS::JsonValueReader<> jvr(buffer);
    return vread(jvr, *out) ? ::DDS::RETCODE_OK : ::DDS::RETCODE_ERROR;
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  return ::DDS::RETCODE_UNSUPPORTED;
}

::DDS::ReturnCode_t flightAuthorizationTypeSupportImpl::decode_from_bytes(const ::DDS::OctetSeq& in, flightAuthorization_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
#if OPENDDS_HAS_JSON_VALUE_READER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    return decode_from_string(reinterpret_cast<const char*>(in.get_buffer()), out, format);
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  out = new flightAuthorization();
  return ::DDS::RETCODE_UNSUPPORTED;
}

flightAuthorizationTypeSupport::_ptr_type flightAuthorizationTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl< ::UATM::flightAuthorization> : MetaStruct {
  typedef  ::UATM::flightAuthorization T;

#ifndef OPENDDS_NO_MULTI_TOPIC
  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 1; }

#endif /* OPENDDS_NO_MULTI_TOPIC */

  Value getValue(const void* stru, const char* field) const
  {
    const ::UATM::flightAuthorization& typed = *static_cast<const ::UATM::flightAuthorization*>(stru);
    ACE_UNUSED_ARG(typed);
    if (std::strcmp(field, "authorization_id") == 0) {
      return typed.authorization_id;
    }
    if (std::strcmp(field, "flight_id") == 0) {
      return typed.flight_id;
    }
    if (std::strcmp(field, "approved_route_id") == 0) {
      return typed.approved_route_id;
    }
    if (std::strcmp(field, "authority") == 0) {
      return typed.authority.in();
    }
    if (std::strcmp(field, "authorization_time") == 0) {
      return typed.authorization_time.in();
    }
    if (std::strcmp(field, "valid_until") == 0) {
      return typed.valid_until.in();
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::flightAuthorization)");
  }

  Value getValue(Serializer& strm, const char* field, TypeSupportImpl* = 0) const
  {
    const Encoding& encoding = strm.encoding();
    ACE_UNUSED_ARG(encoding);
    size_t total_size = 0;
    if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
      if (!strm.read_delimiter(total_size)) {
        throw std::runtime_error("Unable to reader delimiter in getValue");
      }
    }
    std::string base_field = field;
    const size_t index = base_field.find('.');
    std::string subfield;
    if (index != std::string::npos) {
      subfield = base_field.substr(index + 1);
      base_field = base_field.substr(0, index);
    }
    if (base_field == "authorization_id") {
      ACE_CDR::Long val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'authorization_id' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'authorization_id' could not be skipped");
      }
    }
    if (base_field == "flight_id") {
      ACE_CDR::Long val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'flight_id' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'flight_id' could not be skipped");
      }
    }
    if (base_field == "approved_route_id") {
      ACE_CDR::Long val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'approved_route_id' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'approved_route_id' could not be skipped");
      }
    }
    if (base_field == "authority") {
      TAO::String_Manager val;
      if (!(strm >> val.out())) {
        throw std::runtime_error("Field 'authority' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(strm >> len)) {
        throw std::runtime_error("String 'authority' length could not be deserialized");
      }
      if (!strm.skip(len)) {
        throw std::runtime_error("String 'authority' contents could not be skipped");
      }
    }
    if (base_field == "authorization_time") {
      TAO::String_Manager val;
      if (!(strm >> val.out())) {
        throw std::runtime_error("Field 'authorization_time' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(strm >> len)) {
        throw std::runtime_error("String 'authorization_time' length could not be deserialized");
      }
      if (!strm.skip(len)) {
        throw std::runtime_error("String 'authorization_time' contents could not be skipped");
      }
    }
    if (base_field == "valid_until") {
      TAO::String_Manager val;
      if (!(strm >> val.out())) {
        throw std::runtime_error("Field 'valid_until' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(strm >> len)) {
        throw std::runtime_error("String 'valid_until' length could not be deserialized");
      }
      if (!strm.skip(len)) {
        throw std::runtime_error("String 'valid_until' contents could not be skipped");
      }
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Did not find field in getValue");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "authorization_id") == 0) {
      return make_field_cmp(&T::authorization_id, next);
    }
    if (std::strcmp(field, "flight_id") == 0) {
      return make_field_cmp(&T::flight_id, next);
    }
    if (std::strcmp(field, "approved_route_id") == 0) {
      return make_field_cmp(&T::approved_route_id, next);
    }
    if (std::strcmp(field, "authority") == 0) {
      return make_field_cmp(&T::authority, next);
    }
    if (std::strcmp(field, "authorization_time") == 0) {
      return make_field_cmp(&T::authorization_time, next);
    }
    if (std::strcmp(field, "valid_until") == 0) {
      return make_field_cmp(&T::valid_until, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::flightAuthorization)");
  }

#ifndef OPENDDS_NO_MULTI_TOPIC
  const char** getFieldNames() const
  {
    static const char* names[] = {"authorization_id", "flight_id", "approved_route_id", "authority", "authorization_time", "valid_until", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "authorization_id") == 0) {
      return &static_cast<const T*>(stru)->authorization_id;
    }
    if (std::strcmp(field, "flight_id") == 0) {
      return &static_cast<const T*>(stru)->flight_id;
    }
    if (std::strcmp(field, "approved_route_id") == 0) {
      return &static_cast<const T*>(stru)->approved_route_id;
    }
    if (std::strcmp(field, "authority") == 0) {
      return &static_cast<const T*>(stru)->authority;
    }
    if (std::strcmp(field, "authorization_time") == 0) {
      return &static_cast<const T*>(stru)->authorization_time;
    }
    if (std::strcmp(field, "valid_until") == 0) {
      return &static_cast<const T*>(stru)->valid_until;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::flightAuthorization)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "authorization_id") == 0) {
      static_cast<T*>(lhs)->authorization_id = *static_cast<const  ::CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "flight_id") == 0) {
      static_cast<T*>(lhs)->flight_id = *static_cast<const  ::CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "approved_route_id") == 0) {
      static_cast<T*>(lhs)->approved_route_id = *static_cast<const  ::CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "authority") == 0) {
      static_cast<T*>(lhs)->authority = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "authorization_time") == 0) {
      static_cast<T*>(lhs)->authorization_time = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "valid_until") == 0) {
      static_cast<T*>(lhs)->valid_until = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::flightAuthorization)");
  }

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "authorization_id") == 0) {
      return static_cast<const T*>(lhs)->authorization_id == static_cast<const T*>(rhs)->authorization_id;
    }
    if (std::strcmp(field, "flight_id") == 0) {
      return static_cast<const T*>(lhs)->flight_id == static_cast<const T*>(rhs)->flight_id;
    }
    if (std::strcmp(field, "approved_route_id") == 0) {
      return static_cast<const T*>(lhs)->approved_route_id == static_cast<const T*>(rhs)->approved_route_id;
    }
    if (std::strcmp(field, "authority") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->authority.in(), static_cast<const T*>(rhs)->authority.in());
    }
    if (std::strcmp(field, "authorization_time") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->authorization_time.in(), static_cast<const T*>(rhs)->authorization_time.in());
    }
    if (std::strcmp(field, "valid_until") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->valid_until.in(), static_cast<const T*>(rhs)->valid_until.in());
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::flightAuthorization)");
  }
#endif /* OPENDDS_NO_MULTI_TOPIC */

};

template<>
const MetaStruct& getMetaStruct< ::UATM::flightAuthorization>()
{
  static MetaStructImpl< ::UATM::flightAuthorization> msi;
  return msi;
}

bool gen_skip_over(Serializer& ser,  ::UATM::flightAuthorization*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl< ::UATM::flightAuthorization>().getValue(ser, "");
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif // ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace XTypes {

#ifndef OPENDDS_SAFETY_PROFILE
#if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
template <>
class DynamicDataAdapterImpl< ::UATM::flightAuthorization,  ::UATM::flightAuthorization > : public DynamicDataAdapter_T< ::UATM::flightAuthorization> {
public:
  DynamicDataAdapterImpl(DDS::DynamicType_ptr type,  ::UATM::flightAuthorization& value)
    : DynamicDataAdapter_T< ::UATM::flightAuthorization>(type, value)
  {
  }

  DynamicDataAdapterImpl(DDS::DynamicType_ptr type, const  ::UATM::flightAuthorization& value)
    : DynamicDataAdapter_T< ::UATM::flightAuthorization>(type, value)
  {
  }

  DDS::ReturnCode_t clear_all_values()
  {
    const DDS::ReturnCode_t rc = assert_mutable("DynamicDataAdapter::clear_all_values");
    if (rc == DDS::RETCODE_OK) {
      OpenDDS::DCPS::set_default(value_);
    }
    return rc;
  }

  DDS::UInt32 get_item_count()
  {
    return 6;
  }

  bool serialized_size(const OpenDDS::DCPS::Encoding& enc, size_t& size, OpenDDS::DCPS::Sample::Extent ext) const
  {
    using namespace OpenDDS::DCPS;
    if (ext == Sample::Full) {
      DCPS::serialized_size(enc, size, value_);
    } else if (ext == Sample::NestedKeyOnly) {
      const NestedKeyOnly<const  ::UATM::flightAuthorization> nested_key_only(value_);
      DCPS::serialized_size(enc, size, nested_key_only);
    } else {
      return false; // Non-topic type
    }
    return true;
  }

  bool serialize(OpenDDS::DCPS::Serializer& ser, OpenDDS::DCPS::Sample::Extent ext) const
  {
    using namespace OpenDDS::DCPS;
    if (ext == Sample::Full) {
      return ser << value_;
    } else if (ext == Sample::NestedKeyOnly) {
      NestedKeyOnly<const  ::UATM::flightAuthorization> nested_key_only(value_);
      return ser << nested_key_only;
    } else {
      return false; // Non-topic type
    }
  }

protected:
  DDS::ReturnCode_t get_raw_value(const char* method, void* dest, DDS::TypeKind tk, DDS::MemberId id)
  {
    switch (id) {
    case 0:
      {
        return get_simple_raw_value(method, dest, tk, value_.authorization_id, id);
      }
    case 1:
      {
        return get_simple_raw_value(method, dest, tk, value_.flight_id, id);
      }
    case 2:
      {
        return get_simple_raw_value(method, dest, tk, value_.approved_route_id, id);
      }
    case 3:
      {
        return get_s8_raw_value(method, dest, tk, value_.authority, id);
      }
    case 4:
      {
        return get_s8_raw_value(method, dest, tk, value_.authorization_time, id);
      }
    case 5:
      {
        return get_s8_raw_value(method, dest, tk, value_.valid_until, id);
      }
    default:
      return invalid_id(method, id);
    }
  }

  DDS::ReturnCode_t set_raw_value(const char* method, DDS::MemberId id, const void* source, DDS::TypeKind tk)
  {
    DDS::ReturnCode_t rc = assert_mutable(method);
    if (rc != DDS::RETCODE_OK) {
      return rc;
    }
    switch (id) {
    case 0:
      {
        return set_simple_raw_value(method, value_.authorization_id, id, source, tk);
      }
    case 1:
      {
        return set_simple_raw_value(method, value_.flight_id, id, source, tk);
      }
    case 2:
      {
        return set_simple_raw_value(method, value_.approved_route_id, id, source, tk);
      }
    case 3:
      {
        return set_s8_raw_value(method, value_.authority.inout(), id, source, tk);
      }
    case 4:
      {
        return set_s8_raw_value(method, value_.authorization_time.inout(), id, source, tk);
      }
    case 5:
      {
        return set_s8_raw_value(method, value_.valid_until.inout(), id, source, tk);
      }
    default:
      return invalid_id(method, id);
    }
  }
};

#endif // if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER

template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::flightAuthorization,  ::UATM::flightAuthorization>(DDS::DynamicType_ptr type, const  ::UATM::flightAuthorization& value)
{
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  if (type) {
    return new DynamicDataAdapterImpl< ::UATM::flightAuthorization,  ::UATM::flightAuthorization>(type, value);
  }
#  else
  ACE_UNUSED_ARG(type);
  ACE_UNUSED_ARG(value);
#  endif
  return 0;
}

template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::flightAuthorization,  ::UATM::flightAuthorization>(DDS::DynamicType_ptr type,  ::UATM::flightAuthorization& value)
{
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  if (type) {
    return new DynamicDataAdapterImpl< ::UATM::flightAuthorization,  ::UATM::flightAuthorization>(type, value);
  }
#  else
  ACE_UNUSED_ARG(type);
  ACE_UNUSED_ARG(value);
#  endif
  return 0;
}

template <>
const  ::UATM::flightAuthorization* get_dynamic_data_adapter_value< ::UATM::flightAuthorization,  ::UATM::flightAuthorization>(DDS::DynamicData_ptr dd)
{
  ACE_UNUSED_ARG(dd);
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  typedef DynamicDataAdapterImpl< ::UATM::flightAuthorization,  ::UATM::flightAuthorization> Dda;
  const Dda* const dda = dynamic_cast<Dda*>(dd);
  if (dda) {
    return &dda->wrapped();
  }
#  endif
  return 0;
}
#endif // ifndef OPENDDS_SAFETY_PROFILE

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End STRUCT: flightAuthorization */

/* End MODULE: UATM */


/* Begin MODULE: UATM */



/* Begin TYPEDEF: ArrayString */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> const XTypes::TypeIdentifier& getMinimalTypeIdentifier<UATM_ArrayString_xtag>()
{
  static XTypes::TypeIdentifier ti;
  ACE_GUARD_RETURN(ACE_Thread_Mutex, guard, TheServiceParticipant->get_static_xtypes_lock(), ti);
  if (ti.kind() == XTypes::TK_NONE) {
    ti = XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(126, 198, 253, 33, 84, 187, 219, 157, 152, 51, 230, 44, 169, 26));
  }
  return ti;
}

template<> const XTypes::TypeMap& getMinimalTypeMap<UATM_ArrayString_xtag>()
{
  return OPENDDS_IDL_FILE_SPECIFIC(get_minimal_type_map, 0)();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> void set_default( ::UATM::ArrayString_forany& arr)
{
  ACE_UNUSED_ARG(arr);
  for (CORBA::ULong i0 = 0; i0 < 2; ++i0) {
    arr[i0] = "";
  }
}

void serialized_size(const Encoding& encoding, size_t& size, const  ::UATM::ArrayString_forany& arr)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(arr);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
  for (CORBA::ULong i0 = 0; i0 < 2; ++i0) {
    primitive_serialized_size_ulong(encoding, size);
    size += ACE_OS::strlen(arr[i0].in()) + 1;
  }
}

bool operator<<(Serializer& strm, const  ::UATM::ArrayString_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
serialized_size(encoding, total_size, arr);if (!strm.write_delimiter(total_size)) {  return false;}  }
  for (CORBA::ULong i0 = 0; i0 < 2; ++i0) {
    if (!(strm << arr[i0])) {
      return false;
    }
  }
  return true;
}

bool operator>>(Serializer& strm,  ::UATM::ArrayString_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  bool discard_flag = false;
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_arr = strm.rpos() + total_size;
  for (CORBA::ULong i0 = 0; i0 < 2; ++i0) {
    if (!(strm >> ACE_InputCDR::to_string(arr[i0].out(), 10))) {
      if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
        strm.set_construction_status(Serializer::ElementConstructionFailure);
        strm.skip(end_of_arr - strm.rpos());
        return false;
      } else {
        strm.set_construction_status(Serializer::ConstructionSuccessful);
        discard_flag = true;
      }
    }
  }
  if (discard_flag) {
    strm.set_construction_status(Serializer::ElementConstructionFailure);
    return false;
  }
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser,  ::UATM::ArrayString_forany*)
{
  ACE_UNUSED_ARG(ser);
  const Encoding& encoding = ser.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!ser.read_delimiter(total_size)) {
      return false;
    }
  }
  for (ACE_CDR::ULong i = 0; i < 2; ++i) {
    ACE_CDR::ULong strlength;
    if (!(ser >> strlength && ser.skip(strlength))) return false;
  }
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif // ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace XTypes {

#ifndef OPENDDS_SAFETY_PROFILE
#if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
template <>
class DynamicDataAdapterImpl< ::UATM::ArrayString, UATM_ArrayString_dda_tag > : public DynamicDataAdapter_T< ::UATM::ArrayString> {
public:
  DynamicDataAdapterImpl(DDS::DynamicType_ptr type,  ::UATM::ArrayString& value)
    : DynamicDataAdapter_T< ::UATM::ArrayString>(type, value)
  {
  }

  DynamicDataAdapterImpl(DDS::DynamicType_ptr type, const  ::UATM::ArrayString& value)
    : DynamicDataAdapter_T< ::UATM::ArrayString>(type, value)
  {
  }

  DDS::ReturnCode_t clear_all_values()
  {
    const DDS::ReturnCode_t rc = assert_mutable("DynamicDataAdapter::clear_all_values");
    if (rc == DDS::RETCODE_OK) {
      OpenDDS::DCPS::set_default(value_);
    }
    return rc;
  }

  DDS::UInt32 get_item_count()
  {
    return 2;
  }

  bool serialized_size(const OpenDDS::DCPS::Encoding& enc, size_t& size, OpenDDS::DCPS::Sample::Extent ext) const
  {
    ACE_UNUSED_ARG(ext);
    OpenDDS::DCPS::serialized_size(enc, size,  ::UATM::ArrayString_forany(value_));
    return true;
  }

  bool serialize(OpenDDS::DCPS::Serializer& ser, OpenDDS::DCPS::Sample::Extent ext) const
  {
    ACE_UNUSED_ARG(ext);
    using namespace OpenDDS::DCPS;
    return ser <<  ::UATM::ArrayString_forany(value_);
  }

protected:
  DDS::ReturnCode_t get_raw_value(const char* method, void* dest, DDS::TypeKind tk, DDS::MemberId id)
  {
    const DDS::ReturnCode_t rc = check_index(method, id, 2);
    if (rc != DDS::RETCODE_OK) {
      return rc;
    }
    return get_s8_raw_value(method, dest, tk, (&value_[0])[id], id);
  }

  DDS::ReturnCode_t set_raw_value(const char* method, DDS::MemberId id, const void* source, DDS::TypeKind tk)
  {
    DDS::ReturnCode_t rc = assert_mutable(method);
    if (rc != DDS::RETCODE_OK) {
      return rc;
    }
    rc = check_index(method, id, 2);
    if (rc != DDS::RETCODE_OK) {
      return rc;
    }
    return set_s8_raw_value(method, (&value_[0])[id].inout(), id, source, tk);
  }
};

#endif // if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER

template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::ArrayString, UATM_ArrayString_dda_tag>(DDS::DynamicType_ptr type, const  ::UATM::ArrayString& value)
{
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  if (type) {
    return new DynamicDataAdapterImpl< ::UATM::ArrayString, UATM_ArrayString_dda_tag>(type, value);
  }
#  else
  ACE_UNUSED_ARG(type);
  ACE_UNUSED_ARG(value);
#  endif
  return 0;
}

template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::ArrayString, UATM_ArrayString_dda_tag>(DDS::DynamicType_ptr type,  ::UATM::ArrayString& value)
{
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  if (type) {
    return new DynamicDataAdapterImpl< ::UATM::ArrayString, UATM_ArrayString_dda_tag>(type, value);
  }
#  else
  ACE_UNUSED_ARG(type);
  ACE_UNUSED_ARG(value);
#  endif
  return 0;
}

template <>
const  ::UATM::ArrayString* get_dynamic_data_adapter_value< ::UATM::ArrayString, UATM_ArrayString_dda_tag>(DDS::DynamicData_ptr dd)
{
  ACE_UNUSED_ARG(dd);
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  typedef DynamicDataAdapterImpl< ::UATM::ArrayString, UATM_ArrayString_dda_tag> Dda;
  const Dda* const dda = dynamic_cast<Dda*>(dd);
  if (dda) {
    return &dda->wrapped();
  }
#  endif
  return 0;
}
#endif // ifndef OPENDDS_SAFETY_PROFILE

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End TYPEDEF: ArrayString */

/* End MODULE: UATM */


/* Begin MODULE: UATM */



/* Begin STRUCT: flightChanceRec */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> const XTypes::TypeIdentifier& getMinimalTypeIdentifier<UATM_flightChanceRec_xtag>()
{
  static XTypes::TypeIdentifier ti;
  ACE_GUARD_RETURN(ACE_Thread_Mutex, guard, TheServiceParticipant->get_static_xtypes_lock(), ti);
  if (ti.kind() == XTypes::TK_NONE) {
    ti = XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(170, 173, 17, 67, 101, 79, 115, 232, 218, 249, 177, 238, 223, 12));
  }
  return ti;
}

template<> const XTypes::TypeMap& getMinimalTypeMap<UATM_flightChanceRec_xtag>()
{
  return OPENDDS_IDL_FILE_SPECIFIC(get_minimal_type_map, 0)();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool vread(OpenDDS::DCPS::ValueReader& value_reader,  ::UATM::flightChanceRec& value)
{
  ACE_UNUSED_ARG(value_reader);
  ACE_UNUSED_ARG(value);
  static const ListMemberHelper::Pair pairs[] = {{"recommendation_id",0},{"flight_id",1},{"chance_type",2},{"reason",3},{"recommended_by",4},{"recommendation_time",5},{0,0}};
  ListMemberHelper helper(pairs);
  if (!value_reader.begin_struct(OpenDDS::DCPS::APPENDABLE)) return false;
  XTypes::MemberId member_id;
  while (value_reader.members_remaining()) {
    if (!value_reader.begin_struct_member(member_id, helper)) return false;
    switch (member_id) {
    case 0: {
      if (!value_reader.read_int32(value.recommendation_id)) return false;
      break;
    }
    case 1: {
      if (!value_reader.read_int32(value.flight_id)) return false;
      break;
    }
    case 2: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.chance_type = x.c_str();
      }
      break;
    }
    case 3: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.reason = x.c_str();
      }
      break;
    }
    case 4: {
      if (!value_reader.begin_array(XTypes::TK_STRING8)) return false;
      for (unsigned int i = 0; i != 2; ++i) {
        if (!value_reader.begin_element()) return false;
        {
          String x;
          if (!value_reader.read_string(x)) return false;
          value.recommended_by[i] = x.c_str();
        }
        if (!value_reader.end_element()) return false;
      }
      if (!value_reader.end_array()) return false;
      break;
    }
    case 5: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.recommendation_time = x.c_str();
      }
      break;
    }
    }
    if (!value_reader.end_struct_member()) return false;
  }
  if (!value_reader.end_struct()) return false;
  return true;
}

bool vread(OpenDDS::DCPS::ValueReader& value_reader, const NestedKeyOnly< ::UATM::flightChanceRec>& value)
{
  ACE_UNUSED_ARG(value_reader);
  ACE_UNUSED_ARG(value);
  static const ListMemberHelper::Pair pairs[] = {{"recommendation_id",0},{"flight_id",1},{"chance_type",2},{"reason",3},{"recommended_by",4},{"recommendation_time",5},{0,0}};
  ListMemberHelper helper(pairs);
  if (!value_reader.begin_struct(OpenDDS::DCPS::APPENDABLE)) return false;
  XTypes::MemberId member_id;
  while (value_reader.members_remaining()) {
    if (!value_reader.begin_struct_member(member_id, helper)) return false;
    switch (member_id) {
    case 0: {
      if (!value_reader.read_int32(value.value.recommendation_id)) return false;
      break;
    }
    case 1: {
      if (!value_reader.read_int32(value.value.flight_id)) return false;
      break;
    }
    case 2: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.value.chance_type = x.c_str();
      }
      break;
    }
    case 3: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.value.reason = x.c_str();
      }
      break;
    }
    case 4: {
      if (!value_reader.begin_array(XTypes::TK_STRING8)) return false;
      for (unsigned int i = 0; i != 2; ++i) {
        if (!value_reader.begin_element()) return false;
        {
          String x;
          if (!value_reader.read_string(x)) return false;
          value.value.recommended_by[i] = x.c_str();
        }
        if (!value_reader.end_element()) return false;
      }
      if (!value_reader.end_array()) return false;
      break;
    }
    case 5: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.value.recommendation_time = x.c_str();
      }
      break;
    }
    }
    if (!value_reader.end_struct_member()) return false;
  }
  if (!value_reader.end_struct()) return false;
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const  ::UATM::flightChanceRec& value)
{
  ACE_UNUSED_ARG(value_writer);
  ACE_UNUSED_ARG(value);
  if (!value_writer.begin_struct(OpenDDS::DCPS::APPENDABLE)) {
    return false;
  }
  {
    MemberParam param(0, false, "recommendation_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.recommendation_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(1, false, "flight_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.flight_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(2, false, "chance_type", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.chance_type)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(3, false, "reason", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.reason)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(4, false, "recommended_by", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.begin_array(XTypes::TK_STRING8)) {
        return false;
      }
      for (::CORBA::ULong i = 0; i != 2; ++i) {
        if (!value_writer.begin_element(static_cast<ACE_CDR::ULong>(i))) {
          return false;
        }
        if (!value_writer.write_string(value.recommended_by[i])) {
          return false;
        }
        if (!value_writer.end_element()) {
          return false;
        }
      }
      if (!value_writer.end_array()) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(5, false, "recommendation_time", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.recommendation_time)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  return value_writer.end_struct();
}

bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const NestedKeyOnly<const  ::UATM::flightChanceRec>& value)
{
  ACE_UNUSED_ARG(value_writer);
  ACE_UNUSED_ARG(value);
  if (!value_writer.begin_struct(OpenDDS::DCPS::APPENDABLE)) {
    return false;
  }
  {
    MemberParam param(0, false, "recommendation_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.value.recommendation_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(1, false, "flight_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.value.flight_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(2, false, "chance_type", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.value.chance_type)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(3, false, "reason", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.value.reason)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(4, false, "recommended_by", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.begin_array(XTypes::TK_STRING8)) {
        return false;
      }
      for (::CORBA::ULong i = 0; i != 2; ++i) {
        if (!value_writer.begin_element(static_cast<ACE_CDR::ULong>(i))) {
          return false;
        }
        if (!value_writer.write_string(value.value.recommended_by[i])) {
          return false;
        }
        if (!value_writer.end_element()) {
          return false;
        }
      }
      if (!value_writer.end_array()) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(5, false, "recommendation_time", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.value.recommendation_time)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  return value_writer.end_struct();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> void set_default( ::UATM::flightChanceRec& stru)
{
  ACE_UNUSED_ARG(stru);
  stru.recommendation_id = 0;
  stru.flight_id = 0;
  stru.chance_type = "";
  stru.reason = "";
   ::UATM::ArrayString_forany stru_recommended_by_temp(const_cast< ::UATM::ArrayString_slice*>(stru.recommended_by));
  set_default(stru_recommended_by_temp);
  stru.recommendation_time = "";
}

void serialized_size(const Encoding& encoding, size_t& size, const ::UATM::flightChanceRec& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
   ::UATM::ArrayString_forany stru_recommended_9by_forany(const_cast< ::UATM::ArrayString_slice*>(stru.recommended_by));
  primitive_serialized_size(encoding, size, stru.recommendation_id);
  primitive_serialized_size(encoding, size, stru.flight_id);
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.chance_type.in()) + 1;
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.reason.in()) + 1;
  serialized_size(encoding, size, stru_recommended_9by_forany);
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.recommendation_time.in()) + 1;
}

bool operator<<(Serializer& strm, const ::UATM::flightChanceRec& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
   ::UATM::ArrayString_forany stru_recommended_9by_forany(const_cast< ::UATM::ArrayString_slice*>(stru.recommended_by));
  return (strm << stru.recommendation_id)
    && (strm << stru.flight_id)
    && (strm << ACE_OutputCDR::from_string(stru.chance_type.in(), 20))
    && (strm << ACE_OutputCDR::from_string(stru.reason.in(), 20))
    && (strm << stru_recommended_9by_forany)
    && (strm << ACE_OutputCDR::from_string(stru.recommendation_time.in(), 20));
}

bool operator>>(Serializer& strm,  ::UATM::flightChanceRec& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  bool reached_end_of_struct = false;
  ACE_UNUSED_ARG(reached_end_of_struct);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

   ::UATM::ArrayString_forany stru_recommended_9by_forany(const_cast< ::UATM::ArrayString_slice*>(stru.recommended_by));
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.recommendation_id = 0;
  } else {
    if (!(strm >> stru.recommendation_id)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.flight_id = 0;
  } else {
    if (!(strm >> stru.flight_id)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.chance_type = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.chance_type.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.reason = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.reason.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
     ::UATM::ArrayString_forany stru_recommended_by_temp(const_cast< ::UATM::ArrayString_slice*>(stru.recommended_by));
    set_default(stru_recommended_by_temp);
  } else {
    if (!(strm >> stru_recommended_9by_forany)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.recommendation_time = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.recommendation_time.out(), 20))) {
      return false;
    }
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const ::UATM::flightChanceRec>& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
   ::UATM::ArrayString_forany stru_value_recommended_9by_forany(const_cast< ::UATM::ArrayString_slice*>(stru.value.recommended_by));
  primitive_serialized_size(encoding, size, stru.value.recommendation_id);
  primitive_serialized_size(encoding, size, stru.value.flight_id);
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.value.chance_type.in()) + 1;
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.value.reason.in()) + 1;
  serialized_size(encoding, size, stru_value_recommended_9by_forany);
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.value.recommendation_time.in()) + 1;
}

bool operator<<(Serializer& strm, const NestedKeyOnly<const ::UATM::flightChanceRec>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
   ::UATM::ArrayString_forany stru_value_recommended_9by_forany(const_cast< ::UATM::ArrayString_slice*>(stru.value.recommended_by));
  return (strm << stru.value.recommendation_id)
    && (strm << stru.value.flight_id)
    && (strm << ACE_OutputCDR::from_string(stru.value.chance_type.in(), 20))
    && (strm << ACE_OutputCDR::from_string(stru.value.reason.in(), 20))
    && (strm << stru_value_recommended_9by_forany)
    && (strm << ACE_OutputCDR::from_string(stru.value.recommendation_time.in(), 20));
}

bool operator>>(Serializer& strm, const NestedKeyOnly< ::UATM::flightChanceRec>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  bool reached_end_of_struct = false;
  ACE_UNUSED_ARG(reached_end_of_struct);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

   ::UATM::ArrayString_forany stru_value_recommended_9by_forany(const_cast< ::UATM::ArrayString_slice*>(stru.value.recommended_by));
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.recommendation_id = 0;
  } else {
    if (!(strm >> stru.value.recommendation_id)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.flight_id = 0;
  } else {
    if (!(strm >> stru.value.flight_id)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.chance_type = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.value.chance_type.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.reason = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.value.reason.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
     ::UATM::ArrayString_forany stru_value_recommended_by_temp(const_cast< ::UATM::ArrayString_slice*>(stru.value.recommended_by));
    set_default(stru_value_recommended_by_temp);
  } else {
    if (!(strm >> stru_value_recommended_9by_forany)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.recommendation_time = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.value.recommendation_time.out(), 20))) {
      return false;
    }
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

void serialized_size(const Encoding& encoding, size_t& size, const KeyOnly<const  ::UATM::flightChanceRec> stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  switch (encoding.xcdr_version()) {
  case Encoding::XCDR_VERSION_1:
    {
    primitive_serialized_size(encoding, size, stru.value.recommendation_id);
    break;
    }
  case Encoding::XCDR_VERSION_2:
    {
    primitive_serialized_size(encoding, size, stru.value.recommendation_id);
    break;
    }
  case Encoding::XCDR_VERSION_NONE:
    {
    primitive_serialized_size(encoding, size, stru.value.recommendation_id);
    break;
    }
  }
}

bool operator<<(Serializer& strm, KeyOnly<const  ::UATM::flightChanceRec> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.value.recommendation_id);
}

bool operator>>(Serializer& strm, KeyOnly< ::UATM::flightChanceRec> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.value.recommendation_id);
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace DCPS {
bool DDSTraits< ::UATM::flightChanceRec>::is_key(const char* field)
{
  ACE_UNUSED_ARG(field);
  if (!ACE_OS::strcmp(field, "recommendation_id")) {
    return true;
  }
  return false;
}
} // namespace DCPS
} // namespace OpenDDS
OPENDDS_END_VERSIONED_NAMESPACE_DECL

namespace UATM {
::DDS::DataWriter_ptr flightChanceRecTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<flightChanceRec> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}

::DDS::DataReader_ptr flightChanceRecTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<flightChanceRec> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}

#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr flightChanceRecTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<flightChanceRec> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<flightChanceRec, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */

#ifndef OPENDDS_SAFETY_PROFILE
flightChanceRec* flightChanceRecTypeSupportImpl::create_sample(::DDS::DynamicData_ptr src)
{
  flightChanceRec* value = new flightChanceRec;
  const ::DDS::ReturnCode_t rc = OpenDDS::DCPS::TypeSupportImpl_T<flightChanceRec>::create_sample_rc(*value, src);
  if (rc != ::DDS::RETCODE_OK && OpenDDS::DCPS::log_level >= OpenDDS::DCPS::LogLevel::Warning) {
    ACE_ERROR((LM_WARNING, "(%P|%t) WARNING: flightChanceRecTypeSupportImpl::create_sample: "
      "create_sample_rc failed: %C\n", OpenDDS::DCPS::retcode_to_string(rc)));
  }
  return value;
}
#endif

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& flightChanceRecTypeSupportImpl::getMetaStructForType() const
{
  return OpenDDS::DCPS::getMetaStruct<flightChanceRec>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */

namespace {
  OpenDDS::DCPS::TypeSupportInitializer<flightChanceRecTypeSupportImpl> ts_init_UATM_flightChanceRec;
}

const OpenDDS::XTypes::TypeIdentifier& flightChanceRecTypeSupportImpl::getMinimalTypeIdentifier() const
{
  return OpenDDS::DCPS::getMinimalTypeIdentifier<OpenDDS::DCPS::UATM_flightChanceRec_xtag>();
}

const OpenDDS::XTypes::TypeMap& flightChanceRecTypeSupportImpl::getMinimalTypeMap() const
{
  return OpenDDS::DCPS::getMinimalTypeMap<OpenDDS::DCPS::UATM_flightChanceRec_xtag>();
}

const OpenDDS::XTypes::TypeIdentifier& flightChanceRecTypeSupportImpl::getCompleteTypeIdentifier() const
{
  static OpenDDS::XTypes::TypeIdentifier ti;
  return ti;
}

const OpenDDS::XTypes::TypeMap& flightChanceRecTypeSupportImpl::getCompleteTypeMap() const
{
  static OpenDDS::XTypes::TypeMap tm;
  return tm;
}

::DDS::ReturnCode_t flightChanceRecTypeSupportImpl::encode_to_string(const flightChanceRec& in, CORBA::String_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
#if OPENDDS_HAS_JSON_VALUE_WRITER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    rapidjson::StringBuffer buffer;
    rapidjson::Writer<rapidjson::StringBuffer> writer(buffer);
    OpenDDS::DCPS::JsonValueWriter<rapidjson::Writer<rapidjson::StringBuffer> > jvw(writer);
    if (!vwrite(jvw, in)) {
      return ::DDS::RETCODE_ERROR;
    }
    out = buffer.GetString();
    return ::DDS::RETCODE_OK;
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  out = "";
  return ::DDS::RETCODE_UNSUPPORTED;
}

::DDS::ReturnCode_t flightChanceRecTypeSupportImpl::encode_to_bytes(const flightChanceRec& in, ::DDS::OctetSeq_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
#if OPENDDS_HAS_JSON_VALUE_WRITER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    CORBA::String_var buffer;
    const ::DDS::ReturnCode_t ret = encode_to_string(in, buffer, format);
    if (ret == ::DDS::RETCODE_OK) {
      const ::DDS::UInt32 len = static_cast< ::DDS::UInt32>(std::strlen(buffer));
      out = new ::DDS::OctetSeq(len);
      out->length(len);
      std::memcpy(out->get_buffer(), buffer, len);
      return ::DDS::RETCODE_OK;
    } else {
      out = new ::DDS::OctetSeq();
      return ret;
    }
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  out = new ::DDS::OctetSeq();
  return ::DDS::RETCODE_UNSUPPORTED;
}

::DDS::ReturnCode_t flightChanceRecTypeSupportImpl::decode_from_string(const char* in, flightChanceRec_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
  out = new flightChanceRec;
  OpenDDS::DCPS::set_default(*out);
#if OPENDDS_HAS_JSON_VALUE_READER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    rapidjson::StringStream buffer(in);
    OpenDDS::DCPS::JsonValueReader<> jvr(buffer);
    return vread(jvr, *out) ? ::DDS::RETCODE_OK : ::DDS::RETCODE_ERROR;
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  return ::DDS::RETCODE_UNSUPPORTED;
}

::DDS::ReturnCode_t flightChanceRecTypeSupportImpl::decode_from_bytes(const ::DDS::OctetSeq& in, flightChanceRec_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
#if OPENDDS_HAS_JSON_VALUE_READER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    return decode_from_string(reinterpret_cast<const char*>(in.get_buffer()), out, format);
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  out = new flightChanceRec();
  return ::DDS::RETCODE_UNSUPPORTED;
}

flightChanceRecTypeSupport::_ptr_type flightChanceRecTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl< ::UATM::flightChanceRec> : MetaStruct {
  typedef  ::UATM::flightChanceRec T;

#ifndef OPENDDS_NO_MULTI_TOPIC
  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 1; }

#endif /* OPENDDS_NO_MULTI_TOPIC */

  Value getValue(const void* stru, const char* field) const
  {
    const ::UATM::flightChanceRec& typed = *static_cast<const ::UATM::flightChanceRec*>(stru);
    ACE_UNUSED_ARG(typed);
    if (std::strcmp(field, "recommendation_id") == 0) {
      return typed.recommendation_id;
    }
    if (std::strcmp(field, "flight_id") == 0) {
      return typed.flight_id;
    }
    if (std::strcmp(field, "chance_type") == 0) {
      return typed.chance_type.in();
    }
    if (std::strcmp(field, "reason") == 0) {
      return typed.reason.in();
    }
    if (std::strcmp(field, "recommendation_time") == 0) {
      return typed.recommendation_time.in();
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::flightChanceRec)");
  }

  Value getValue(Serializer& strm, const char* field, TypeSupportImpl* = 0) const
  {
    const Encoding& encoding = strm.encoding();
    ACE_UNUSED_ARG(encoding);
    size_t total_size = 0;
    if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
      if (!strm.read_delimiter(total_size)) {
        throw std::runtime_error("Unable to reader delimiter in getValue");
      }
    }
    std::string base_field = field;
    const size_t index = base_field.find('.');
    std::string subfield;
    if (index != std::string::npos) {
      subfield = base_field.substr(index + 1);
      base_field = base_field.substr(0, index);
    }
    if (base_field == "recommendation_id") {
      ACE_CDR::Long val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'recommendation_id' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'recommendation_id' could not be skipped");
      }
    }
    if (base_field == "flight_id") {
      ACE_CDR::Long val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'flight_id' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'flight_id' could not be skipped");
      }
    }
    if (base_field == "chance_type") {
      TAO::String_Manager val;
      if (!(strm >> val.out())) {
        throw std::runtime_error("Field 'chance_type' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(strm >> len)) {
        throw std::runtime_error("String 'chance_type' length could not be deserialized");
      }
      if (!strm.skip(len)) {
        throw std::runtime_error("String 'chance_type' contents could not be skipped");
      }
    }
    if (base_field == "reason") {
      TAO::String_Manager val;
      if (!(strm >> val.out())) {
        throw std::runtime_error("Field 'reason' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(strm >> len)) {
        throw std::runtime_error("String 'reason' length could not be deserialized");
      }
      if (!strm.skip(len)) {
        throw std::runtime_error("String 'reason' contents could not be skipped");
      }
    }
    if (!gen_skip_over(strm, static_cast< ::UATM::ArrayString_forany*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (base_field == "recommendation_time") {
      TAO::String_Manager val;
      if (!(strm >> val.out())) {
        throw std::runtime_error("Field 'recommendation_time' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(strm >> len)) {
        throw std::runtime_error("String 'recommendation_time' length could not be deserialized");
      }
      if (!strm.skip(len)) {
        throw std::runtime_error("String 'recommendation_time' contents could not be skipped");
      }
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Did not find field in getValue");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "recommendation_id") == 0) {
      return make_field_cmp(&T::recommendation_id, next);
    }
    if (std::strcmp(field, "flight_id") == 0) {
      return make_field_cmp(&T::flight_id, next);
    }
    if (std::strcmp(field, "chance_type") == 0) {
      return make_field_cmp(&T::chance_type, next);
    }
    if (std::strcmp(field, "reason") == 0) {
      return make_field_cmp(&T::reason, next);
    }
    if (std::strcmp(field, "recommendation_time") == 0) {
      return make_field_cmp(&T::recommendation_time, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::flightChanceRec)");
  }

#ifndef OPENDDS_NO_MULTI_TOPIC
  const char** getFieldNames() const
  {
    static const char* names[] = {"recommendation_id", "flight_id", "chance_type", "reason", "recommended_by", "recommendation_time", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "recommendation_id") == 0) {
      return &static_cast<const T*>(stru)->recommendation_id;
    }
    if (std::strcmp(field, "flight_id") == 0) {
      return &static_cast<const T*>(stru)->flight_id;
    }
    if (std::strcmp(field, "chance_type") == 0) {
      return &static_cast<const T*>(stru)->chance_type;
    }
    if (std::strcmp(field, "reason") == 0) {
      return &static_cast<const T*>(stru)->reason;
    }
    if (std::strcmp(field, "recommended_by") == 0) {
      return &static_cast<const T*>(stru)->recommended_by;
    }
    if (std::strcmp(field, "recommendation_time") == 0) {
      return &static_cast<const T*>(stru)->recommendation_time;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::flightChanceRec)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "recommendation_id") == 0) {
      static_cast<T*>(lhs)->recommendation_id = *static_cast<const  ::CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "flight_id") == 0) {
      static_cast<T*>(lhs)->flight_id = *static_cast<const  ::CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "chance_type") == 0) {
      static_cast<T*>(lhs)->chance_type = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "reason") == 0) {
      static_cast<T*>(lhs)->reason = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "recommended_by") == 0) {
       ::UATM::ArrayString* lhsArr = &static_cast<T*>(lhs)->recommended_by;
      const  ::UATM::ArrayString* rhsArr = static_cast<const  ::UATM::ArrayString*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      for (CORBA::ULong i0 = 0; i0 < 2; ++i0) {
        (*lhsArr)[i0] = (*rhsArr)[i0];
      }
      return;
    }
    if (std::strcmp(field, "recommendation_time") == 0) {
      static_cast<T*>(lhs)->recommendation_time = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::flightChanceRec)");
  }

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "recommendation_id") == 0) {
      return static_cast<const T*>(lhs)->recommendation_id == static_cast<const T*>(rhs)->recommendation_id;
    }
    if (std::strcmp(field, "flight_id") == 0) {
      return static_cast<const T*>(lhs)->flight_id == static_cast<const T*>(rhs)->flight_id;
    }
    if (std::strcmp(field, "chance_type") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->chance_type.in(), static_cast<const T*>(rhs)->chance_type.in());
    }
    if (std::strcmp(field, "reason") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->reason.in(), static_cast<const T*>(rhs)->reason.in());
    }
    if (std::strcmp(field, "recommendation_time") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->recommendation_time.in(), static_cast<const T*>(rhs)->recommendation_time.in());
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::flightChanceRec)");
  }
#endif /* OPENDDS_NO_MULTI_TOPIC */

};

template<>
const MetaStruct& getMetaStruct< ::UATM::flightChanceRec>()
{
  static MetaStructImpl< ::UATM::flightChanceRec> msi;
  return msi;
}

bool gen_skip_over(Serializer& ser,  ::UATM::flightChanceRec*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl< ::UATM::flightChanceRec>().getValue(ser, "");
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif // ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace XTypes {

#ifndef OPENDDS_SAFETY_PROFILE
#if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
template <>
class DynamicDataAdapterImpl< ::UATM::flightChanceRec,  ::UATM::flightChanceRec > : public DynamicDataAdapter_T< ::UATM::flightChanceRec> {
public:
  DynamicDataAdapterImpl(DDS::DynamicType_ptr type,  ::UATM::flightChanceRec& value)
    : DynamicDataAdapter_T< ::UATM::flightChanceRec>(type, value)
  {
  }

  DynamicDataAdapterImpl(DDS::DynamicType_ptr type, const  ::UATM::flightChanceRec& value)
    : DynamicDataAdapter_T< ::UATM::flightChanceRec>(type, value)
  {
  }

  DDS::ReturnCode_t clear_all_values()
  {
    const DDS::ReturnCode_t rc = assert_mutable("DynamicDataAdapter::clear_all_values");
    if (rc == DDS::RETCODE_OK) {
      OpenDDS::DCPS::set_default(value_);
    }
    return rc;
  }

  DDS::UInt32 get_item_count()
  {
    return 6;
  }

  bool serialized_size(const OpenDDS::DCPS::Encoding& enc, size_t& size, OpenDDS::DCPS::Sample::Extent ext) const
  {
    using namespace OpenDDS::DCPS;
    if (ext == Sample::Full) {
      DCPS::serialized_size(enc, size, value_);
    } else if (ext == Sample::NestedKeyOnly) {
      const NestedKeyOnly<const  ::UATM::flightChanceRec> nested_key_only(value_);
      DCPS::serialized_size(enc, size, nested_key_only);
    } else {
      return false; // Non-topic type
    }
    return true;
  }

  bool serialize(OpenDDS::DCPS::Serializer& ser, OpenDDS::DCPS::Sample::Extent ext) const
  {
    using namespace OpenDDS::DCPS;
    if (ext == Sample::Full) {
      return ser << value_;
    } else if (ext == Sample::NestedKeyOnly) {
      NestedKeyOnly<const  ::UATM::flightChanceRec> nested_key_only(value_);
      return ser << nested_key_only;
    } else {
      return false; // Non-topic type
    }
  }

protected:
  DDS::ReturnCode_t get_raw_value(const char* method, void* dest, DDS::TypeKind tk, DDS::MemberId id)
  {
    switch (id) {
    case 0:
      {
        return get_simple_raw_value(method, dest, tk, value_.recommendation_id, id);
      }
    case 1:
      {
        return get_simple_raw_value(method, dest, tk, value_.flight_id, id);
      }
    case 2:
      {
        return get_s8_raw_value(method, dest, tk, value_.chance_type, id);
      }
    case 3:
      {
        return get_s8_raw_value(method, dest, tk, value_.reason, id);
      }
    case 4:
      {
        return get_complex_raw_value< ::UATM::ArrayString, UATM_ArrayString_dda_tag>(method, dest, tk, value_.recommended_by, id);
      }
    case 5:
      {
        return get_s8_raw_value(method, dest, tk, value_.recommendation_time, id);
      }
    default:
      return invalid_id(method, id);
    }
  }

  DDS::ReturnCode_t set_raw_value(const char* method, DDS::MemberId id, const void* source, DDS::TypeKind tk)
  {
    DDS::ReturnCode_t rc = assert_mutable(method);
    if (rc != DDS::RETCODE_OK) {
      return rc;
    }
    switch (id) {
    case 0:
      {
        return set_simple_raw_value(method, value_.recommendation_id, id, source, tk);
      }
    case 1:
      {
        return set_simple_raw_value(method, value_.flight_id, id, source, tk);
      }
    case 2:
      {
        return set_s8_raw_value(method, value_.chance_type.inout(), id, source, tk);
      }
    case 3:
      {
        return set_s8_raw_value(method, value_.reason.inout(), id, source, tk);
      }
    case 4:
      {
        return set_indirect_complex_raw_value< ::UATM::ArrayString, UATM_ArrayString_dda_tag>(method, value_.recommended_by, id, source, tk);
      }
    case 5:
      {
        return set_s8_raw_value(method, value_.recommendation_time.inout(), id, source, tk);
      }
    default:
      return invalid_id(method, id);
    }
  }
};

#endif // if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER

template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::flightChanceRec,  ::UATM::flightChanceRec>(DDS::DynamicType_ptr type, const  ::UATM::flightChanceRec& value)
{
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  if (type) {
    return new DynamicDataAdapterImpl< ::UATM::flightChanceRec,  ::UATM::flightChanceRec>(type, value);
  }
#  else
  ACE_UNUSED_ARG(type);
  ACE_UNUSED_ARG(value);
#  endif
  return 0;
}

template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::flightChanceRec,  ::UATM::flightChanceRec>(DDS::DynamicType_ptr type,  ::UATM::flightChanceRec& value)
{
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  if (type) {
    return new DynamicDataAdapterImpl< ::UATM::flightChanceRec,  ::UATM::flightChanceRec>(type, value);
  }
#  else
  ACE_UNUSED_ARG(type);
  ACE_UNUSED_ARG(value);
#  endif
  return 0;
}

template <>
const  ::UATM::flightChanceRec* get_dynamic_data_adapter_value< ::UATM::flightChanceRec,  ::UATM::flightChanceRec>(DDS::DynamicData_ptr dd)
{
  ACE_UNUSED_ARG(dd);
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  typedef DynamicDataAdapterImpl< ::UATM::flightChanceRec,  ::UATM::flightChanceRec> Dda;
  const Dda* const dda = dynamic_cast<Dda*>(dd);
  if (dda) {
    return &dda->wrapped();
  }
#  endif
  return 0;
}
#endif // ifndef OPENDDS_SAFETY_PROFILE

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End STRUCT: flightChanceRec */

/* End MODULE: UATM */


/* Begin MODULE: UATM */



/* Begin STRUCT: flightCoordination */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> const XTypes::TypeIdentifier& getMinimalTypeIdentifier<UATM_flightCoordination_xtag>()
{
  static XTypes::TypeIdentifier ti;
  ACE_GUARD_RETURN(ACE_Thread_Mutex, guard, TheServiceParticipant->get_static_xtypes_lock(), ti);
  if (ti.kind() == XTypes::TK_NONE) {
    ti = XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(59, 3, 164, 171, 221, 150, 161, 151, 229, 182, 14, 63, 71, 70));
  }
  return ti;
}

template<> const XTypes::TypeMap& getMinimalTypeMap<UATM_flightCoordination_xtag>()
{
  return OPENDDS_IDL_FILE_SPECIFIC(get_minimal_type_map, 0)();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool vread(OpenDDS::DCPS::ValueReader& value_reader,  ::UATM::flightCoordination& value)
{
  ACE_UNUSED_ARG(value_reader);
  ACE_UNUSED_ARG(value);
  static const ListMemberHelper::Pair pairs[] = {{"coordination_id",0},{"flight_id",1},{"involved_parties",2},{"coordination_details",3},{"recommendation_time",4},{0,0}};
  ListMemberHelper helper(pairs);
  if (!value_reader.begin_struct(OpenDDS::DCPS::APPENDABLE)) return false;
  XTypes::MemberId member_id;
  while (value_reader.members_remaining()) {
    if (!value_reader.begin_struct_member(member_id, helper)) return false;
    switch (member_id) {
    case 0: {
      if (!value_reader.read_int32(value.coordination_id)) return false;
      break;
    }
    case 1: {
      if (!value_reader.read_int32(value.flight_id)) return false;
      break;
    }
    case 2: {
      if (!value_reader.begin_array(XTypes::TK_STRING8)) return false;
      for (unsigned int i = 0; i != 2; ++i) {
        if (!value_reader.begin_element()) return false;
        {
          String x;
          if (!value_reader.read_string(x)) return false;
          value.involved_parties[i] = x.c_str();
        }
        if (!value_reader.end_element()) return false;
      }
      if (!value_reader.end_array()) return false;
      break;
    }
    case 3: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.coordination_details = x.c_str();
      }
      break;
    }
    case 4: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.recommendation_time = x.c_str();
      }
      break;
    }
    }
    if (!value_reader.end_struct_member()) return false;
  }
  if (!value_reader.end_struct()) return false;
  return true;
}

bool vread(OpenDDS::DCPS::ValueReader& value_reader, const NestedKeyOnly< ::UATM::flightCoordination>& value)
{
  ACE_UNUSED_ARG(value_reader);
  ACE_UNUSED_ARG(value);
  static const ListMemberHelper::Pair pairs[] = {{"coordination_id",0},{"flight_id",1},{"involved_parties",2},{"coordination_details",3},{"recommendation_time",4},{0,0}};
  ListMemberHelper helper(pairs);
  if (!value_reader.begin_struct(OpenDDS::DCPS::APPENDABLE)) return false;
  XTypes::MemberId member_id;
  while (value_reader.members_remaining()) {
    if (!value_reader.begin_struct_member(member_id, helper)) return false;
    switch (member_id) {
    case 0: {
      if (!value_reader.read_int32(value.value.coordination_id)) return false;
      break;
    }
    case 1: {
      if (!value_reader.read_int32(value.value.flight_id)) return false;
      break;
    }
    case 2: {
      if (!value_reader.begin_array(XTypes::TK_STRING8)) return false;
      for (unsigned int i = 0; i != 2; ++i) {
        if (!value_reader.begin_element()) return false;
        {
          String x;
          if (!value_reader.read_string(x)) return false;
          value.value.involved_parties[i] = x.c_str();
        }
        if (!value_reader.end_element()) return false;
      }
      if (!value_reader.end_array()) return false;
      break;
    }
    case 3: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.value.coordination_details = x.c_str();
      }
      break;
    }
    case 4: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.value.recommendation_time = x.c_str();
      }
      break;
    }
    }
    if (!value_reader.end_struct_member()) return false;
  }
  if (!value_reader.end_struct()) return false;
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const  ::UATM::flightCoordination& value)
{
  ACE_UNUSED_ARG(value_writer);
  ACE_UNUSED_ARG(value);
  if (!value_writer.begin_struct(OpenDDS::DCPS::APPENDABLE)) {
    return false;
  }
  {
    MemberParam param(0, false, "coordination_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.coordination_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(1, false, "flight_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.flight_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(2, false, "involved_parties", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.begin_array(XTypes::TK_STRING8)) {
        return false;
      }
      for (::CORBA::ULong i = 0; i != 2; ++i) {
        if (!value_writer.begin_element(static_cast<ACE_CDR::ULong>(i))) {
          return false;
        }
        if (!value_writer.write_string(value.involved_parties[i])) {
          return false;
        }
        if (!value_writer.end_element()) {
          return false;
        }
      }
      if (!value_writer.end_array()) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(3, false, "coordination_details", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.coordination_details)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(4, false, "recommendation_time", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.recommendation_time)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  return value_writer.end_struct();
}

bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const NestedKeyOnly<const  ::UATM::flightCoordination>& value)
{
  ACE_UNUSED_ARG(value_writer);
  ACE_UNUSED_ARG(value);
  if (!value_writer.begin_struct(OpenDDS::DCPS::APPENDABLE)) {
    return false;
  }
  {
    MemberParam param(0, false, "coordination_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.value.coordination_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(1, false, "flight_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.value.flight_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(2, false, "involved_parties", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.begin_array(XTypes::TK_STRING8)) {
        return false;
      }
      for (::CORBA::ULong i = 0; i != 2; ++i) {
        if (!value_writer.begin_element(static_cast<ACE_CDR::ULong>(i))) {
          return false;
        }
        if (!value_writer.write_string(value.value.involved_parties[i])) {
          return false;
        }
        if (!value_writer.end_element()) {
          return false;
        }
      }
      if (!value_writer.end_array()) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(3, false, "coordination_details", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.value.coordination_details)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(4, false, "recommendation_time", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.value.recommendation_time)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  return value_writer.end_struct();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> void set_default( ::UATM::flightCoordination& stru)
{
  ACE_UNUSED_ARG(stru);
  stru.coordination_id = 0;
  stru.flight_id = 0;
   ::UATM::ArrayString_forany stru_involved_parties_temp(const_cast< ::UATM::ArrayString_slice*>(stru.involved_parties));
  set_default(stru_involved_parties_temp);
  stru.coordination_details = "";
  stru.recommendation_time = "";
}

void serialized_size(const Encoding& encoding, size_t& size, const ::UATM::flightCoordination& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
   ::UATM::ArrayString_forany stru_involved_9parties_forany(const_cast< ::UATM::ArrayString_slice*>(stru.involved_parties));
  primitive_serialized_size(encoding, size, stru.coordination_id);
  primitive_serialized_size(encoding, size, stru.flight_id);
  serialized_size(encoding, size, stru_involved_9parties_forany);
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.coordination_details.in()) + 1;
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.recommendation_time.in()) + 1;
}

bool operator<<(Serializer& strm, const ::UATM::flightCoordination& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
   ::UATM::ArrayString_forany stru_involved_9parties_forany(const_cast< ::UATM::ArrayString_slice*>(stru.involved_parties));
  return (strm << stru.coordination_id)
    && (strm << stru.flight_id)
    && (strm << stru_involved_9parties_forany)
    && (strm << ACE_OutputCDR::from_string(stru.coordination_details.in(), 20))
    && (strm << ACE_OutputCDR::from_string(stru.recommendation_time.in(), 20));
}

bool operator>>(Serializer& strm,  ::UATM::flightCoordination& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  bool reached_end_of_struct = false;
  ACE_UNUSED_ARG(reached_end_of_struct);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

   ::UATM::ArrayString_forany stru_involved_9parties_forany(const_cast< ::UATM::ArrayString_slice*>(stru.involved_parties));
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.coordination_id = 0;
  } else {
    if (!(strm >> stru.coordination_id)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.flight_id = 0;
  } else {
    if (!(strm >> stru.flight_id)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
     ::UATM::ArrayString_forany stru_involved_parties_temp(const_cast< ::UATM::ArrayString_slice*>(stru.involved_parties));
    set_default(stru_involved_parties_temp);
  } else {
    if (!(strm >> stru_involved_9parties_forany)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.coordination_details = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.coordination_details.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.recommendation_time = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.recommendation_time.out(), 20))) {
      return false;
    }
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const ::UATM::flightCoordination>& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
   ::UATM::ArrayString_forany stru_value_involved_9parties_forany(const_cast< ::UATM::ArrayString_slice*>(stru.value.involved_parties));
  primitive_serialized_size(encoding, size, stru.value.coordination_id);
  primitive_serialized_size(encoding, size, stru.value.flight_id);
  serialized_size(encoding, size, stru_value_involved_9parties_forany);
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.value.coordination_details.in()) + 1;
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.value.recommendation_time.in()) + 1;
}

bool operator<<(Serializer& strm, const NestedKeyOnly<const ::UATM::flightCoordination>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
   ::UATM::ArrayString_forany stru_value_involved_9parties_forany(const_cast< ::UATM::ArrayString_slice*>(stru.value.involved_parties));
  return (strm << stru.value.coordination_id)
    && (strm << stru.value.flight_id)
    && (strm << stru_value_involved_9parties_forany)
    && (strm << ACE_OutputCDR::from_string(stru.value.coordination_details.in(), 20))
    && (strm << ACE_OutputCDR::from_string(stru.value.recommendation_time.in(), 20));
}

bool operator>>(Serializer& strm, const NestedKeyOnly< ::UATM::flightCoordination>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  bool reached_end_of_struct = false;
  ACE_UNUSED_ARG(reached_end_of_struct);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

   ::UATM::ArrayString_forany stru_value_involved_9parties_forany(const_cast< ::UATM::ArrayString_slice*>(stru.value.involved_parties));
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.coordination_id = 0;
  } else {
    if (!(strm >> stru.value.coordination_id)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.flight_id = 0;
  } else {
    if (!(strm >> stru.value.flight_id)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
     ::UATM::ArrayString_forany stru_value_involved_parties_temp(const_cast< ::UATM::ArrayString_slice*>(stru.value.involved_parties));
    set_default(stru_value_involved_parties_temp);
  } else {
    if (!(strm >> stru_value_involved_9parties_forany)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.coordination_details = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.value.coordination_details.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.recommendation_time = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.value.recommendation_time.out(), 20))) {
      return false;
    }
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

void serialized_size(const Encoding& encoding, size_t& size, const KeyOnly<const  ::UATM::flightCoordination> stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  switch (encoding.xcdr_version()) {
  case Encoding::XCDR_VERSION_1:
    {
    primitive_serialized_size(encoding, size, stru.value.coordination_id);
    break;
    }
  case Encoding::XCDR_VERSION_2:
    {
    primitive_serialized_size(encoding, size, stru.value.coordination_id);
    break;
    }
  case Encoding::XCDR_VERSION_NONE:
    {
    primitive_serialized_size(encoding, size, stru.value.coordination_id);
    break;
    }
  }
}

bool operator<<(Serializer& strm, KeyOnly<const  ::UATM::flightCoordination> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.value.coordination_id);
}

bool operator>>(Serializer& strm, KeyOnly< ::UATM::flightCoordination> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.value.coordination_id);
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace DCPS {
bool DDSTraits< ::UATM::flightCoordination>::is_key(const char* field)
{
  ACE_UNUSED_ARG(field);
  if (!ACE_OS::strcmp(field, "coordination_id")) {
    return true;
  }
  return false;
}
} // namespace DCPS
} // namespace OpenDDS
OPENDDS_END_VERSIONED_NAMESPACE_DECL

namespace UATM {
::DDS::DataWriter_ptr flightCoordinationTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<flightCoordination> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}

::DDS::DataReader_ptr flightCoordinationTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<flightCoordination> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}

#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr flightCoordinationTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<flightCoordination> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<flightCoordination, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */

#ifndef OPENDDS_SAFETY_PROFILE
flightCoordination* flightCoordinationTypeSupportImpl::create_sample(::DDS::DynamicData_ptr src)
{
  flightCoordination* value = new flightCoordination;
  const ::DDS::ReturnCode_t rc = OpenDDS::DCPS::TypeSupportImpl_T<flightCoordination>::create_sample_rc(*value, src);
  if (rc != ::DDS::RETCODE_OK && OpenDDS::DCPS::log_level >= OpenDDS::DCPS::LogLevel::Warning) {
    ACE_ERROR((LM_WARNING, "(%P|%t) WARNING: flightCoordinationTypeSupportImpl::create_sample: "
      "create_sample_rc failed: %C\n", OpenDDS::DCPS::retcode_to_string(rc)));
  }
  return value;
}
#endif

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& flightCoordinationTypeSupportImpl::getMetaStructForType() const
{
  return OpenDDS::DCPS::getMetaStruct<flightCoordination>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */

namespace {
  OpenDDS::DCPS::TypeSupportInitializer<flightCoordinationTypeSupportImpl> ts_init_UATM_flightCoordination;
}

const OpenDDS::XTypes::TypeIdentifier& flightCoordinationTypeSupportImpl::getMinimalTypeIdentifier() const
{
  return OpenDDS::DCPS::getMinimalTypeIdentifier<OpenDDS::DCPS::UATM_flightCoordination_xtag>();
}

const OpenDDS::XTypes::TypeMap& flightCoordinationTypeSupportImpl::getMinimalTypeMap() const
{
  return OpenDDS::DCPS::getMinimalTypeMap<OpenDDS::DCPS::UATM_flightCoordination_xtag>();
}

const OpenDDS::XTypes::TypeIdentifier& flightCoordinationTypeSupportImpl::getCompleteTypeIdentifier() const
{
  static OpenDDS::XTypes::TypeIdentifier ti;
  return ti;
}

const OpenDDS::XTypes::TypeMap& flightCoordinationTypeSupportImpl::getCompleteTypeMap() const
{
  static OpenDDS::XTypes::TypeMap tm;
  return tm;
}

::DDS::ReturnCode_t flightCoordinationTypeSupportImpl::encode_to_string(const flightCoordination& in, CORBA::String_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
#if OPENDDS_HAS_JSON_VALUE_WRITER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    rapidjson::StringBuffer buffer;
    rapidjson::Writer<rapidjson::StringBuffer> writer(buffer);
    OpenDDS::DCPS::JsonValueWriter<rapidjson::Writer<rapidjson::StringBuffer> > jvw(writer);
    if (!vwrite(jvw, in)) {
      return ::DDS::RETCODE_ERROR;
    }
    out = buffer.GetString();
    return ::DDS::RETCODE_OK;
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  out = "";
  return ::DDS::RETCODE_UNSUPPORTED;
}

::DDS::ReturnCode_t flightCoordinationTypeSupportImpl::encode_to_bytes(const flightCoordination& in, ::DDS::OctetSeq_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
#if OPENDDS_HAS_JSON_VALUE_WRITER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    CORBA::String_var buffer;
    const ::DDS::ReturnCode_t ret = encode_to_string(in, buffer, format);
    if (ret == ::DDS::RETCODE_OK) {
      const ::DDS::UInt32 len = static_cast< ::DDS::UInt32>(std::strlen(buffer));
      out = new ::DDS::OctetSeq(len);
      out->length(len);
      std::memcpy(out->get_buffer(), buffer, len);
      return ::DDS::RETCODE_OK;
    } else {
      out = new ::DDS::OctetSeq();
      return ret;
    }
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  out = new ::DDS::OctetSeq();
  return ::DDS::RETCODE_UNSUPPORTED;
}

::DDS::ReturnCode_t flightCoordinationTypeSupportImpl::decode_from_string(const char* in, flightCoordination_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
  out = new flightCoordination;
  OpenDDS::DCPS::set_default(*out);
#if OPENDDS_HAS_JSON_VALUE_READER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    rapidjson::StringStream buffer(in);
    OpenDDS::DCPS::JsonValueReader<> jvr(buffer);
    return vread(jvr, *out) ? ::DDS::RETCODE_OK : ::DDS::RETCODE_ERROR;
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  return ::DDS::RETCODE_UNSUPPORTED;
}

::DDS::ReturnCode_t flightCoordinationTypeSupportImpl::decode_from_bytes(const ::DDS::OctetSeq& in, flightCoordination_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
#if OPENDDS_HAS_JSON_VALUE_READER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    return decode_from_string(reinterpret_cast<const char*>(in.get_buffer()), out, format);
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  out = new flightCoordination();
  return ::DDS::RETCODE_UNSUPPORTED;
}

flightCoordinationTypeSupport::_ptr_type flightCoordinationTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl< ::UATM::flightCoordination> : MetaStruct {
  typedef  ::UATM::flightCoordination T;

#ifndef OPENDDS_NO_MULTI_TOPIC
  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 1; }

#endif /* OPENDDS_NO_MULTI_TOPIC */

  Value getValue(const void* stru, const char* field) const
  {
    const ::UATM::flightCoordination& typed = *static_cast<const ::UATM::flightCoordination*>(stru);
    ACE_UNUSED_ARG(typed);
    if (std::strcmp(field, "coordination_id") == 0) {
      return typed.coordination_id;
    }
    if (std::strcmp(field, "flight_id") == 0) {
      return typed.flight_id;
    }
    if (std::strcmp(field, "coordination_details") == 0) {
      return typed.coordination_details.in();
    }
    if (std::strcmp(field, "recommendation_time") == 0) {
      return typed.recommendation_time.in();
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::flightCoordination)");
  }

  Value getValue(Serializer& strm, const char* field, TypeSupportImpl* = 0) const
  {
    const Encoding& encoding = strm.encoding();
    ACE_UNUSED_ARG(encoding);
    size_t total_size = 0;
    if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
      if (!strm.read_delimiter(total_size)) {
        throw std::runtime_error("Unable to reader delimiter in getValue");
      }
    }
    std::string base_field = field;
    const size_t index = base_field.find('.');
    std::string subfield;
    if (index != std::string::npos) {
      subfield = base_field.substr(index + 1);
      base_field = base_field.substr(0, index);
    }
    if (base_field == "coordination_id") {
      ACE_CDR::Long val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'coordination_id' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'coordination_id' could not be skipped");
      }
    }
    if (base_field == "flight_id") {
      ACE_CDR::Long val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'flight_id' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'flight_id' could not be skipped");
      }
    }
    if (!gen_skip_over(strm, static_cast< ::UATM::ArrayString_forany*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (base_field == "coordination_details") {
      TAO::String_Manager val;
      if (!(strm >> val.out())) {
        throw std::runtime_error("Field 'coordination_details' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(strm >> len)) {
        throw std::runtime_error("String 'coordination_details' length could not be deserialized");
      }
      if (!strm.skip(len)) {
        throw std::runtime_error("String 'coordination_details' contents could not be skipped");
      }
    }
    if (base_field == "recommendation_time") {
      TAO::String_Manager val;
      if (!(strm >> val.out())) {
        throw std::runtime_error("Field 'recommendation_time' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(strm >> len)) {
        throw std::runtime_error("String 'recommendation_time' length could not be deserialized");
      }
      if (!strm.skip(len)) {
        throw std::runtime_error("String 'recommendation_time' contents could not be skipped");
      }
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Did not find field in getValue");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "coordination_id") == 0) {
      return make_field_cmp(&T::coordination_id, next);
    }
    if (std::strcmp(field, "flight_id") == 0) {
      return make_field_cmp(&T::flight_id, next);
    }
    if (std::strcmp(field, "coordination_details") == 0) {
      return make_field_cmp(&T::coordination_details, next);
    }
    if (std::strcmp(field, "recommendation_time") == 0) {
      return make_field_cmp(&T::recommendation_time, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::flightCoordination)");
  }

#ifndef OPENDDS_NO_MULTI_TOPIC
  const char** getFieldNames() const
  {
    static const char* names[] = {"coordination_id", "flight_id", "involved_parties", "coordination_details", "recommendation_time", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "coordination_id") == 0) {
      return &static_cast<const T*>(stru)->coordination_id;
    }
    if (std::strcmp(field, "flight_id") == 0) {
      return &static_cast<const T*>(stru)->flight_id;
    }
    if (std::strcmp(field, "involved_parties") == 0) {
      return &static_cast<const T*>(stru)->involved_parties;
    }
    if (std::strcmp(field, "coordination_details") == 0) {
      return &static_cast<const T*>(stru)->coordination_details;
    }
    if (std::strcmp(field, "recommendation_time") == 0) {
      return &static_cast<const T*>(stru)->recommendation_time;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::flightCoordination)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "coordination_id") == 0) {
      static_cast<T*>(lhs)->coordination_id = *static_cast<const  ::CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "flight_id") == 0) {
      static_cast<T*>(lhs)->flight_id = *static_cast<const  ::CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "involved_parties") == 0) {
       ::UATM::ArrayString* lhsArr = &static_cast<T*>(lhs)->involved_parties;
      const  ::UATM::ArrayString* rhsArr = static_cast<const  ::UATM::ArrayString*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      for (CORBA::ULong i0 = 0; i0 < 2; ++i0) {
        (*lhsArr)[i0] = (*rhsArr)[i0];
      }
      return;
    }
    if (std::strcmp(field, "coordination_details") == 0) {
      static_cast<T*>(lhs)->coordination_details = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "recommendation_time") == 0) {
      static_cast<T*>(lhs)->recommendation_time = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::flightCoordination)");
  }

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "coordination_id") == 0) {
      return static_cast<const T*>(lhs)->coordination_id == static_cast<const T*>(rhs)->coordination_id;
    }
    if (std::strcmp(field, "flight_id") == 0) {
      return static_cast<const T*>(lhs)->flight_id == static_cast<const T*>(rhs)->flight_id;
    }
    if (std::strcmp(field, "coordination_details") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->coordination_details.in(), static_cast<const T*>(rhs)->coordination_details.in());
    }
    if (std::strcmp(field, "recommendation_time") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->recommendation_time.in(), static_cast<const T*>(rhs)->recommendation_time.in());
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::flightCoordination)");
  }
#endif /* OPENDDS_NO_MULTI_TOPIC */

};

template<>
const MetaStruct& getMetaStruct< ::UATM::flightCoordination>()
{
  static MetaStructImpl< ::UATM::flightCoordination> msi;
  return msi;
}

bool gen_skip_over(Serializer& ser,  ::UATM::flightCoordination*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl< ::UATM::flightCoordination>().getValue(ser, "");
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif // ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace XTypes {

#ifndef OPENDDS_SAFETY_PROFILE
#if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
template <>
class DynamicDataAdapterImpl< ::UATM::flightCoordination,  ::UATM::flightCoordination > : public DynamicDataAdapter_T< ::UATM::flightCoordination> {
public:
  DynamicDataAdapterImpl(DDS::DynamicType_ptr type,  ::UATM::flightCoordination& value)
    : DynamicDataAdapter_T< ::UATM::flightCoordination>(type, value)
  {
  }

  DynamicDataAdapterImpl(DDS::DynamicType_ptr type, const  ::UATM::flightCoordination& value)
    : DynamicDataAdapter_T< ::UATM::flightCoordination>(type, value)
  {
  }

  DDS::ReturnCode_t clear_all_values()
  {
    const DDS::ReturnCode_t rc = assert_mutable("DynamicDataAdapter::clear_all_values");
    if (rc == DDS::RETCODE_OK) {
      OpenDDS::DCPS::set_default(value_);
    }
    return rc;
  }

  DDS::UInt32 get_item_count()
  {
    return 5;
  }

  bool serialized_size(const OpenDDS::DCPS::Encoding& enc, size_t& size, OpenDDS::DCPS::Sample::Extent ext) const
  {
    using namespace OpenDDS::DCPS;
    if (ext == Sample::Full) {
      DCPS::serialized_size(enc, size, value_);
    } else if (ext == Sample::NestedKeyOnly) {
      const NestedKeyOnly<const  ::UATM::flightCoordination> nested_key_only(value_);
      DCPS::serialized_size(enc, size, nested_key_only);
    } else {
      return false; // Non-topic type
    }
    return true;
  }

  bool serialize(OpenDDS::DCPS::Serializer& ser, OpenDDS::DCPS::Sample::Extent ext) const
  {
    using namespace OpenDDS::DCPS;
    if (ext == Sample::Full) {
      return ser << value_;
    } else if (ext == Sample::NestedKeyOnly) {
      NestedKeyOnly<const  ::UATM::flightCoordination> nested_key_only(value_);
      return ser << nested_key_only;
    } else {
      return false; // Non-topic type
    }
  }

protected:
  DDS::ReturnCode_t get_raw_value(const char* method, void* dest, DDS::TypeKind tk, DDS::MemberId id)
  {
    switch (id) {
    case 0:
      {
        return get_simple_raw_value(method, dest, tk, value_.coordination_id, id);
      }
    case 1:
      {
        return get_simple_raw_value(method, dest, tk, value_.flight_id, id);
      }
    case 2:
      {
        return get_complex_raw_value< ::UATM::ArrayString, UATM_ArrayString_dda_tag>(method, dest, tk, value_.involved_parties, id);
      }
    case 3:
      {
        return get_s8_raw_value(method, dest, tk, value_.coordination_details, id);
      }
    case 4:
      {
        return get_s8_raw_value(method, dest, tk, value_.recommendation_time, id);
      }
    default:
      return invalid_id(method, id);
    }
  }

  DDS::ReturnCode_t set_raw_value(const char* method, DDS::MemberId id, const void* source, DDS::TypeKind tk)
  {
    DDS::ReturnCode_t rc = assert_mutable(method);
    if (rc != DDS::RETCODE_OK) {
      return rc;
    }
    switch (id) {
    case 0:
      {
        return set_simple_raw_value(method, value_.coordination_id, id, source, tk);
      }
    case 1:
      {
        return set_simple_raw_value(method, value_.flight_id, id, source, tk);
      }
    case 2:
      {
        return set_indirect_complex_raw_value< ::UATM::ArrayString, UATM_ArrayString_dda_tag>(method, value_.involved_parties, id, source, tk);
      }
    case 3:
      {
        return set_s8_raw_value(method, value_.coordination_details.inout(), id, source, tk);
      }
    case 4:
      {
        return set_s8_raw_value(method, value_.recommendation_time.inout(), id, source, tk);
      }
    default:
      return invalid_id(method, id);
    }
  }
};

#endif // if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER

template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::flightCoordination,  ::UATM::flightCoordination>(DDS::DynamicType_ptr type, const  ::UATM::flightCoordination& value)
{
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  if (type) {
    return new DynamicDataAdapterImpl< ::UATM::flightCoordination,  ::UATM::flightCoordination>(type, value);
  }
#  else
  ACE_UNUSED_ARG(type);
  ACE_UNUSED_ARG(value);
#  endif
  return 0;
}

template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::flightCoordination,  ::UATM::flightCoordination>(DDS::DynamicType_ptr type,  ::UATM::flightCoordination& value)
{
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  if (type) {
    return new DynamicDataAdapterImpl< ::UATM::flightCoordination,  ::UATM::flightCoordination>(type, value);
  }
#  else
  ACE_UNUSED_ARG(type);
  ACE_UNUSED_ARG(value);
#  endif
  return 0;
}

template <>
const  ::UATM::flightCoordination* get_dynamic_data_adapter_value< ::UATM::flightCoordination,  ::UATM::flightCoordination>(DDS::DynamicData_ptr dd)
{
  ACE_UNUSED_ARG(dd);
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  typedef DynamicDataAdapterImpl< ::UATM::flightCoordination,  ::UATM::flightCoordination> Dda;
  const Dda* const dda = dynamic_cast<Dda*>(dd);
  if (dda) {
    return &dda->wrapped();
  }
#  endif
  return 0;
}
#endif // ifndef OPENDDS_SAFETY_PROFILE

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End STRUCT: flightCoordination */

/* End MODULE: UATM */


/* Begin MODULE: UATM */



/* Begin STRUCT: flightRequestInfo */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> const XTypes::TypeIdentifier& getMinimalTypeIdentifier<UATM_flightRequestInfo_xtag>()
{
  static XTypes::TypeIdentifier ti;
  ACE_GUARD_RETURN(ACE_Thread_Mutex, guard, TheServiceParticipant->get_static_xtypes_lock(), ti);
  if (ti.kind() == XTypes::TK_NONE) {
    ti = XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(238, 169, 226, 91, 131, 31, 23, 62, 109, 239, 221, 93, 103, 225));
  }
  return ti;
}

template<> const XTypes::TypeMap& getMinimalTypeMap<UATM_flightRequestInfo_xtag>()
{
  return OPENDDS_IDL_FILE_SPECIFIC(get_minimal_type_map, 0)();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool vread(OpenDDS::DCPS::ValueReader& value_reader,  ::UATM::flightRequestInfo& value)
{
  ACE_UNUSED_ARG(value_reader);
  ACE_UNUSED_ARG(value);
  static const ListMemberHelper::Pair pairs[] = {{"request_id",0},{"flight_id",1},{"requestor_id",2},{"requested_route_id",3},{"request_status",4},{"request_time",5},{0,0}};
  ListMemberHelper helper(pairs);
  if (!value_reader.begin_struct(OpenDDS::DCPS::APPENDABLE)) return false;
  XTypes::MemberId member_id;
  while (value_reader.members_remaining()) {
    if (!value_reader.begin_struct_member(member_id, helper)) return false;
    switch (member_id) {
    case 0: {
      if (!value_reader.read_int32(value.request_id)) return false;
      break;
    }
    case 1: {
      if (!value_reader.read_int32(value.flight_id)) return false;
      break;
    }
    case 2: {
      if (!value_reader.read_int32(value.requestor_id)) return false;
      break;
    }
    case 3: {
      if (!value_reader.read_int32(value.requested_route_id)) return false;
      break;
    }
    case 4: {
      {
         ::CORBA::Boolean bx;
        if (!value_reader.read_boolean(bx)) return false;
        value.request_status = bx;
      }
      break;
    }
    case 5: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.request_time = x.c_str();
      }
      break;
    }
    }
    if (!value_reader.end_struct_member()) return false;
  }
  if (!value_reader.end_struct()) return false;
  return true;
}

bool vread(OpenDDS::DCPS::ValueReader& value_reader, const NestedKeyOnly< ::UATM::flightRequestInfo>& value)
{
  ACE_UNUSED_ARG(value_reader);
  ACE_UNUSED_ARG(value);
  static const ListMemberHelper::Pair pairs[] = {{"request_id",0},{"flight_id",1},{"requestor_id",2},{"requested_route_id",3},{"request_status",4},{"request_time",5},{0,0}};
  ListMemberHelper helper(pairs);
  if (!value_reader.begin_struct(OpenDDS::DCPS::APPENDABLE)) return false;
  XTypes::MemberId member_id;
  while (value_reader.members_remaining()) {
    if (!value_reader.begin_struct_member(member_id, helper)) return false;
    switch (member_id) {
    case 0: {
      if (!value_reader.read_int32(value.value.request_id)) return false;
      break;
    }
    case 1: {
      if (!value_reader.read_int32(value.value.flight_id)) return false;
      break;
    }
    case 2: {
      if (!value_reader.read_int32(value.value.requestor_id)) return false;
      break;
    }
    case 3: {
      if (!value_reader.read_int32(value.value.requested_route_id)) return false;
      break;
    }
    case 4: {
      {
         ::CORBA::Boolean bx;
        if (!value_reader.read_boolean(bx)) return false;
        value.value.request_status = bx;
      }
      break;
    }
    case 5: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.value.request_time = x.c_str();
      }
      break;
    }
    }
    if (!value_reader.end_struct_member()) return false;
  }
  if (!value_reader.end_struct()) return false;
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const  ::UATM::flightRequestInfo& value)
{
  ACE_UNUSED_ARG(value_writer);
  ACE_UNUSED_ARG(value);
  if (!value_writer.begin_struct(OpenDDS::DCPS::APPENDABLE)) {
    return false;
  }
  {
    MemberParam param(0, false, "request_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.request_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(1, false, "flight_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.flight_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(2, false, "requestor_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.requestor_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(3, false, "requested_route_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.requested_route_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(4, false, "request_status", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_boolean(value.request_status)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(5, false, "request_time", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.request_time)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  return value_writer.end_struct();
}

bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const NestedKeyOnly<const  ::UATM::flightRequestInfo>& value)
{
  ACE_UNUSED_ARG(value_writer);
  ACE_UNUSED_ARG(value);
  if (!value_writer.begin_struct(OpenDDS::DCPS::APPENDABLE)) {
    return false;
  }
  {
    MemberParam param(0, false, "request_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.value.request_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(1, false, "flight_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.value.flight_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(2, false, "requestor_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.value.requestor_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(3, false, "requested_route_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.value.requested_route_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(4, false, "request_status", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_boolean(value.value.request_status)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(5, false, "request_time", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.value.request_time)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  return value_writer.end_struct();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> void set_default( ::UATM::flightRequestInfo& stru)
{
  ACE_UNUSED_ARG(stru);
  stru.request_id = 0;
  stru.flight_id = 0;
  stru.requestor_id = 0;
  stru.requested_route_id = 0;
  stru.request_status = 0;
  stru.request_time = "";
}

void serialized_size(const Encoding& encoding, size_t& size, const ::UATM::flightRequestInfo& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
  primitive_serialized_size(encoding, size, stru.request_id);
  primitive_serialized_size(encoding, size, stru.flight_id);
  primitive_serialized_size(encoding, size, stru.requestor_id);
  primitive_serialized_size(encoding, size, stru.requested_route_id);
  primitive_serialized_size(encoding, size, ACE_OutputCDR::from_boolean(stru.request_status));
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.request_time.in()) + 1;
}

bool operator<<(Serializer& strm, const ::UATM::flightRequestInfo& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
  return (strm << stru.request_id)
    && (strm << stru.flight_id)
    && (strm << stru.requestor_id)
    && (strm << stru.requested_route_id)
    && (strm << ACE_OutputCDR::from_boolean(stru.request_status))
    && (strm << ACE_OutputCDR::from_string(stru.request_time.in(), 20));
}

bool operator>>(Serializer& strm,  ::UATM::flightRequestInfo& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  bool reached_end_of_struct = false;
  ACE_UNUSED_ARG(reached_end_of_struct);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.request_id = 0;
  } else {
    if (!(strm >> stru.request_id)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.flight_id = 0;
  } else {
    if (!(strm >> stru.flight_id)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.requestor_id = 0;
  } else {
    if (!(strm >> stru.requestor_id)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.requested_route_id = 0;
  } else {
    if (!(strm >> stru.requested_route_id)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.request_status = 0;
  } else {
    if (!(strm >> ACE_InputCDR::to_boolean(stru.request_status))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.request_time = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.request_time.out(), 20))) {
      return false;
    }
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const ::UATM::flightRequestInfo>& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
  primitive_serialized_size(encoding, size, stru.value.request_id);
  primitive_serialized_size(encoding, size, stru.value.flight_id);
  primitive_serialized_size(encoding, size, stru.value.requestor_id);
  primitive_serialized_size(encoding, size, stru.value.requested_route_id);
  primitive_serialized_size(encoding, size, ACE_OutputCDR::from_boolean(stru.value.request_status));
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.value.request_time.in()) + 1;
}

bool operator<<(Serializer& strm, const NestedKeyOnly<const ::UATM::flightRequestInfo>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
  return (strm << stru.value.request_id)
    && (strm << stru.value.flight_id)
    && (strm << stru.value.requestor_id)
    && (strm << stru.value.requested_route_id)
    && (strm << ACE_OutputCDR::from_boolean(stru.value.request_status))
    && (strm << ACE_OutputCDR::from_string(stru.value.request_time.in(), 20));
}

bool operator>>(Serializer& strm, const NestedKeyOnly< ::UATM::flightRequestInfo>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  bool reached_end_of_struct = false;
  ACE_UNUSED_ARG(reached_end_of_struct);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.request_id = 0;
  } else {
    if (!(strm >> stru.value.request_id)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.flight_id = 0;
  } else {
    if (!(strm >> stru.value.flight_id)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.requestor_id = 0;
  } else {
    if (!(strm >> stru.value.requestor_id)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.requested_route_id = 0;
  } else {
    if (!(strm >> stru.value.requested_route_id)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.request_status = 0;
  } else {
    if (!(strm >> ACE_InputCDR::to_boolean(stru.value.request_status))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.request_time = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.value.request_time.out(), 20))) {
      return false;
    }
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

void serialized_size(const Encoding& encoding, size_t& size, const KeyOnly<const  ::UATM::flightRequestInfo> stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  switch (encoding.xcdr_version()) {
  case Encoding::XCDR_VERSION_1:
    {
    primitive_serialized_size(encoding, size, stru.value.request_id);
    break;
    }
  case Encoding::XCDR_VERSION_2:
    {
    primitive_serialized_size(encoding, size, stru.value.request_id);
    break;
    }
  case Encoding::XCDR_VERSION_NONE:
    {
    primitive_serialized_size(encoding, size, stru.value.request_id);
    break;
    }
  }
}

bool operator<<(Serializer& strm, KeyOnly<const  ::UATM::flightRequestInfo> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.value.request_id);
}

bool operator>>(Serializer& strm, KeyOnly< ::UATM::flightRequestInfo> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.value.request_id);
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace DCPS {
bool DDSTraits< ::UATM::flightRequestInfo>::is_key(const char* field)
{
  ACE_UNUSED_ARG(field);
  if (!ACE_OS::strcmp(field, "request_id")) {
    return true;
  }
  return false;
}
} // namespace DCPS
} // namespace OpenDDS
OPENDDS_END_VERSIONED_NAMESPACE_DECL

namespace UATM {
::DDS::DataWriter_ptr flightRequestInfoTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<flightRequestInfo> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}

::DDS::DataReader_ptr flightRequestInfoTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<flightRequestInfo> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}

#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr flightRequestInfoTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<flightRequestInfo> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<flightRequestInfo, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */

#ifndef OPENDDS_SAFETY_PROFILE
flightRequestInfo* flightRequestInfoTypeSupportImpl::create_sample(::DDS::DynamicData_ptr src)
{
  flightRequestInfo* value = new flightRequestInfo;
  const ::DDS::ReturnCode_t rc = OpenDDS::DCPS::TypeSupportImpl_T<flightRequestInfo>::create_sample_rc(*value, src);
  if (rc != ::DDS::RETCODE_OK && OpenDDS::DCPS::log_level >= OpenDDS::DCPS::LogLevel::Warning) {
    ACE_ERROR((LM_WARNING, "(%P|%t) WARNING: flightRequestInfoTypeSupportImpl::create_sample: "
      "create_sample_rc failed: %C\n", OpenDDS::DCPS::retcode_to_string(rc)));
  }
  return value;
}
#endif

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& flightRequestInfoTypeSupportImpl::getMetaStructForType() const
{
  return OpenDDS::DCPS::getMetaStruct<flightRequestInfo>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */

namespace {
  OpenDDS::DCPS::TypeSupportInitializer<flightRequestInfoTypeSupportImpl> ts_init_UATM_flightRequestInfo;
}

const OpenDDS::XTypes::TypeIdentifier& flightRequestInfoTypeSupportImpl::getMinimalTypeIdentifier() const
{
  return OpenDDS::DCPS::getMinimalTypeIdentifier<OpenDDS::DCPS::UATM_flightRequestInfo_xtag>();
}

const OpenDDS::XTypes::TypeMap& flightRequestInfoTypeSupportImpl::getMinimalTypeMap() const
{
  return OpenDDS::DCPS::getMinimalTypeMap<OpenDDS::DCPS::UATM_flightRequestInfo_xtag>();
}

const OpenDDS::XTypes::TypeIdentifier& flightRequestInfoTypeSupportImpl::getCompleteTypeIdentifier() const
{
  static OpenDDS::XTypes::TypeIdentifier ti;
  return ti;
}

const OpenDDS::XTypes::TypeMap& flightRequestInfoTypeSupportImpl::getCompleteTypeMap() const
{
  static OpenDDS::XTypes::TypeMap tm;
  return tm;
}

::DDS::ReturnCode_t flightRequestInfoTypeSupportImpl::encode_to_string(const flightRequestInfo& in, CORBA::String_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
#if OPENDDS_HAS_JSON_VALUE_WRITER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    rapidjson::StringBuffer buffer;
    rapidjson::Writer<rapidjson::StringBuffer> writer(buffer);
    OpenDDS::DCPS::JsonValueWriter<rapidjson::Writer<rapidjson::StringBuffer> > jvw(writer);
    if (!vwrite(jvw, in)) {
      return ::DDS::RETCODE_ERROR;
    }
    out = buffer.GetString();
    return ::DDS::RETCODE_OK;
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  out = "";
  return ::DDS::RETCODE_UNSUPPORTED;
}

::DDS::ReturnCode_t flightRequestInfoTypeSupportImpl::encode_to_bytes(const flightRequestInfo& in, ::DDS::OctetSeq_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
#if OPENDDS_HAS_JSON_VALUE_WRITER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    CORBA::String_var buffer;
    const ::DDS::ReturnCode_t ret = encode_to_string(in, buffer, format);
    if (ret == ::DDS::RETCODE_OK) {
      const ::DDS::UInt32 len = static_cast< ::DDS::UInt32>(std::strlen(buffer));
      out = new ::DDS::OctetSeq(len);
      out->length(len);
      std::memcpy(out->get_buffer(), buffer, len);
      return ::DDS::RETCODE_OK;
    } else {
      out = new ::DDS::OctetSeq();
      return ret;
    }
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  out = new ::DDS::OctetSeq();
  return ::DDS::RETCODE_UNSUPPORTED;
}

::DDS::ReturnCode_t flightRequestInfoTypeSupportImpl::decode_from_string(const char* in, flightRequestInfo_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
  out = new flightRequestInfo;
  OpenDDS::DCPS::set_default(*out);
#if OPENDDS_HAS_JSON_VALUE_READER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    rapidjson::StringStream buffer(in);
    OpenDDS::DCPS::JsonValueReader<> jvr(buffer);
    return vread(jvr, *out) ? ::DDS::RETCODE_OK : ::DDS::RETCODE_ERROR;
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  return ::DDS::RETCODE_UNSUPPORTED;
}

::DDS::ReturnCode_t flightRequestInfoTypeSupportImpl::decode_from_bytes(const ::DDS::OctetSeq& in, flightRequestInfo_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
#if OPENDDS_HAS_JSON_VALUE_READER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    return decode_from_string(reinterpret_cast<const char*>(in.get_buffer()), out, format);
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  out = new flightRequestInfo();
  return ::DDS::RETCODE_UNSUPPORTED;
}

flightRequestInfoTypeSupport::_ptr_type flightRequestInfoTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl< ::UATM::flightRequestInfo> : MetaStruct {
  typedef  ::UATM::flightRequestInfo T;

#ifndef OPENDDS_NO_MULTI_TOPIC
  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 1; }

#endif /* OPENDDS_NO_MULTI_TOPIC */

  Value getValue(const void* stru, const char* field) const
  {
    const ::UATM::flightRequestInfo& typed = *static_cast<const ::UATM::flightRequestInfo*>(stru);
    ACE_UNUSED_ARG(typed);
    if (std::strcmp(field, "request_id") == 0) {
      return typed.request_id;
    }
    if (std::strcmp(field, "flight_id") == 0) {
      return typed.flight_id;
    }
    if (std::strcmp(field, "requestor_id") == 0) {
      return typed.requestor_id;
    }
    if (std::strcmp(field, "requested_route_id") == 0) {
      return typed.requested_route_id;
    }
    if (std::strcmp(field, "request_status") == 0) {
      return typed.request_status;
    }
    if (std::strcmp(field, "request_time") == 0) {
      return typed.request_time.in();
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::flightRequestInfo)");
  }

  Value getValue(Serializer& strm, const char* field, TypeSupportImpl* = 0) const
  {
    const Encoding& encoding = strm.encoding();
    ACE_UNUSED_ARG(encoding);
    size_t total_size = 0;
    if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
      if (!strm.read_delimiter(total_size)) {
        throw std::runtime_error("Unable to reader delimiter in getValue");
      }
    }
    std::string base_field = field;
    const size_t index = base_field.find('.');
    std::string subfield;
    if (index != std::string::npos) {
      subfield = base_field.substr(index + 1);
      base_field = base_field.substr(0, index);
    }
    if (base_field == "request_id") {
      ACE_CDR::Long val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'request_id' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'request_id' could not be skipped");
      }
    }
    if (base_field == "flight_id") {
      ACE_CDR::Long val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'flight_id' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'flight_id' could not be skipped");
      }
    }
    if (base_field == "requestor_id") {
      ACE_CDR::Long val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'requestor_id' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'requestor_id' could not be skipped");
      }
    }
    if (base_field == "requested_route_id") {
      ACE_CDR::Long val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'requested_route_id' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'requested_route_id' could not be skipped");
      }
    }
    if (base_field == "request_status") {
      ACE_CDR::Boolean val;
      if (!(strm >> ACE_InputCDR::to_boolean(val))) {
        throw std::runtime_error("Field 'request_status' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  1 )) {
        throw std::runtime_error("Field 'request_status' could not be skipped");
      }
    }
    if (base_field == "request_time") {
      TAO::String_Manager val;
      if (!(strm >> val.out())) {
        throw std::runtime_error("Field 'request_time' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(strm >> len)) {
        throw std::runtime_error("String 'request_time' length could not be deserialized");
      }
      if (!strm.skip(len)) {
        throw std::runtime_error("String 'request_time' contents could not be skipped");
      }
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Did not find field in getValue");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "request_id") == 0) {
      return make_field_cmp(&T::request_id, next);
    }
    if (std::strcmp(field, "flight_id") == 0) {
      return make_field_cmp(&T::flight_id, next);
    }
    if (std::strcmp(field, "requestor_id") == 0) {
      return make_field_cmp(&T::requestor_id, next);
    }
    if (std::strcmp(field, "requested_route_id") == 0) {
      return make_field_cmp(&T::requested_route_id, next);
    }
    if (std::strcmp(field, "request_status") == 0) {
      return make_field_cmp(&T::request_status, next);
    }
    if (std::strcmp(field, "request_time") == 0) {
      return make_field_cmp(&T::request_time, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::flightRequestInfo)");
  }

#ifndef OPENDDS_NO_MULTI_TOPIC
  const char** getFieldNames() const
  {
    static const char* names[] = {"request_id", "flight_id", "requestor_id", "requested_route_id", "request_status", "request_time", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "request_id") == 0) {
      return &static_cast<const T*>(stru)->request_id;
    }
    if (std::strcmp(field, "flight_id") == 0) {
      return &static_cast<const T*>(stru)->flight_id;
    }
    if (std::strcmp(field, "requestor_id") == 0) {
      return &static_cast<const T*>(stru)->requestor_id;
    }
    if (std::strcmp(field, "requested_route_id") == 0) {
      return &static_cast<const T*>(stru)->requested_route_id;
    }
    if (std::strcmp(field, "request_status") == 0) {
      return &static_cast<const T*>(stru)->request_status;
    }
    if (std::strcmp(field, "request_time") == 0) {
      return &static_cast<const T*>(stru)->request_time;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::flightRequestInfo)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "request_id") == 0) {
      static_cast<T*>(lhs)->request_id = *static_cast<const  ::CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "flight_id") == 0) {
      static_cast<T*>(lhs)->flight_id = *static_cast<const  ::CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "requestor_id") == 0) {
      static_cast<T*>(lhs)->requestor_id = *static_cast<const  ::CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "requested_route_id") == 0) {
      static_cast<T*>(lhs)->requested_route_id = *static_cast<const  ::CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "request_status") == 0) {
      static_cast<T*>(lhs)->request_status = *static_cast<const  ::CORBA::Boolean*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "request_time") == 0) {
      static_cast<T*>(lhs)->request_time = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::flightRequestInfo)");
  }

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "request_id") == 0) {
      return static_cast<const T*>(lhs)->request_id == static_cast<const T*>(rhs)->request_id;
    }
    if (std::strcmp(field, "flight_id") == 0) {
      return static_cast<const T*>(lhs)->flight_id == static_cast<const T*>(rhs)->flight_id;
    }
    if (std::strcmp(field, "requestor_id") == 0) {
      return static_cast<const T*>(lhs)->requestor_id == static_cast<const T*>(rhs)->requestor_id;
    }
    if (std::strcmp(field, "requested_route_id") == 0) {
      return static_cast<const T*>(lhs)->requested_route_id == static_cast<const T*>(rhs)->requested_route_id;
    }
    if (std::strcmp(field, "request_status") == 0) {
      return static_cast<const T*>(lhs)->request_status == static_cast<const T*>(rhs)->request_status;
    }
    if (std::strcmp(field, "request_time") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->request_time.in(), static_cast<const T*>(rhs)->request_time.in());
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::flightRequestInfo)");
  }
#endif /* OPENDDS_NO_MULTI_TOPIC */

};

template<>
const MetaStruct& getMetaStruct< ::UATM::flightRequestInfo>()
{
  static MetaStructImpl< ::UATM::flightRequestInfo> msi;
  return msi;
}

bool gen_skip_over(Serializer& ser,  ::UATM::flightRequestInfo*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl< ::UATM::flightRequestInfo>().getValue(ser, "");
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif // ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace XTypes {

#ifndef OPENDDS_SAFETY_PROFILE
#if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
template <>
class DynamicDataAdapterImpl< ::UATM::flightRequestInfo,  ::UATM::flightRequestInfo > : public DynamicDataAdapter_T< ::UATM::flightRequestInfo> {
public:
  DynamicDataAdapterImpl(DDS::DynamicType_ptr type,  ::UATM::flightRequestInfo& value)
    : DynamicDataAdapter_T< ::UATM::flightRequestInfo>(type, value)
  {
  }

  DynamicDataAdapterImpl(DDS::DynamicType_ptr type, const  ::UATM::flightRequestInfo& value)
    : DynamicDataAdapter_T< ::UATM::flightRequestInfo>(type, value)
  {
  }

  DDS::ReturnCode_t clear_all_values()
  {
    const DDS::ReturnCode_t rc = assert_mutable("DynamicDataAdapter::clear_all_values");
    if (rc == DDS::RETCODE_OK) {
      OpenDDS::DCPS::set_default(value_);
    }
    return rc;
  }

  DDS::UInt32 get_item_count()
  {
    return 6;
  }

  bool serialized_size(const OpenDDS::DCPS::Encoding& enc, size_t& size, OpenDDS::DCPS::Sample::Extent ext) const
  {
    using namespace OpenDDS::DCPS;
    if (ext == Sample::Full) {
      DCPS::serialized_size(enc, size, value_);
    } else if (ext == Sample::NestedKeyOnly) {
      const NestedKeyOnly<const  ::UATM::flightRequestInfo> nested_key_only(value_);
      DCPS::serialized_size(enc, size, nested_key_only);
    } else {
      return false; // Non-topic type
    }
    return true;
  }

  bool serialize(OpenDDS::DCPS::Serializer& ser, OpenDDS::DCPS::Sample::Extent ext) const
  {
    using namespace OpenDDS::DCPS;
    if (ext == Sample::Full) {
      return ser << value_;
    } else if (ext == Sample::NestedKeyOnly) {
      NestedKeyOnly<const  ::UATM::flightRequestInfo> nested_key_only(value_);
      return ser << nested_key_only;
    } else {
      return false; // Non-topic type
    }
  }

protected:
  DDS::ReturnCode_t get_raw_value(const char* method, void* dest, DDS::TypeKind tk, DDS::MemberId id)
  {
    switch (id) {
    case 0:
      {
        return get_simple_raw_value(method, dest, tk, value_.request_id, id);
      }
    case 1:
      {
        return get_simple_raw_value(method, dest, tk, value_.flight_id, id);
      }
    case 2:
      {
        return get_simple_raw_value(method, dest, tk, value_.requestor_id, id);
      }
    case 3:
      {
        return get_simple_raw_value(method, dest, tk, value_.requested_route_id, id);
      }
    case 4:
      {
        return get_simple_raw_value(method, dest, tk, value_.request_status, id);
      }
    case 5:
      {
        return get_s8_raw_value(method, dest, tk, value_.request_time, id);
      }
    default:
      return invalid_id(method, id);
    }
  }

  DDS::ReturnCode_t set_raw_value(const char* method, DDS::MemberId id, const void* source, DDS::TypeKind tk)
  {
    DDS::ReturnCode_t rc = assert_mutable(method);
    if (rc != DDS::RETCODE_OK) {
      return rc;
    }
    switch (id) {
    case 0:
      {
        return set_simple_raw_value(method, value_.request_id, id, source, tk);
      }
    case 1:
      {
        return set_simple_raw_value(method, value_.flight_id, id, source, tk);
      }
    case 2:
      {
        return set_simple_raw_value(method, value_.requestor_id, id, source, tk);
      }
    case 3:
      {
        return set_simple_raw_value(method, value_.requested_route_id, id, source, tk);
      }
    case 4:
      {
        return set_simple_raw_value(method, value_.request_status, id, source, tk);
      }
    case 5:
      {
        return set_s8_raw_value(method, value_.request_time.inout(), id, source, tk);
      }
    default:
      return invalid_id(method, id);
    }
  }
};

#endif // if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER

template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::flightRequestInfo,  ::UATM::flightRequestInfo>(DDS::DynamicType_ptr type, const  ::UATM::flightRequestInfo& value)
{
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  if (type) {
    return new DynamicDataAdapterImpl< ::UATM::flightRequestInfo,  ::UATM::flightRequestInfo>(type, value);
  }
#  else
  ACE_UNUSED_ARG(type);
  ACE_UNUSED_ARG(value);
#  endif
  return 0;
}

template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::flightRequestInfo,  ::UATM::flightRequestInfo>(DDS::DynamicType_ptr type,  ::UATM::flightRequestInfo& value)
{
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  if (type) {
    return new DynamicDataAdapterImpl< ::UATM::flightRequestInfo,  ::UATM::flightRequestInfo>(type, value);
  }
#  else
  ACE_UNUSED_ARG(type);
  ACE_UNUSED_ARG(value);
#  endif
  return 0;
}

template <>
const  ::UATM::flightRequestInfo* get_dynamic_data_adapter_value< ::UATM::flightRequestInfo,  ::UATM::flightRequestInfo>(DDS::DynamicData_ptr dd)
{
  ACE_UNUSED_ARG(dd);
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  typedef DynamicDataAdapterImpl< ::UATM::flightRequestInfo,  ::UATM::flightRequestInfo> Dda;
  const Dda* const dda = dynamic_cast<Dda*>(dd);
  if (dda) {
    return &dda->wrapped();
  }
#  endif
  return 0;
}
#endif // ifndef OPENDDS_SAFETY_PROFILE

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End STRUCT: flightRequestInfo */

/* End MODULE: UATM */


/* Begin MODULE: UATM */



/* Begin STRUCT: flightRoutesInfo */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> const XTypes::TypeIdentifier& getMinimalTypeIdentifier<UATM_flightRoutesInfo_xtag>()
{
  static XTypes::TypeIdentifier ti;
  ACE_GUARD_RETURN(ACE_Thread_Mutex, guard, TheServiceParticipant->get_static_xtypes_lock(), ti);
  if (ti.kind() == XTypes::TK_NONE) {
    ti = XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(42, 36, 207, 230, 130, 229, 86, 190, 71, 246, 192, 32, 9, 76));
  }
  return ti;
}

template<> const XTypes::TypeMap& getMinimalTypeMap<UATM_flightRoutesInfo_xtag>()
{
  return OPENDDS_IDL_FILE_SPECIFIC(get_minimal_type_map, 0)();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool vread(OpenDDS::DCPS::ValueReader& value_reader,  ::UATM::flightRoutesInfo& value)
{
  ACE_UNUSED_ARG(value_reader);
  ACE_UNUSED_ARG(value);
  static const ListMemberHelper::Pair pairs[] = {{"flight_route_id",0},{"flight_id",1},{"waypoints",2},{"estimated_time",3},{"status",4},{0,0}};
  ListMemberHelper helper(pairs);
  if (!value_reader.begin_struct(OpenDDS::DCPS::APPENDABLE)) return false;
  XTypes::MemberId member_id;
  while (value_reader.members_remaining()) {
    if (!value_reader.begin_struct_member(member_id, helper)) return false;
    switch (member_id) {
    case 0: {
      if (!value_reader.read_int32(value.flight_route_id)) return false;
      break;
    }
    case 1: {
      if (!value_reader.read_int32(value.flight_id)) return false;
      break;
    }
    case 2: {
      if (!value_reader.begin_array(XTypes::TK_STRING8)) return false;
      for (unsigned int i = 0; i != 2; ++i) {
        if (!value_reader.begin_element()) return false;
        {
          String x;
          if (!value_reader.read_string(x)) return false;
          value.waypoints[i] = x.c_str();
        }
        if (!value_reader.end_element()) return false;
      }
      if (!value_reader.end_array()) return false;
      break;
    }
    case 3: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.estimated_time = x.c_str();
      }
      break;
    }
    case 4: {
      {
         ::CORBA::Boolean bx;
        if (!value_reader.read_boolean(bx)) return false;
        value.status = bx;
      }
      break;
    }
    }
    if (!value_reader.end_struct_member()) return false;
  }
  if (!value_reader.end_struct()) return false;
  return true;
}

bool vread(OpenDDS::DCPS::ValueReader& value_reader, const NestedKeyOnly< ::UATM::flightRoutesInfo>& value)
{
  ACE_UNUSED_ARG(value_reader);
  ACE_UNUSED_ARG(value);
  static const ListMemberHelper::Pair pairs[] = {{"flight_route_id",0},{"flight_id",1},{"waypoints",2},{"estimated_time",3},{"status",4},{0,0}};
  ListMemberHelper helper(pairs);
  if (!value_reader.begin_struct(OpenDDS::DCPS::APPENDABLE)) return false;
  XTypes::MemberId member_id;
  while (value_reader.members_remaining()) {
    if (!value_reader.begin_struct_member(member_id, helper)) return false;
    switch (member_id) {
    case 0: {
      if (!value_reader.read_int32(value.value.flight_route_id)) return false;
      break;
    }
    case 1: {
      if (!value_reader.read_int32(value.value.flight_id)) return false;
      break;
    }
    case 2: {
      if (!value_reader.begin_array(XTypes::TK_STRING8)) return false;
      for (unsigned int i = 0; i != 2; ++i) {
        if (!value_reader.begin_element()) return false;
        {
          String x;
          if (!value_reader.read_string(x)) return false;
          value.value.waypoints[i] = x.c_str();
        }
        if (!value_reader.end_element()) return false;
      }
      if (!value_reader.end_array()) return false;
      break;
    }
    case 3: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.value.estimated_time = x.c_str();
      }
      break;
    }
    case 4: {
      {
         ::CORBA::Boolean bx;
        if (!value_reader.read_boolean(bx)) return false;
        value.value.status = bx;
      }
      break;
    }
    }
    if (!value_reader.end_struct_member()) return false;
  }
  if (!value_reader.end_struct()) return false;
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const  ::UATM::flightRoutesInfo& value)
{
  ACE_UNUSED_ARG(value_writer);
  ACE_UNUSED_ARG(value);
  if (!value_writer.begin_struct(OpenDDS::DCPS::APPENDABLE)) {
    return false;
  }
  {
    MemberParam param(0, false, "flight_route_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.flight_route_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(1, false, "flight_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.flight_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(2, false, "waypoints", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.begin_array(XTypes::TK_STRING8)) {
        return false;
      }
      for (::CORBA::ULong i = 0; i != 2; ++i) {
        if (!value_writer.begin_element(static_cast<ACE_CDR::ULong>(i))) {
          return false;
        }
        if (!value_writer.write_string(value.waypoints[i])) {
          return false;
        }
        if (!value_writer.end_element()) {
          return false;
        }
      }
      if (!value_writer.end_array()) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(3, false, "estimated_time", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.estimated_time)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(4, false, "status", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_boolean(value.status)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  return value_writer.end_struct();
}

bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const NestedKeyOnly<const  ::UATM::flightRoutesInfo>& value)
{
  ACE_UNUSED_ARG(value_writer);
  ACE_UNUSED_ARG(value);
  if (!value_writer.begin_struct(OpenDDS::DCPS::APPENDABLE)) {
    return false;
  }
  {
    MemberParam param(0, false, "flight_route_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.value.flight_route_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(1, false, "flight_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.value.flight_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(2, false, "waypoints", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.begin_array(XTypes::TK_STRING8)) {
        return false;
      }
      for (::CORBA::ULong i = 0; i != 2; ++i) {
        if (!value_writer.begin_element(static_cast<ACE_CDR::ULong>(i))) {
          return false;
        }
        if (!value_writer.write_string(value.value.waypoints[i])) {
          return false;
        }
        if (!value_writer.end_element()) {
          return false;
        }
      }
      if (!value_writer.end_array()) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(3, false, "estimated_time", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.value.estimated_time)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(4, false, "status", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_boolean(value.value.status)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  return value_writer.end_struct();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> void set_default( ::UATM::flightRoutesInfo& stru)
{
  ACE_UNUSED_ARG(stru);
  stru.flight_route_id = 0;
  stru.flight_id = 0;
   ::UATM::ArrayString_forany stru_waypoints_temp(const_cast< ::UATM::ArrayString_slice*>(stru.waypoints));
  set_default(stru_waypoints_temp);
  stru.estimated_time = "";
  stru.status = 0;
}

void serialized_size(const Encoding& encoding, size_t& size, const ::UATM::flightRoutesInfo& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
   ::UATM::ArrayString_forany stru_waypoints_forany(const_cast< ::UATM::ArrayString_slice*>(stru.waypoints));
  primitive_serialized_size(encoding, size, stru.flight_route_id);
  primitive_serialized_size(encoding, size, stru.flight_id);
  serialized_size(encoding, size, stru_waypoints_forany);
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.estimated_time.in()) + 1;
  primitive_serialized_size(encoding, size, ACE_OutputCDR::from_boolean(stru.status));
}

bool operator<<(Serializer& strm, const ::UATM::flightRoutesInfo& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
   ::UATM::ArrayString_forany stru_waypoints_forany(const_cast< ::UATM::ArrayString_slice*>(stru.waypoints));
  return (strm << stru.flight_route_id)
    && (strm << stru.flight_id)
    && (strm << stru_waypoints_forany)
    && (strm << ACE_OutputCDR::from_string(stru.estimated_time.in(), 20))
    && (strm << ACE_OutputCDR::from_boolean(stru.status));
}

bool operator>>(Serializer& strm,  ::UATM::flightRoutesInfo& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  bool reached_end_of_struct = false;
  ACE_UNUSED_ARG(reached_end_of_struct);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

   ::UATM::ArrayString_forany stru_waypoints_forany(const_cast< ::UATM::ArrayString_slice*>(stru.waypoints));
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.flight_route_id = 0;
  } else {
    if (!(strm >> stru.flight_route_id)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.flight_id = 0;
  } else {
    if (!(strm >> stru.flight_id)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
     ::UATM::ArrayString_forany stru_waypoints_temp(const_cast< ::UATM::ArrayString_slice*>(stru.waypoints));
    set_default(stru_waypoints_temp);
  } else {
    if (!(strm >> stru_waypoints_forany)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.estimated_time = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.estimated_time.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.status = 0;
  } else {
    if (!(strm >> ACE_InputCDR::to_boolean(stru.status))) {
      return false;
    }
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const ::UATM::flightRoutesInfo>& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
   ::UATM::ArrayString_forany stru_value_waypoints_forany(const_cast< ::UATM::ArrayString_slice*>(stru.value.waypoints));
  primitive_serialized_size(encoding, size, stru.value.flight_route_id);
  primitive_serialized_size(encoding, size, stru.value.flight_id);
  serialized_size(encoding, size, stru_value_waypoints_forany);
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.value.estimated_time.in()) + 1;
  primitive_serialized_size(encoding, size, ACE_OutputCDR::from_boolean(stru.value.status));
}

bool operator<<(Serializer& strm, const NestedKeyOnly<const ::UATM::flightRoutesInfo>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
   ::UATM::ArrayString_forany stru_value_waypoints_forany(const_cast< ::UATM::ArrayString_slice*>(stru.value.waypoints));
  return (strm << stru.value.flight_route_id)
    && (strm << stru.value.flight_id)
    && (strm << stru_value_waypoints_forany)
    && (strm << ACE_OutputCDR::from_string(stru.value.estimated_time.in(), 20))
    && (strm << ACE_OutputCDR::from_boolean(stru.value.status));
}

bool operator>>(Serializer& strm, const NestedKeyOnly< ::UATM::flightRoutesInfo>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  bool reached_end_of_struct = false;
  ACE_UNUSED_ARG(reached_end_of_struct);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

   ::UATM::ArrayString_forany stru_value_waypoints_forany(const_cast< ::UATM::ArrayString_slice*>(stru.value.waypoints));
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.flight_route_id = 0;
  } else {
    if (!(strm >> stru.value.flight_route_id)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.flight_id = 0;
  } else {
    if (!(strm >> stru.value.flight_id)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
     ::UATM::ArrayString_forany stru_value_waypoints_temp(const_cast< ::UATM::ArrayString_slice*>(stru.value.waypoints));
    set_default(stru_value_waypoints_temp);
  } else {
    if (!(strm >> stru_value_waypoints_forany)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.estimated_time = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.value.estimated_time.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.status = 0;
  } else {
    if (!(strm >> ACE_InputCDR::to_boolean(stru.value.status))) {
      return false;
    }
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

void serialized_size(const Encoding& encoding, size_t& size, const KeyOnly<const  ::UATM::flightRoutesInfo> stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  switch (encoding.xcdr_version()) {
  case Encoding::XCDR_VERSION_1:
    {
    primitive_serialized_size(encoding, size, stru.value.flight_route_id);
    break;
    }
  case Encoding::XCDR_VERSION_2:
    {
    primitive_serialized_size(encoding, size, stru.value.flight_route_id);
    break;
    }
  case Encoding::XCDR_VERSION_NONE:
    {
    primitive_serialized_size(encoding, size, stru.value.flight_route_id);
    break;
    }
  }
}

bool operator<<(Serializer& strm, KeyOnly<const  ::UATM::flightRoutesInfo> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.value.flight_route_id);
}

bool operator>>(Serializer& strm, KeyOnly< ::UATM::flightRoutesInfo> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.value.flight_route_id);
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace DCPS {
bool DDSTraits< ::UATM::flightRoutesInfo>::is_key(const char* field)
{
  ACE_UNUSED_ARG(field);
  if (!ACE_OS::strcmp(field, "flight_route_id")) {
    return true;
  }
  return false;
}
} // namespace DCPS
} // namespace OpenDDS
OPENDDS_END_VERSIONED_NAMESPACE_DECL

namespace UATM {
::DDS::DataWriter_ptr flightRoutesInfoTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<flightRoutesInfo> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}

::DDS::DataReader_ptr flightRoutesInfoTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<flightRoutesInfo> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}

#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr flightRoutesInfoTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<flightRoutesInfo> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<flightRoutesInfo, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */

#ifndef OPENDDS_SAFETY_PROFILE
flightRoutesInfo* flightRoutesInfoTypeSupportImpl::create_sample(::DDS::DynamicData_ptr src)
{
  flightRoutesInfo* value = new flightRoutesInfo;
  const ::DDS::ReturnCode_t rc = OpenDDS::DCPS::TypeSupportImpl_T<flightRoutesInfo>::create_sample_rc(*value, src);
  if (rc != ::DDS::RETCODE_OK && OpenDDS::DCPS::log_level >= OpenDDS::DCPS::LogLevel::Warning) {
    ACE_ERROR((LM_WARNING, "(%P|%t) WARNING: flightRoutesInfoTypeSupportImpl::create_sample: "
      "create_sample_rc failed: %C\n", OpenDDS::DCPS::retcode_to_string(rc)));
  }
  return value;
}
#endif

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& flightRoutesInfoTypeSupportImpl::getMetaStructForType() const
{
  return OpenDDS::DCPS::getMetaStruct<flightRoutesInfo>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */

namespace {
  OpenDDS::DCPS::TypeSupportInitializer<flightRoutesInfoTypeSupportImpl> ts_init_UATM_flightRoutesInfo;
}

const OpenDDS::XTypes::TypeIdentifier& flightRoutesInfoTypeSupportImpl::getMinimalTypeIdentifier() const
{
  return OpenDDS::DCPS::getMinimalTypeIdentifier<OpenDDS::DCPS::UATM_flightRoutesInfo_xtag>();
}

const OpenDDS::XTypes::TypeMap& flightRoutesInfoTypeSupportImpl::getMinimalTypeMap() const
{
  return OpenDDS::DCPS::getMinimalTypeMap<OpenDDS::DCPS::UATM_flightRoutesInfo_xtag>();
}

const OpenDDS::XTypes::TypeIdentifier& flightRoutesInfoTypeSupportImpl::getCompleteTypeIdentifier() const
{
  static OpenDDS::XTypes::TypeIdentifier ti;
  return ti;
}

const OpenDDS::XTypes::TypeMap& flightRoutesInfoTypeSupportImpl::getCompleteTypeMap() const
{
  static OpenDDS::XTypes::TypeMap tm;
  return tm;
}

::DDS::ReturnCode_t flightRoutesInfoTypeSupportImpl::encode_to_string(const flightRoutesInfo& in, CORBA::String_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
#if OPENDDS_HAS_JSON_VALUE_WRITER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    rapidjson::StringBuffer buffer;
    rapidjson::Writer<rapidjson::StringBuffer> writer(buffer);
    OpenDDS::DCPS::JsonValueWriter<rapidjson::Writer<rapidjson::StringBuffer> > jvw(writer);
    if (!vwrite(jvw, in)) {
      return ::DDS::RETCODE_ERROR;
    }
    out = buffer.GetString();
    return ::DDS::RETCODE_OK;
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  out = "";
  return ::DDS::RETCODE_UNSUPPORTED;
}

::DDS::ReturnCode_t flightRoutesInfoTypeSupportImpl::encode_to_bytes(const flightRoutesInfo& in, ::DDS::OctetSeq_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
#if OPENDDS_HAS_JSON_VALUE_WRITER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    CORBA::String_var buffer;
    const ::DDS::ReturnCode_t ret = encode_to_string(in, buffer, format);
    if (ret == ::DDS::RETCODE_OK) {
      const ::DDS::UInt32 len = static_cast< ::DDS::UInt32>(std::strlen(buffer));
      out = new ::DDS::OctetSeq(len);
      out->length(len);
      std::memcpy(out->get_buffer(), buffer, len);
      return ::DDS::RETCODE_OK;
    } else {
      out = new ::DDS::OctetSeq();
      return ret;
    }
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  out = new ::DDS::OctetSeq();
  return ::DDS::RETCODE_UNSUPPORTED;
}

::DDS::ReturnCode_t flightRoutesInfoTypeSupportImpl::decode_from_string(const char* in, flightRoutesInfo_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
  out = new flightRoutesInfo;
  OpenDDS::DCPS::set_default(*out);
#if OPENDDS_HAS_JSON_VALUE_READER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    rapidjson::StringStream buffer(in);
    OpenDDS::DCPS::JsonValueReader<> jvr(buffer);
    return vread(jvr, *out) ? ::DDS::RETCODE_OK : ::DDS::RETCODE_ERROR;
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  return ::DDS::RETCODE_UNSUPPORTED;
}

::DDS::ReturnCode_t flightRoutesInfoTypeSupportImpl::decode_from_bytes(const ::DDS::OctetSeq& in, flightRoutesInfo_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
#if OPENDDS_HAS_JSON_VALUE_READER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    return decode_from_string(reinterpret_cast<const char*>(in.get_buffer()), out, format);
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  out = new flightRoutesInfo();
  return ::DDS::RETCODE_UNSUPPORTED;
}

flightRoutesInfoTypeSupport::_ptr_type flightRoutesInfoTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl< ::UATM::flightRoutesInfo> : MetaStruct {
  typedef  ::UATM::flightRoutesInfo T;

#ifndef OPENDDS_NO_MULTI_TOPIC
  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 1; }

#endif /* OPENDDS_NO_MULTI_TOPIC */

  Value getValue(const void* stru, const char* field) const
  {
    const ::UATM::flightRoutesInfo& typed = *static_cast<const ::UATM::flightRoutesInfo*>(stru);
    ACE_UNUSED_ARG(typed);
    if (std::strcmp(field, "flight_route_id") == 0) {
      return typed.flight_route_id;
    }
    if (std::strcmp(field, "flight_id") == 0) {
      return typed.flight_id;
    }
    if (std::strcmp(field, "estimated_time") == 0) {
      return typed.estimated_time.in();
    }
    if (std::strcmp(field, "status") == 0) {
      return typed.status;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::flightRoutesInfo)");
  }

  Value getValue(Serializer& strm, const char* field, TypeSupportImpl* = 0) const
  {
    const Encoding& encoding = strm.encoding();
    ACE_UNUSED_ARG(encoding);
    size_t total_size = 0;
    if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
      if (!strm.read_delimiter(total_size)) {
        throw std::runtime_error("Unable to reader delimiter in getValue");
      }
    }
    std::string base_field = field;
    const size_t index = base_field.find('.');
    std::string subfield;
    if (index != std::string::npos) {
      subfield = base_field.substr(index + 1);
      base_field = base_field.substr(0, index);
    }
    if (base_field == "flight_route_id") {
      ACE_CDR::Long val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'flight_route_id' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'flight_route_id' could not be skipped");
      }
    }
    if (base_field == "flight_id") {
      ACE_CDR::Long val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'flight_id' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'flight_id' could not be skipped");
      }
    }
    if (!gen_skip_over(strm, static_cast< ::UATM::ArrayString_forany*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (base_field == "estimated_time") {
      TAO::String_Manager val;
      if (!(strm >> val.out())) {
        throw std::runtime_error("Field 'estimated_time' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(strm >> len)) {
        throw std::runtime_error("String 'estimated_time' length could not be deserialized");
      }
      if (!strm.skip(len)) {
        throw std::runtime_error("String 'estimated_time' contents could not be skipped");
      }
    }
    if (base_field == "status") {
      ACE_CDR::Boolean val;
      if (!(strm >> ACE_InputCDR::to_boolean(val))) {
        throw std::runtime_error("Field 'status' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  1 )) {
        throw std::runtime_error("Field 'status' could not be skipped");
      }
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Did not find field in getValue");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "flight_route_id") == 0) {
      return make_field_cmp(&T::flight_route_id, next);
    }
    if (std::strcmp(field, "flight_id") == 0) {
      return make_field_cmp(&T::flight_id, next);
    }
    if (std::strcmp(field, "estimated_time") == 0) {
      return make_field_cmp(&T::estimated_time, next);
    }
    if (std::strcmp(field, "status") == 0) {
      return make_field_cmp(&T::status, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::flightRoutesInfo)");
  }

#ifndef OPENDDS_NO_MULTI_TOPIC
  const char** getFieldNames() const
  {
    static const char* names[] = {"flight_route_id", "flight_id", "waypoints", "estimated_time", "status", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "flight_route_id") == 0) {
      return &static_cast<const T*>(stru)->flight_route_id;
    }
    if (std::strcmp(field, "flight_id") == 0) {
      return &static_cast<const T*>(stru)->flight_id;
    }
    if (std::strcmp(field, "waypoints") == 0) {
      return &static_cast<const T*>(stru)->waypoints;
    }
    if (std::strcmp(field, "estimated_time") == 0) {
      return &static_cast<const T*>(stru)->estimated_time;
    }
    if (std::strcmp(field, "status") == 0) {
      return &static_cast<const T*>(stru)->status;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::flightRoutesInfo)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "flight_route_id") == 0) {
      static_cast<T*>(lhs)->flight_route_id = *static_cast<const  ::CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "flight_id") == 0) {
      static_cast<T*>(lhs)->flight_id = *static_cast<const  ::CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "waypoints") == 0) {
       ::UATM::ArrayString* lhsArr = &static_cast<T*>(lhs)->waypoints;
      const  ::UATM::ArrayString* rhsArr = static_cast<const  ::UATM::ArrayString*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      for (CORBA::ULong i0 = 0; i0 < 2; ++i0) {
        (*lhsArr)[i0] = (*rhsArr)[i0];
      }
      return;
    }
    if (std::strcmp(field, "estimated_time") == 0) {
      static_cast<T*>(lhs)->estimated_time = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "status") == 0) {
      static_cast<T*>(lhs)->status = *static_cast<const  ::CORBA::Boolean*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::flightRoutesInfo)");
  }

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "flight_route_id") == 0) {
      return static_cast<const T*>(lhs)->flight_route_id == static_cast<const T*>(rhs)->flight_route_id;
    }
    if (std::strcmp(field, "flight_id") == 0) {
      return static_cast<const T*>(lhs)->flight_id == static_cast<const T*>(rhs)->flight_id;
    }
    if (std::strcmp(field, "estimated_time") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->estimated_time.in(), static_cast<const T*>(rhs)->estimated_time.in());
    }
    if (std::strcmp(field, "status") == 0) {
      return static_cast<const T*>(lhs)->status == static_cast<const T*>(rhs)->status;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::flightRoutesInfo)");
  }
#endif /* OPENDDS_NO_MULTI_TOPIC */

};

template<>
const MetaStruct& getMetaStruct< ::UATM::flightRoutesInfo>()
{
  static MetaStructImpl< ::UATM::flightRoutesInfo> msi;
  return msi;
}

bool gen_skip_over(Serializer& ser,  ::UATM::flightRoutesInfo*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl< ::UATM::flightRoutesInfo>().getValue(ser, "");
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif // ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace XTypes {

#ifndef OPENDDS_SAFETY_PROFILE
#if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
template <>
class DynamicDataAdapterImpl< ::UATM::flightRoutesInfo,  ::UATM::flightRoutesInfo > : public DynamicDataAdapter_T< ::UATM::flightRoutesInfo> {
public:
  DynamicDataAdapterImpl(DDS::DynamicType_ptr type,  ::UATM::flightRoutesInfo& value)
    : DynamicDataAdapter_T< ::UATM::flightRoutesInfo>(type, value)
  {
  }

  DynamicDataAdapterImpl(DDS::DynamicType_ptr type, const  ::UATM::flightRoutesInfo& value)
    : DynamicDataAdapter_T< ::UATM::flightRoutesInfo>(type, value)
  {
  }

  DDS::ReturnCode_t clear_all_values()
  {
    const DDS::ReturnCode_t rc = assert_mutable("DynamicDataAdapter::clear_all_values");
    if (rc == DDS::RETCODE_OK) {
      OpenDDS::DCPS::set_default(value_);
    }
    return rc;
  }

  DDS::UInt32 get_item_count()
  {
    return 5;
  }

  bool serialized_size(const OpenDDS::DCPS::Encoding& enc, size_t& size, OpenDDS::DCPS::Sample::Extent ext) const
  {
    using namespace OpenDDS::DCPS;
    if (ext == Sample::Full) {
      DCPS::serialized_size(enc, size, value_);
    } else if (ext == Sample::NestedKeyOnly) {
      const NestedKeyOnly<const  ::UATM::flightRoutesInfo> nested_key_only(value_);
      DCPS::serialized_size(enc, size, nested_key_only);
    } else {
      return false; // Non-topic type
    }
    return true;
  }

  bool serialize(OpenDDS::DCPS::Serializer& ser, OpenDDS::DCPS::Sample::Extent ext) const
  {
    using namespace OpenDDS::DCPS;
    if (ext == Sample::Full) {
      return ser << value_;
    } else if (ext == Sample::NestedKeyOnly) {
      NestedKeyOnly<const  ::UATM::flightRoutesInfo> nested_key_only(value_);
      return ser << nested_key_only;
    } else {
      return false; // Non-topic type
    }
  }

protected:
  DDS::ReturnCode_t get_raw_value(const char* method, void* dest, DDS::TypeKind tk, DDS::MemberId id)
  {
    switch (id) {
    case 0:
      {
        return get_simple_raw_value(method, dest, tk, value_.flight_route_id, id);
      }
    case 1:
      {
        return get_simple_raw_value(method, dest, tk, value_.flight_id, id);
      }
    case 2:
      {
        return get_complex_raw_value< ::UATM::ArrayString, UATM_ArrayString_dda_tag>(method, dest, tk, value_.waypoints, id);
      }
    case 3:
      {
        return get_s8_raw_value(method, dest, tk, value_.estimated_time, id);
      }
    case 4:
      {
        return get_simple_raw_value(method, dest, tk, value_.status, id);
      }
    default:
      return invalid_id(method, id);
    }
  }

  DDS::ReturnCode_t set_raw_value(const char* method, DDS::MemberId id, const void* source, DDS::TypeKind tk)
  {
    DDS::ReturnCode_t rc = assert_mutable(method);
    if (rc != DDS::RETCODE_OK) {
      return rc;
    }
    switch (id) {
    case 0:
      {
        return set_simple_raw_value(method, value_.flight_route_id, id, source, tk);
      }
    case 1:
      {
        return set_simple_raw_value(method, value_.flight_id, id, source, tk);
      }
    case 2:
      {
        return set_indirect_complex_raw_value< ::UATM::ArrayString, UATM_ArrayString_dda_tag>(method, value_.waypoints, id, source, tk);
      }
    case 3:
      {
        return set_s8_raw_value(method, value_.estimated_time.inout(), id, source, tk);
      }
    case 4:
      {
        return set_simple_raw_value(method, value_.status, id, source, tk);
      }
    default:
      return invalid_id(method, id);
    }
  }
};

#endif // if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER

template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::flightRoutesInfo,  ::UATM::flightRoutesInfo>(DDS::DynamicType_ptr type, const  ::UATM::flightRoutesInfo& value)
{
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  if (type) {
    return new DynamicDataAdapterImpl< ::UATM::flightRoutesInfo,  ::UATM::flightRoutesInfo>(type, value);
  }
#  else
  ACE_UNUSED_ARG(type);
  ACE_UNUSED_ARG(value);
#  endif
  return 0;
}

template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::flightRoutesInfo,  ::UATM::flightRoutesInfo>(DDS::DynamicType_ptr type,  ::UATM::flightRoutesInfo& value)
{
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  if (type) {
    return new DynamicDataAdapterImpl< ::UATM::flightRoutesInfo,  ::UATM::flightRoutesInfo>(type, value);
  }
#  else
  ACE_UNUSED_ARG(type);
  ACE_UNUSED_ARG(value);
#  endif
  return 0;
}

template <>
const  ::UATM::flightRoutesInfo* get_dynamic_data_adapter_value< ::UATM::flightRoutesInfo,  ::UATM::flightRoutesInfo>(DDS::DynamicData_ptr dd)
{
  ACE_UNUSED_ARG(dd);
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  typedef DynamicDataAdapterImpl< ::UATM::flightRoutesInfo,  ::UATM::flightRoutesInfo> Dda;
  const Dda* const dda = dynamic_cast<Dda*>(dd);
  if (dda) {
    return &dda->wrapped();
  }
#  endif
  return 0;
}
#endif // ifndef OPENDDS_SAFETY_PROFILE

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End STRUCT: flightRoutesInfo */

/* End MODULE: UATM */


/* Begin MODULE: UATM */



/* Begin STRUCT: tolPadRequest */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> const XTypes::TypeIdentifier& getMinimalTypeIdentifier<UATM_tolPadRequest_xtag>()
{
  static XTypes::TypeIdentifier ti;
  ACE_GUARD_RETURN(ACE_Thread_Mutex, guard, TheServiceParticipant->get_static_xtypes_lock(), ti);
  if (ti.kind() == XTypes::TK_NONE) {
    ti = XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(31, 242, 6, 28, 208, 105, 241, 201, 108, 219, 22, 235, 214, 200));
  }
  return ti;
}

template<> const XTypes::TypeMap& getMinimalTypeMap<UATM_tolPadRequest_xtag>()
{
  return OPENDDS_IDL_FILE_SPECIFIC(get_minimal_type_map, 0)();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool vread(OpenDDS::DCPS::ValueReader& value_reader,  ::UATM::tolPadRequest& value)
{
  ACE_UNUSED_ARG(value_reader);
  ACE_UNUSED_ARG(value);
  static const ListMemberHelper::Pair pairs[] = {{"assign_id",0},{"flight_id",1},{"tol_pad_id",2},{"assign_time",3},{0,0}};
  ListMemberHelper helper(pairs);
  if (!value_reader.begin_struct(OpenDDS::DCPS::APPENDABLE)) return false;
  XTypes::MemberId member_id;
  while (value_reader.members_remaining()) {
    if (!value_reader.begin_struct_member(member_id, helper)) return false;
    switch (member_id) {
    case 0: {
      if (!value_reader.read_int32(value.assign_id)) return false;
      break;
    }
    case 1: {
      if (!value_reader.read_int32(value.flight_id)) return false;
      break;
    }
    case 2: {
      if (!value_reader.read_int32(value.tol_pad_id)) return false;
      break;
    }
    case 3: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.assign_time = x.c_str();
      }
      break;
    }
    }
    if (!value_reader.end_struct_member()) return false;
  }
  if (!value_reader.end_struct()) return false;
  return true;
}

bool vread(OpenDDS::DCPS::ValueReader& value_reader, const NestedKeyOnly< ::UATM::tolPadRequest>& value)
{
  ACE_UNUSED_ARG(value_reader);
  ACE_UNUSED_ARG(value);
  static const ListMemberHelper::Pair pairs[] = {{"assign_id",0},{"flight_id",1},{"tol_pad_id",2},{"assign_time",3},{0,0}};
  ListMemberHelper helper(pairs);
  if (!value_reader.begin_struct(OpenDDS::DCPS::APPENDABLE)) return false;
  XTypes::MemberId member_id;
  while (value_reader.members_remaining()) {
    if (!value_reader.begin_struct_member(member_id, helper)) return false;
    switch (member_id) {
    case 0: {
      if (!value_reader.read_int32(value.value.assign_id)) return false;
      break;
    }
    case 1: {
      if (!value_reader.read_int32(value.value.flight_id)) return false;
      break;
    }
    case 2: {
      if (!value_reader.read_int32(value.value.tol_pad_id)) return false;
      break;
    }
    case 3: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.value.assign_time = x.c_str();
      }
      break;
    }
    }
    if (!value_reader.end_struct_member()) return false;
  }
  if (!value_reader.end_struct()) return false;
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const  ::UATM::tolPadRequest& value)
{
  ACE_UNUSED_ARG(value_writer);
  ACE_UNUSED_ARG(value);
  if (!value_writer.begin_struct(OpenDDS::DCPS::APPENDABLE)) {
    return false;
  }
  {
    MemberParam param(0, false, "assign_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.assign_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(1, false, "flight_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.flight_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(2, false, "tol_pad_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.tol_pad_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(3, false, "assign_time", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.assign_time)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  return value_writer.end_struct();
}

bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const NestedKeyOnly<const  ::UATM::tolPadRequest>& value)
{
  ACE_UNUSED_ARG(value_writer);
  ACE_UNUSED_ARG(value);
  if (!value_writer.begin_struct(OpenDDS::DCPS::APPENDABLE)) {
    return false;
  }
  {
    MemberParam param(0, false, "assign_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.value.assign_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(1, false, "flight_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.value.flight_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(2, false, "tol_pad_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.value.tol_pad_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(3, false, "assign_time", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.value.assign_time)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  return value_writer.end_struct();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> void set_default( ::UATM::tolPadRequest& stru)
{
  ACE_UNUSED_ARG(stru);
  stru.assign_id = 0;
  stru.flight_id = 0;
  stru.tol_pad_id = 0;
  stru.assign_time = "";
}

void serialized_size(const Encoding& encoding, size_t& size, const ::UATM::tolPadRequest& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
  primitive_serialized_size(encoding, size, stru.assign_id);
  primitive_serialized_size(encoding, size, stru.flight_id);
  primitive_serialized_size(encoding, size, stru.tol_pad_id);
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.assign_time.in()) + 1;
}

bool operator<<(Serializer& strm, const ::UATM::tolPadRequest& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
  return (strm << stru.assign_id)
    && (strm << stru.flight_id)
    && (strm << stru.tol_pad_id)
    && (strm << ACE_OutputCDR::from_string(stru.assign_time.in(), 20));
}

bool operator>>(Serializer& strm,  ::UATM::tolPadRequest& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  bool reached_end_of_struct = false;
  ACE_UNUSED_ARG(reached_end_of_struct);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.assign_id = 0;
  } else {
    if (!(strm >> stru.assign_id)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.flight_id = 0;
  } else {
    if (!(strm >> stru.flight_id)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.tol_pad_id = 0;
  } else {
    if (!(strm >> stru.tol_pad_id)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.assign_time = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.assign_time.out(), 20))) {
      return false;
    }
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const ::UATM::tolPadRequest>& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
  primitive_serialized_size(encoding, size, stru.value.assign_id);
  primitive_serialized_size(encoding, size, stru.value.flight_id);
  primitive_serialized_size(encoding, size, stru.value.tol_pad_id);
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.value.assign_time.in()) + 1;
}

bool operator<<(Serializer& strm, const NestedKeyOnly<const ::UATM::tolPadRequest>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
  return (strm << stru.value.assign_id)
    && (strm << stru.value.flight_id)
    && (strm << stru.value.tol_pad_id)
    && (strm << ACE_OutputCDR::from_string(stru.value.assign_time.in(), 20));
}

bool operator>>(Serializer& strm, const NestedKeyOnly< ::UATM::tolPadRequest>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  bool reached_end_of_struct = false;
  ACE_UNUSED_ARG(reached_end_of_struct);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.assign_id = 0;
  } else {
    if (!(strm >> stru.value.assign_id)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.flight_id = 0;
  } else {
    if (!(strm >> stru.value.flight_id)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.tol_pad_id = 0;
  } else {
    if (!(strm >> stru.value.tol_pad_id)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.assign_time = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.value.assign_time.out(), 20))) {
      return false;
    }
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

void serialized_size(const Encoding& encoding, size_t& size, const KeyOnly<const  ::UATM::tolPadRequest> stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  switch (encoding.xcdr_version()) {
  case Encoding::XCDR_VERSION_1:
    {
    primitive_serialized_size(encoding, size, stru.value.assign_id);
    break;
    }
  case Encoding::XCDR_VERSION_2:
    {
    primitive_serialized_size(encoding, size, stru.value.assign_id);
    break;
    }
  case Encoding::XCDR_VERSION_NONE:
    {
    primitive_serialized_size(encoding, size, stru.value.assign_id);
    break;
    }
  }
}

bool operator<<(Serializer& strm, KeyOnly<const  ::UATM::tolPadRequest> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.value.assign_id);
}

bool operator>>(Serializer& strm, KeyOnly< ::UATM::tolPadRequest> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.value.assign_id);
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace DCPS {
bool DDSTraits< ::UATM::tolPadRequest>::is_key(const char* field)
{
  ACE_UNUSED_ARG(field);
  if (!ACE_OS::strcmp(field, "assign_id")) {
    return true;
  }
  return false;
}
} // namespace DCPS
} // namespace OpenDDS
OPENDDS_END_VERSIONED_NAMESPACE_DECL

namespace UATM {
::DDS::DataWriter_ptr tolPadRequestTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<tolPadRequest> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}

::DDS::DataReader_ptr tolPadRequestTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<tolPadRequest> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}

#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr tolPadRequestTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<tolPadRequest> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<tolPadRequest, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */

#ifndef OPENDDS_SAFETY_PROFILE
tolPadRequest* tolPadRequestTypeSupportImpl::create_sample(::DDS::DynamicData_ptr src)
{
  tolPadRequest* value = new tolPadRequest;
  const ::DDS::ReturnCode_t rc = OpenDDS::DCPS::TypeSupportImpl_T<tolPadRequest>::create_sample_rc(*value, src);
  if (rc != ::DDS::RETCODE_OK && OpenDDS::DCPS::log_level >= OpenDDS::DCPS::LogLevel::Warning) {
    ACE_ERROR((LM_WARNING, "(%P|%t) WARNING: tolPadRequestTypeSupportImpl::create_sample: "
      "create_sample_rc failed: %C\n", OpenDDS::DCPS::retcode_to_string(rc)));
  }
  return value;
}
#endif

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& tolPadRequestTypeSupportImpl::getMetaStructForType() const
{
  return OpenDDS::DCPS::getMetaStruct<tolPadRequest>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */

namespace {
  OpenDDS::DCPS::TypeSupportInitializer<tolPadRequestTypeSupportImpl> ts_init_UATM_tolPadRequest;
}

const OpenDDS::XTypes::TypeIdentifier& tolPadRequestTypeSupportImpl::getMinimalTypeIdentifier() const
{
  return OpenDDS::DCPS::getMinimalTypeIdentifier<OpenDDS::DCPS::UATM_tolPadRequest_xtag>();
}

const OpenDDS::XTypes::TypeMap& tolPadRequestTypeSupportImpl::getMinimalTypeMap() const
{
  return OpenDDS::DCPS::getMinimalTypeMap<OpenDDS::DCPS::UATM_tolPadRequest_xtag>();
}

const OpenDDS::XTypes::TypeIdentifier& tolPadRequestTypeSupportImpl::getCompleteTypeIdentifier() const
{
  static OpenDDS::XTypes::TypeIdentifier ti;
  return ti;
}

const OpenDDS::XTypes::TypeMap& tolPadRequestTypeSupportImpl::getCompleteTypeMap() const
{
  static OpenDDS::XTypes::TypeMap tm;
  return tm;
}

::DDS::ReturnCode_t tolPadRequestTypeSupportImpl::encode_to_string(const tolPadRequest& in, CORBA::String_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
#if OPENDDS_HAS_JSON_VALUE_WRITER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    rapidjson::StringBuffer buffer;
    rapidjson::Writer<rapidjson::StringBuffer> writer(buffer);
    OpenDDS::DCPS::JsonValueWriter<rapidjson::Writer<rapidjson::StringBuffer> > jvw(writer);
    if (!vwrite(jvw, in)) {
      return ::DDS::RETCODE_ERROR;
    }
    out = buffer.GetString();
    return ::DDS::RETCODE_OK;
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  out = "";
  return ::DDS::RETCODE_UNSUPPORTED;
}

::DDS::ReturnCode_t tolPadRequestTypeSupportImpl::encode_to_bytes(const tolPadRequest& in, ::DDS::OctetSeq_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
#if OPENDDS_HAS_JSON_VALUE_WRITER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    CORBA::String_var buffer;
    const ::DDS::ReturnCode_t ret = encode_to_string(in, buffer, format);
    if (ret == ::DDS::RETCODE_OK) {
      const ::DDS::UInt32 len = static_cast< ::DDS::UInt32>(std::strlen(buffer));
      out = new ::DDS::OctetSeq(len);
      out->length(len);
      std::memcpy(out->get_buffer(), buffer, len);
      return ::DDS::RETCODE_OK;
    } else {
      out = new ::DDS::OctetSeq();
      return ret;
    }
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  out = new ::DDS::OctetSeq();
  return ::DDS::RETCODE_UNSUPPORTED;
}

::DDS::ReturnCode_t tolPadRequestTypeSupportImpl::decode_from_string(const char* in, tolPadRequest_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
  out = new tolPadRequest;
  OpenDDS::DCPS::set_default(*out);
#if OPENDDS_HAS_JSON_VALUE_READER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    rapidjson::StringStream buffer(in);
    OpenDDS::DCPS::JsonValueReader<> jvr(buffer);
    return vread(jvr, *out) ? ::DDS::RETCODE_OK : ::DDS::RETCODE_ERROR;
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  return ::DDS::RETCODE_UNSUPPORTED;
}

::DDS::ReturnCode_t tolPadRequestTypeSupportImpl::decode_from_bytes(const ::DDS::OctetSeq& in, tolPadRequest_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
#if OPENDDS_HAS_JSON_VALUE_READER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    return decode_from_string(reinterpret_cast<const char*>(in.get_buffer()), out, format);
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  out = new tolPadRequest();
  return ::DDS::RETCODE_UNSUPPORTED;
}

tolPadRequestTypeSupport::_ptr_type tolPadRequestTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl< ::UATM::tolPadRequest> : MetaStruct {
  typedef  ::UATM::tolPadRequest T;

#ifndef OPENDDS_NO_MULTI_TOPIC
  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 1; }

#endif /* OPENDDS_NO_MULTI_TOPIC */

  Value getValue(const void* stru, const char* field) const
  {
    const ::UATM::tolPadRequest& typed = *static_cast<const ::UATM::tolPadRequest*>(stru);
    ACE_UNUSED_ARG(typed);
    if (std::strcmp(field, "assign_id") == 0) {
      return typed.assign_id;
    }
    if (std::strcmp(field, "flight_id") == 0) {
      return typed.flight_id;
    }
    if (std::strcmp(field, "tol_pad_id") == 0) {
      return typed.tol_pad_id;
    }
    if (std::strcmp(field, "assign_time") == 0) {
      return typed.assign_time.in();
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::tolPadRequest)");
  }

  Value getValue(Serializer& strm, const char* field, TypeSupportImpl* = 0) const
  {
    const Encoding& encoding = strm.encoding();
    ACE_UNUSED_ARG(encoding);
    size_t total_size = 0;
    if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
      if (!strm.read_delimiter(total_size)) {
        throw std::runtime_error("Unable to reader delimiter in getValue");
      }
    }
    std::string base_field = field;
    const size_t index = base_field.find('.');
    std::string subfield;
    if (index != std::string::npos) {
      subfield = base_field.substr(index + 1);
      base_field = base_field.substr(0, index);
    }
    if (base_field == "assign_id") {
      ACE_CDR::Long val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'assign_id' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'assign_id' could not be skipped");
      }
    }
    if (base_field == "flight_id") {
      ACE_CDR::Long val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'flight_id' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'flight_id' could not be skipped");
      }
    }
    if (base_field == "tol_pad_id") {
      ACE_CDR::Long val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'tol_pad_id' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'tol_pad_id' could not be skipped");
      }
    }
    if (base_field == "assign_time") {
      TAO::String_Manager val;
      if (!(strm >> val.out())) {
        throw std::runtime_error("Field 'assign_time' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(strm >> len)) {
        throw std::runtime_error("String 'assign_time' length could not be deserialized");
      }
      if (!strm.skip(len)) {
        throw std::runtime_error("String 'assign_time' contents could not be skipped");
      }
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Did not find field in getValue");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "assign_id") == 0) {
      return make_field_cmp(&T::assign_id, next);
    }
    if (std::strcmp(field, "flight_id") == 0) {
      return make_field_cmp(&T::flight_id, next);
    }
    if (std::strcmp(field, "tol_pad_id") == 0) {
      return make_field_cmp(&T::tol_pad_id, next);
    }
    if (std::strcmp(field, "assign_time") == 0) {
      return make_field_cmp(&T::assign_time, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::tolPadRequest)");
  }

#ifndef OPENDDS_NO_MULTI_TOPIC
  const char** getFieldNames() const
  {
    static const char* names[] = {"assign_id", "flight_id", "tol_pad_id", "assign_time", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "assign_id") == 0) {
      return &static_cast<const T*>(stru)->assign_id;
    }
    if (std::strcmp(field, "flight_id") == 0) {
      return &static_cast<const T*>(stru)->flight_id;
    }
    if (std::strcmp(field, "tol_pad_id") == 0) {
      return &static_cast<const T*>(stru)->tol_pad_id;
    }
    if (std::strcmp(field, "assign_time") == 0) {
      return &static_cast<const T*>(stru)->assign_time;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::tolPadRequest)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "assign_id") == 0) {
      static_cast<T*>(lhs)->assign_id = *static_cast<const  ::CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "flight_id") == 0) {
      static_cast<T*>(lhs)->flight_id = *static_cast<const  ::CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "tol_pad_id") == 0) {
      static_cast<T*>(lhs)->tol_pad_id = *static_cast<const  ::CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "assign_time") == 0) {
      static_cast<T*>(lhs)->assign_time = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::tolPadRequest)");
  }

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "assign_id") == 0) {
      return static_cast<const T*>(lhs)->assign_id == static_cast<const T*>(rhs)->assign_id;
    }
    if (std::strcmp(field, "flight_id") == 0) {
      return static_cast<const T*>(lhs)->flight_id == static_cast<const T*>(rhs)->flight_id;
    }
    if (std::strcmp(field, "tol_pad_id") == 0) {
      return static_cast<const T*>(lhs)->tol_pad_id == static_cast<const T*>(rhs)->tol_pad_id;
    }
    if (std::strcmp(field, "assign_time") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->assign_time.in(), static_cast<const T*>(rhs)->assign_time.in());
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::tolPadRequest)");
  }
#endif /* OPENDDS_NO_MULTI_TOPIC */

};

template<>
const MetaStruct& getMetaStruct< ::UATM::tolPadRequest>()
{
  static MetaStructImpl< ::UATM::tolPadRequest> msi;
  return msi;
}

bool gen_skip_over(Serializer& ser,  ::UATM::tolPadRequest*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl< ::UATM::tolPadRequest>().getValue(ser, "");
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif // ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace XTypes {

#ifndef OPENDDS_SAFETY_PROFILE
#if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
template <>
class DynamicDataAdapterImpl< ::UATM::tolPadRequest,  ::UATM::tolPadRequest > : public DynamicDataAdapter_T< ::UATM::tolPadRequest> {
public:
  DynamicDataAdapterImpl(DDS::DynamicType_ptr type,  ::UATM::tolPadRequest& value)
    : DynamicDataAdapter_T< ::UATM::tolPadRequest>(type, value)
  {
  }

  DynamicDataAdapterImpl(DDS::DynamicType_ptr type, const  ::UATM::tolPadRequest& value)
    : DynamicDataAdapter_T< ::UATM::tolPadRequest>(type, value)
  {
  }

  DDS::ReturnCode_t clear_all_values()
  {
    const DDS::ReturnCode_t rc = assert_mutable("DynamicDataAdapter::clear_all_values");
    if (rc == DDS::RETCODE_OK) {
      OpenDDS::DCPS::set_default(value_);
    }
    return rc;
  }

  DDS::UInt32 get_item_count()
  {
    return 4;
  }

  bool serialized_size(const OpenDDS::DCPS::Encoding& enc, size_t& size, OpenDDS::DCPS::Sample::Extent ext) const
  {
    using namespace OpenDDS::DCPS;
    if (ext == Sample::Full) {
      DCPS::serialized_size(enc, size, value_);
    } else if (ext == Sample::NestedKeyOnly) {
      const NestedKeyOnly<const  ::UATM::tolPadRequest> nested_key_only(value_);
      DCPS::serialized_size(enc, size, nested_key_only);
    } else {
      return false; // Non-topic type
    }
    return true;
  }

  bool serialize(OpenDDS::DCPS::Serializer& ser, OpenDDS::DCPS::Sample::Extent ext) const
  {
    using namespace OpenDDS::DCPS;
    if (ext == Sample::Full) {
      return ser << value_;
    } else if (ext == Sample::NestedKeyOnly) {
      NestedKeyOnly<const  ::UATM::tolPadRequest> nested_key_only(value_);
      return ser << nested_key_only;
    } else {
      return false; // Non-topic type
    }
  }

protected:
  DDS::ReturnCode_t get_raw_value(const char* method, void* dest, DDS::TypeKind tk, DDS::MemberId id)
  {
    switch (id) {
    case 0:
      {
        return get_simple_raw_value(method, dest, tk, value_.assign_id, id);
      }
    case 1:
      {
        return get_simple_raw_value(method, dest, tk, value_.flight_id, id);
      }
    case 2:
      {
        return get_simple_raw_value(method, dest, tk, value_.tol_pad_id, id);
      }
    case 3:
      {
        return get_s8_raw_value(method, dest, tk, value_.assign_time, id);
      }
    default:
      return invalid_id(method, id);
    }
  }

  DDS::ReturnCode_t set_raw_value(const char* method, DDS::MemberId id, const void* source, DDS::TypeKind tk)
  {
    DDS::ReturnCode_t rc = assert_mutable(method);
    if (rc != DDS::RETCODE_OK) {
      return rc;
    }
    switch (id) {
    case 0:
      {
        return set_simple_raw_value(method, value_.assign_id, id, source, tk);
      }
    case 1:
      {
        return set_simple_raw_value(method, value_.flight_id, id, source, tk);
      }
    case 2:
      {
        return set_simple_raw_value(method, value_.tol_pad_id, id, source, tk);
      }
    case 3:
      {
        return set_s8_raw_value(method, value_.assign_time.inout(), id, source, tk);
      }
    default:
      return invalid_id(method, id);
    }
  }
};

#endif // if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER

template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::tolPadRequest,  ::UATM::tolPadRequest>(DDS::DynamicType_ptr type, const  ::UATM::tolPadRequest& value)
{
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  if (type) {
    return new DynamicDataAdapterImpl< ::UATM::tolPadRequest,  ::UATM::tolPadRequest>(type, value);
  }
#  else
  ACE_UNUSED_ARG(type);
  ACE_UNUSED_ARG(value);
#  endif
  return 0;
}

template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::tolPadRequest,  ::UATM::tolPadRequest>(DDS::DynamicType_ptr type,  ::UATM::tolPadRequest& value)
{
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  if (type) {
    return new DynamicDataAdapterImpl< ::UATM::tolPadRequest,  ::UATM::tolPadRequest>(type, value);
  }
#  else
  ACE_UNUSED_ARG(type);
  ACE_UNUSED_ARG(value);
#  endif
  return 0;
}

template <>
const  ::UATM::tolPadRequest* get_dynamic_data_adapter_value< ::UATM::tolPadRequest,  ::UATM::tolPadRequest>(DDS::DynamicData_ptr dd)
{
  ACE_UNUSED_ARG(dd);
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  typedef DynamicDataAdapterImpl< ::UATM::tolPadRequest,  ::UATM::tolPadRequest> Dda;
  const Dda* const dda = dynamic_cast<Dda*>(dd);
  if (dda) {
    return &dda->wrapped();
  }
#  endif
  return 0;
}
#endif // ifndef OPENDDS_SAFETY_PROFILE

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End STRUCT: tolPadRequest */

/* End MODULE: UATM */


/* Begin MODULE: UATM */



/* Begin STRUCT: trafficFlowsInfo */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> const XTypes::TypeIdentifier& getMinimalTypeIdentifier<UATM_trafficFlowsInfo_xtag>()
{
  static XTypes::TypeIdentifier ti;
  ACE_GUARD_RETURN(ACE_Thread_Mutex, guard, TheServiceParticipant->get_static_xtypes_lock(), ti);
  if (ti.kind() == XTypes::TK_NONE) {
    ti = XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(21, 27, 167, 176, 5, 152, 95, 110, 75, 219, 157, 143, 116, 91));
  }
  return ti;
}

template<> const XTypes::TypeMap& getMinimalTypeMap<UATM_trafficFlowsInfo_xtag>()
{
  return OPENDDS_IDL_FILE_SPECIFIC(get_minimal_type_map, 0)();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool vread(OpenDDS::DCPS::ValueReader& value_reader,  ::UATM::trafficFlowsInfo& value)
{
  ACE_UNUSED_ARG(value_reader);
  ACE_UNUSED_ARG(value);
  static const ListMemberHelper::Pair pairs[] = {{"flows_id",0},{"area",1},{"congestion_level",2},{"affected_routes",3},{"timestamp",4},{0,0}};
  ListMemberHelper helper(pairs);
  if (!value_reader.begin_struct(OpenDDS::DCPS::APPENDABLE)) return false;
  XTypes::MemberId member_id;
  while (value_reader.members_remaining()) {
    if (!value_reader.begin_struct_member(member_id, helper)) return false;
    switch (member_id) {
    case 0: {
      if (!value_reader.read_int32(value.flows_id)) return false;
      break;
    }
    case 1: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.area = x.c_str();
      }
      break;
    }
    case 2: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.congestion_level = x.c_str();
      }
      break;
    }
    case 3: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.affected_routes = x.c_str();
      }
      break;
    }
    case 4: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.timestamp = x.c_str();
      }
      break;
    }
    }
    if (!value_reader.end_struct_member()) return false;
  }
  if (!value_reader.end_struct()) return false;
  return true;
}

bool vread(OpenDDS::DCPS::ValueReader& value_reader, const NestedKeyOnly< ::UATM::trafficFlowsInfo>& value)
{
  ACE_UNUSED_ARG(value_reader);
  ACE_UNUSED_ARG(value);
  static const ListMemberHelper::Pair pairs[] = {{"flows_id",0},{"area",1},{"congestion_level",2},{"affected_routes",3},{"timestamp",4},{0,0}};
  ListMemberHelper helper(pairs);
  if (!value_reader.begin_struct(OpenDDS::DCPS::APPENDABLE)) return false;
  XTypes::MemberId member_id;
  while (value_reader.members_remaining()) {
    if (!value_reader.begin_struct_member(member_id, helper)) return false;
    switch (member_id) {
    case 0: {
      if (!value_reader.read_int32(value.value.flows_id)) return false;
      break;
    }
    case 1: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.value.area = x.c_str();
      }
      break;
    }
    case 2: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.value.congestion_level = x.c_str();
      }
      break;
    }
    case 3: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.value.affected_routes = x.c_str();
      }
      break;
    }
    case 4: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.value.timestamp = x.c_str();
      }
      break;
    }
    }
    if (!value_reader.end_struct_member()) return false;
  }
  if (!value_reader.end_struct()) return false;
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const  ::UATM::trafficFlowsInfo& value)
{
  ACE_UNUSED_ARG(value_writer);
  ACE_UNUSED_ARG(value);
  if (!value_writer.begin_struct(OpenDDS::DCPS::APPENDABLE)) {
    return false;
  }
  {
    MemberParam param(0, false, "flows_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.flows_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(1, false, "area", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.area)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(2, false, "congestion_level", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.congestion_level)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(3, false, "affected_routes", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.affected_routes)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(4, false, "timestamp", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.timestamp)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  return value_writer.end_struct();
}

bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const NestedKeyOnly<const  ::UATM::trafficFlowsInfo>& value)
{
  ACE_UNUSED_ARG(value_writer);
  ACE_UNUSED_ARG(value);
  if (!value_writer.begin_struct(OpenDDS::DCPS::APPENDABLE)) {
    return false;
  }
  {
    MemberParam param(0, false, "flows_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.value.flows_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(1, false, "area", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.value.area)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(2, false, "congestion_level", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.value.congestion_level)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(3, false, "affected_routes", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.value.affected_routes)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(4, false, "timestamp", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.value.timestamp)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  return value_writer.end_struct();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> void set_default( ::UATM::trafficFlowsInfo& stru)
{
  ACE_UNUSED_ARG(stru);
  stru.flows_id = 0;
  stru.area = "";
  stru.congestion_level = "";
  stru.affected_routes = "";
  stru.timestamp = "";
}

void serialized_size(const Encoding& encoding, size_t& size, const ::UATM::trafficFlowsInfo& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
  primitive_serialized_size(encoding, size, stru.flows_id);
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.area.in()) + 1;
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.congestion_level.in()) + 1;
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.affected_routes.in()) + 1;
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.timestamp.in()) + 1;
}

bool operator<<(Serializer& strm, const ::UATM::trafficFlowsInfo& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
  return (strm << stru.flows_id)
    && (strm << ACE_OutputCDR::from_string(stru.area.in(), 20))
    && (strm << ACE_OutputCDR::from_string(stru.congestion_level.in(), 20))
    && (strm << ACE_OutputCDR::from_string(stru.affected_routes.in(), 20))
    && (strm << ACE_OutputCDR::from_string(stru.timestamp.in(), 20));
}

bool operator>>(Serializer& strm,  ::UATM::trafficFlowsInfo& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  bool reached_end_of_struct = false;
  ACE_UNUSED_ARG(reached_end_of_struct);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.flows_id = 0;
  } else {
    if (!(strm >> stru.flows_id)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.area = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.area.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.congestion_level = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.congestion_level.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.affected_routes = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.affected_routes.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.timestamp = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.timestamp.out(), 20))) {
      return false;
    }
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const ::UATM::trafficFlowsInfo>& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
  primitive_serialized_size(encoding, size, stru.value.flows_id);
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.value.area.in()) + 1;
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.value.congestion_level.in()) + 1;
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.value.affected_routes.in()) + 1;
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.value.timestamp.in()) + 1;
}

bool operator<<(Serializer& strm, const NestedKeyOnly<const ::UATM::trafficFlowsInfo>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
  return (strm << stru.value.flows_id)
    && (strm << ACE_OutputCDR::from_string(stru.value.area.in(), 20))
    && (strm << ACE_OutputCDR::from_string(stru.value.congestion_level.in(), 20))
    && (strm << ACE_OutputCDR::from_string(stru.value.affected_routes.in(), 20))
    && (strm << ACE_OutputCDR::from_string(stru.value.timestamp.in(), 20));
}

bool operator>>(Serializer& strm, const NestedKeyOnly< ::UATM::trafficFlowsInfo>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  bool reached_end_of_struct = false;
  ACE_UNUSED_ARG(reached_end_of_struct);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.flows_id = 0;
  } else {
    if (!(strm >> stru.value.flows_id)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.area = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.value.area.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.congestion_level = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.value.congestion_level.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.affected_routes = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.value.affected_routes.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.timestamp = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.value.timestamp.out(), 20))) {
      return false;
    }
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

void serialized_size(const Encoding& encoding, size_t& size, const KeyOnly<const  ::UATM::trafficFlowsInfo> stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  switch (encoding.xcdr_version()) {
  case Encoding::XCDR_VERSION_1:
    {
    primitive_serialized_size(encoding, size, stru.value.flows_id);
    break;
    }
  case Encoding::XCDR_VERSION_2:
    {
    primitive_serialized_size(encoding, size, stru.value.flows_id);
    break;
    }
  case Encoding::XCDR_VERSION_NONE:
    {
    primitive_serialized_size(encoding, size, stru.value.flows_id);
    break;
    }
  }
}

bool operator<<(Serializer& strm, KeyOnly<const  ::UATM::trafficFlowsInfo> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.value.flows_id);
}

bool operator>>(Serializer& strm, KeyOnly< ::UATM::trafficFlowsInfo> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.value.flows_id);
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace DCPS {
bool DDSTraits< ::UATM::trafficFlowsInfo>::is_key(const char* field)
{
  ACE_UNUSED_ARG(field);
  if (!ACE_OS::strcmp(field, "flows_id")) {
    return true;
  }
  return false;
}
} // namespace DCPS
} // namespace OpenDDS
OPENDDS_END_VERSIONED_NAMESPACE_DECL

namespace UATM {
::DDS::DataWriter_ptr trafficFlowsInfoTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<trafficFlowsInfo> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}

::DDS::DataReader_ptr trafficFlowsInfoTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<trafficFlowsInfo> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}

#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr trafficFlowsInfoTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<trafficFlowsInfo> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<trafficFlowsInfo, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */

#ifndef OPENDDS_SAFETY_PROFILE
trafficFlowsInfo* trafficFlowsInfoTypeSupportImpl::create_sample(::DDS::DynamicData_ptr src)
{
  trafficFlowsInfo* value = new trafficFlowsInfo;
  const ::DDS::ReturnCode_t rc = OpenDDS::DCPS::TypeSupportImpl_T<trafficFlowsInfo>::create_sample_rc(*value, src);
  if (rc != ::DDS::RETCODE_OK && OpenDDS::DCPS::log_level >= OpenDDS::DCPS::LogLevel::Warning) {
    ACE_ERROR((LM_WARNING, "(%P|%t) WARNING: trafficFlowsInfoTypeSupportImpl::create_sample: "
      "create_sample_rc failed: %C\n", OpenDDS::DCPS::retcode_to_string(rc)));
  }
  return value;
}
#endif

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& trafficFlowsInfoTypeSupportImpl::getMetaStructForType() const
{
  return OpenDDS::DCPS::getMetaStruct<trafficFlowsInfo>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */

namespace {
  OpenDDS::DCPS::TypeSupportInitializer<trafficFlowsInfoTypeSupportImpl> ts_init_UATM_trafficFlowsInfo;
}

const OpenDDS::XTypes::TypeIdentifier& trafficFlowsInfoTypeSupportImpl::getMinimalTypeIdentifier() const
{
  return OpenDDS::DCPS::getMinimalTypeIdentifier<OpenDDS::DCPS::UATM_trafficFlowsInfo_xtag>();
}

const OpenDDS::XTypes::TypeMap& trafficFlowsInfoTypeSupportImpl::getMinimalTypeMap() const
{
  return OpenDDS::DCPS::getMinimalTypeMap<OpenDDS::DCPS::UATM_trafficFlowsInfo_xtag>();
}

const OpenDDS::XTypes::TypeIdentifier& trafficFlowsInfoTypeSupportImpl::getCompleteTypeIdentifier() const
{
  static OpenDDS::XTypes::TypeIdentifier ti;
  return ti;
}

const OpenDDS::XTypes::TypeMap& trafficFlowsInfoTypeSupportImpl::getCompleteTypeMap() const
{
  static OpenDDS::XTypes::TypeMap tm;
  return tm;
}

::DDS::ReturnCode_t trafficFlowsInfoTypeSupportImpl::encode_to_string(const trafficFlowsInfo& in, CORBA::String_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
#if OPENDDS_HAS_JSON_VALUE_WRITER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    rapidjson::StringBuffer buffer;
    rapidjson::Writer<rapidjson::StringBuffer> writer(buffer);
    OpenDDS::DCPS::JsonValueWriter<rapidjson::Writer<rapidjson::StringBuffer> > jvw(writer);
    if (!vwrite(jvw, in)) {
      return ::DDS::RETCODE_ERROR;
    }
    out = buffer.GetString();
    return ::DDS::RETCODE_OK;
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  out = "";
  return ::DDS::RETCODE_UNSUPPORTED;
}

::DDS::ReturnCode_t trafficFlowsInfoTypeSupportImpl::encode_to_bytes(const trafficFlowsInfo& in, ::DDS::OctetSeq_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
#if OPENDDS_HAS_JSON_VALUE_WRITER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    CORBA::String_var buffer;
    const ::DDS::ReturnCode_t ret = encode_to_string(in, buffer, format);
    if (ret == ::DDS::RETCODE_OK) {
      const ::DDS::UInt32 len = static_cast< ::DDS::UInt32>(std::strlen(buffer));
      out = new ::DDS::OctetSeq(len);
      out->length(len);
      std::memcpy(out->get_buffer(), buffer, len);
      return ::DDS::RETCODE_OK;
    } else {
      out = new ::DDS::OctetSeq();
      return ret;
    }
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  out = new ::DDS::OctetSeq();
  return ::DDS::RETCODE_UNSUPPORTED;
}

::DDS::ReturnCode_t trafficFlowsInfoTypeSupportImpl::decode_from_string(const char* in, trafficFlowsInfo_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
  out = new trafficFlowsInfo;
  OpenDDS::DCPS::set_default(*out);
#if OPENDDS_HAS_JSON_VALUE_READER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    rapidjson::StringStream buffer(in);
    OpenDDS::DCPS::JsonValueReader<> jvr(buffer);
    return vread(jvr, *out) ? ::DDS::RETCODE_OK : ::DDS::RETCODE_ERROR;
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  return ::DDS::RETCODE_UNSUPPORTED;
}

::DDS::ReturnCode_t trafficFlowsInfoTypeSupportImpl::decode_from_bytes(const ::DDS::OctetSeq& in, trafficFlowsInfo_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
#if OPENDDS_HAS_JSON_VALUE_READER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    return decode_from_string(reinterpret_cast<const char*>(in.get_buffer()), out, format);
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  out = new trafficFlowsInfo();
  return ::DDS::RETCODE_UNSUPPORTED;
}

trafficFlowsInfoTypeSupport::_ptr_type trafficFlowsInfoTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl< ::UATM::trafficFlowsInfo> : MetaStruct {
  typedef  ::UATM::trafficFlowsInfo T;

#ifndef OPENDDS_NO_MULTI_TOPIC
  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 1; }

#endif /* OPENDDS_NO_MULTI_TOPIC */

  Value getValue(const void* stru, const char* field) const
  {
    const ::UATM::trafficFlowsInfo& typed = *static_cast<const ::UATM::trafficFlowsInfo*>(stru);
    ACE_UNUSED_ARG(typed);
    if (std::strcmp(field, "flows_id") == 0) {
      return typed.flows_id;
    }
    if (std::strcmp(field, "area") == 0) {
      return typed.area.in();
    }
    if (std::strcmp(field, "congestion_level") == 0) {
      return typed.congestion_level.in();
    }
    if (std::strcmp(field, "affected_routes") == 0) {
      return typed.affected_routes.in();
    }
    if (std::strcmp(field, "timestamp") == 0) {
      return typed.timestamp.in();
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::trafficFlowsInfo)");
  }

  Value getValue(Serializer& strm, const char* field, TypeSupportImpl* = 0) const
  {
    const Encoding& encoding = strm.encoding();
    ACE_UNUSED_ARG(encoding);
    size_t total_size = 0;
    if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
      if (!strm.read_delimiter(total_size)) {
        throw std::runtime_error("Unable to reader delimiter in getValue");
      }
    }
    std::string base_field = field;
    const size_t index = base_field.find('.');
    std::string subfield;
    if (index != std::string::npos) {
      subfield = base_field.substr(index + 1);
      base_field = base_field.substr(0, index);
    }
    if (base_field == "flows_id") {
      ACE_CDR::Long val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'flows_id' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'flows_id' could not be skipped");
      }
    }
    if (base_field == "area") {
      TAO::String_Manager val;
      if (!(strm >> val.out())) {
        throw std::runtime_error("Field 'area' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(strm >> len)) {
        throw std::runtime_error("String 'area' length could not be deserialized");
      }
      if (!strm.skip(len)) {
        throw std::runtime_error("String 'area' contents could not be skipped");
      }
    }
    if (base_field == "congestion_level") {
      TAO::String_Manager val;
      if (!(strm >> val.out())) {
        throw std::runtime_error("Field 'congestion_level' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(strm >> len)) {
        throw std::runtime_error("String 'congestion_level' length could not be deserialized");
      }
      if (!strm.skip(len)) {
        throw std::runtime_error("String 'congestion_level' contents could not be skipped");
      }
    }
    if (base_field == "affected_routes") {
      TAO::String_Manager val;
      if (!(strm >> val.out())) {
        throw std::runtime_error("Field 'affected_routes' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(strm >> len)) {
        throw std::runtime_error("String 'affected_routes' length could not be deserialized");
      }
      if (!strm.skip(len)) {
        throw std::runtime_error("String 'affected_routes' contents could not be skipped");
      }
    }
    if (base_field == "timestamp") {
      TAO::String_Manager val;
      if (!(strm >> val.out())) {
        throw std::runtime_error("Field 'timestamp' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(strm >> len)) {
        throw std::runtime_error("String 'timestamp' length could not be deserialized");
      }
      if (!strm.skip(len)) {
        throw std::runtime_error("String 'timestamp' contents could not be skipped");
      }
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Did not find field in getValue");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "flows_id") == 0) {
      return make_field_cmp(&T::flows_id, next);
    }
    if (std::strcmp(field, "area") == 0) {
      return make_field_cmp(&T::area, next);
    }
    if (std::strcmp(field, "congestion_level") == 0) {
      return make_field_cmp(&T::congestion_level, next);
    }
    if (std::strcmp(field, "affected_routes") == 0) {
      return make_field_cmp(&T::affected_routes, next);
    }
    if (std::strcmp(field, "timestamp") == 0) {
      return make_field_cmp(&T::timestamp, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::trafficFlowsInfo)");
  }

#ifndef OPENDDS_NO_MULTI_TOPIC
  const char** getFieldNames() const
  {
    static const char* names[] = {"flows_id", "area", "congestion_level", "affected_routes", "timestamp", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "flows_id") == 0) {
      return &static_cast<const T*>(stru)->flows_id;
    }
    if (std::strcmp(field, "area") == 0) {
      return &static_cast<const T*>(stru)->area;
    }
    if (std::strcmp(field, "congestion_level") == 0) {
      return &static_cast<const T*>(stru)->congestion_level;
    }
    if (std::strcmp(field, "affected_routes") == 0) {
      return &static_cast<const T*>(stru)->affected_routes;
    }
    if (std::strcmp(field, "timestamp") == 0) {
      return &static_cast<const T*>(stru)->timestamp;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::trafficFlowsInfo)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "flows_id") == 0) {
      static_cast<T*>(lhs)->flows_id = *static_cast<const  ::CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "area") == 0) {
      static_cast<T*>(lhs)->area = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "congestion_level") == 0) {
      static_cast<T*>(lhs)->congestion_level = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "affected_routes") == 0) {
      static_cast<T*>(lhs)->affected_routes = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "timestamp") == 0) {
      static_cast<T*>(lhs)->timestamp = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::trafficFlowsInfo)");
  }

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "flows_id") == 0) {
      return static_cast<const T*>(lhs)->flows_id == static_cast<const T*>(rhs)->flows_id;
    }
    if (std::strcmp(field, "area") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->area.in(), static_cast<const T*>(rhs)->area.in());
    }
    if (std::strcmp(field, "congestion_level") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->congestion_level.in(), static_cast<const T*>(rhs)->congestion_level.in());
    }
    if (std::strcmp(field, "affected_routes") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->affected_routes.in(), static_cast<const T*>(rhs)->affected_routes.in());
    }
    if (std::strcmp(field, "timestamp") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->timestamp.in(), static_cast<const T*>(rhs)->timestamp.in());
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::trafficFlowsInfo)");
  }
#endif /* OPENDDS_NO_MULTI_TOPIC */

};

template<>
const MetaStruct& getMetaStruct< ::UATM::trafficFlowsInfo>()
{
  static MetaStructImpl< ::UATM::trafficFlowsInfo> msi;
  return msi;
}

bool gen_skip_over(Serializer& ser,  ::UATM::trafficFlowsInfo*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl< ::UATM::trafficFlowsInfo>().getValue(ser, "");
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif // ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace XTypes {

#ifndef OPENDDS_SAFETY_PROFILE
#if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
template <>
class DynamicDataAdapterImpl< ::UATM::trafficFlowsInfo,  ::UATM::trafficFlowsInfo > : public DynamicDataAdapter_T< ::UATM::trafficFlowsInfo> {
public:
  DynamicDataAdapterImpl(DDS::DynamicType_ptr type,  ::UATM::trafficFlowsInfo& value)
    : DynamicDataAdapter_T< ::UATM::trafficFlowsInfo>(type, value)
  {
  }

  DynamicDataAdapterImpl(DDS::DynamicType_ptr type, const  ::UATM::trafficFlowsInfo& value)
    : DynamicDataAdapter_T< ::UATM::trafficFlowsInfo>(type, value)
  {
  }

  DDS::ReturnCode_t clear_all_values()
  {
    const DDS::ReturnCode_t rc = assert_mutable("DynamicDataAdapter::clear_all_values");
    if (rc == DDS::RETCODE_OK) {
      OpenDDS::DCPS::set_default(value_);
    }
    return rc;
  }

  DDS::UInt32 get_item_count()
  {
    return 5;
  }

  bool serialized_size(const OpenDDS::DCPS::Encoding& enc, size_t& size, OpenDDS::DCPS::Sample::Extent ext) const
  {
    using namespace OpenDDS::DCPS;
    if (ext == Sample::Full) {
      DCPS::serialized_size(enc, size, value_);
    } else if (ext == Sample::NestedKeyOnly) {
      const NestedKeyOnly<const  ::UATM::trafficFlowsInfo> nested_key_only(value_);
      DCPS::serialized_size(enc, size, nested_key_only);
    } else {
      return false; // Non-topic type
    }
    return true;
  }

  bool serialize(OpenDDS::DCPS::Serializer& ser, OpenDDS::DCPS::Sample::Extent ext) const
  {
    using namespace OpenDDS::DCPS;
    if (ext == Sample::Full) {
      return ser << value_;
    } else if (ext == Sample::NestedKeyOnly) {
      NestedKeyOnly<const  ::UATM::trafficFlowsInfo> nested_key_only(value_);
      return ser << nested_key_only;
    } else {
      return false; // Non-topic type
    }
  }

protected:
  DDS::ReturnCode_t get_raw_value(const char* method, void* dest, DDS::TypeKind tk, DDS::MemberId id)
  {
    switch (id) {
    case 0:
      {
        return get_simple_raw_value(method, dest, tk, value_.flows_id, id);
      }
    case 1:
      {
        return get_s8_raw_value(method, dest, tk, value_.area, id);
      }
    case 2:
      {
        return get_s8_raw_value(method, dest, tk, value_.congestion_level, id);
      }
    case 3:
      {
        return get_s8_raw_value(method, dest, tk, value_.affected_routes, id);
      }
    case 4:
      {
        return get_s8_raw_value(method, dest, tk, value_.timestamp, id);
      }
    default:
      return invalid_id(method, id);
    }
  }

  DDS::ReturnCode_t set_raw_value(const char* method, DDS::MemberId id, const void* source, DDS::TypeKind tk)
  {
    DDS::ReturnCode_t rc = assert_mutable(method);
    if (rc != DDS::RETCODE_OK) {
      return rc;
    }
    switch (id) {
    case 0:
      {
        return set_simple_raw_value(method, value_.flows_id, id, source, tk);
      }
    case 1:
      {
        return set_s8_raw_value(method, value_.area.inout(), id, source, tk);
      }
    case 2:
      {
        return set_s8_raw_value(method, value_.congestion_level.inout(), id, source, tk);
      }
    case 3:
      {
        return set_s8_raw_value(method, value_.affected_routes.inout(), id, source, tk);
      }
    case 4:
      {
        return set_s8_raw_value(method, value_.timestamp.inout(), id, source, tk);
      }
    default:
      return invalid_id(method, id);
    }
  }
};

#endif // if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER

template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::trafficFlowsInfo,  ::UATM::trafficFlowsInfo>(DDS::DynamicType_ptr type, const  ::UATM::trafficFlowsInfo& value)
{
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  if (type) {
    return new DynamicDataAdapterImpl< ::UATM::trafficFlowsInfo,  ::UATM::trafficFlowsInfo>(type, value);
  }
#  else
  ACE_UNUSED_ARG(type);
  ACE_UNUSED_ARG(value);
#  endif
  return 0;
}

template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::trafficFlowsInfo,  ::UATM::trafficFlowsInfo>(DDS::DynamicType_ptr type,  ::UATM::trafficFlowsInfo& value)
{
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  if (type) {
    return new DynamicDataAdapterImpl< ::UATM::trafficFlowsInfo,  ::UATM::trafficFlowsInfo>(type, value);
  }
#  else
  ACE_UNUSED_ARG(type);
  ACE_UNUSED_ARG(value);
#  endif
  return 0;
}

template <>
const  ::UATM::trafficFlowsInfo* get_dynamic_data_adapter_value< ::UATM::trafficFlowsInfo,  ::UATM::trafficFlowsInfo>(DDS::DynamicData_ptr dd)
{
  ACE_UNUSED_ARG(dd);
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  typedef DynamicDataAdapterImpl< ::UATM::trafficFlowsInfo,  ::UATM::trafficFlowsInfo> Dda;
  const Dda* const dda = dynamic_cast<Dda*>(dd);
  if (dda) {
    return &dda->wrapped();
  }
#  endif
  return 0;
}
#endif // ifndef OPENDDS_SAFETY_PROFILE

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End STRUCT: trafficFlowsInfo */

/* End MODULE: UATM */


/* Begin MODULE: UATM */



/* Begin STRUCT: flightAuthorizationRequest */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> const XTypes::TypeIdentifier& getMinimalTypeIdentifier<UATM_flightAuthorizationRequest_xtag>()
{
  static XTypes::TypeIdentifier ti;
  ACE_GUARD_RETURN(ACE_Thread_Mutex, guard, TheServiceParticipant->get_static_xtypes_lock(), ti);
  if (ti.kind() == XTypes::TK_NONE) {
    ti = XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(174, 79, 122, 214, 90, 17, 230, 64, 143, 13, 46, 50, 18, 143));
  }
  return ti;
}

template<> const XTypes::TypeMap& getMinimalTypeMap<UATM_flightAuthorizationRequest_xtag>()
{
  return OPENDDS_IDL_FILE_SPECIFIC(get_minimal_type_map, 0)();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool vread(OpenDDS::DCPS::ValueReader& value_reader,  ::UATM::flightAuthorizationRequest& value)
{
  ACE_UNUSED_ARG(value_reader);
  ACE_UNUSED_ARG(value);
  static const ListMemberHelper::Pair pairs[] = {{"auth_request_id",0},{"uasp_id",1},{"flight_id",2},{"requested_status",3},{"request_time",4},{0,0}};
  ListMemberHelper helper(pairs);
  if (!value_reader.begin_struct(OpenDDS::DCPS::APPENDABLE)) return false;
  XTypes::MemberId member_id;
  while (value_reader.members_remaining()) {
    if (!value_reader.begin_struct_member(member_id, helper)) return false;
    switch (member_id) {
    case 0: {
      if (!value_reader.read_int32(value.auth_request_id)) return false;
      break;
    }
    case 1: {
      if (!value_reader.read_int32(value.uasp_id)) return false;
      break;
    }
    case 2: {
      if (!value_reader.read_int32(value.flight_id)) return false;
      break;
    }
    case 3: {
      {
         ::CORBA::Boolean bx;
        if (!value_reader.read_boolean(bx)) return false;
        value.requested_status = bx;
      }
      break;
    }
    case 4: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.request_time = x.c_str();
      }
      break;
    }
    }
    if (!value_reader.end_struct_member()) return false;
  }
  if (!value_reader.end_struct()) return false;
  return true;
}

bool vread(OpenDDS::DCPS::ValueReader& value_reader, const NestedKeyOnly< ::UATM::flightAuthorizationRequest>& value)
{
  ACE_UNUSED_ARG(value_reader);
  ACE_UNUSED_ARG(value);
  static const ListMemberHelper::Pair pairs[] = {{"auth_request_id",0},{"uasp_id",1},{"flight_id",2},{"requested_status",3},{"request_time",4},{0,0}};
  ListMemberHelper helper(pairs);
  if (!value_reader.begin_struct(OpenDDS::DCPS::APPENDABLE)) return false;
  XTypes::MemberId member_id;
  while (value_reader.members_remaining()) {
    if (!value_reader.begin_struct_member(member_id, helper)) return false;
    switch (member_id) {
    case 0: {
      if (!value_reader.read_int32(value.value.auth_request_id)) return false;
      break;
    }
    case 1: {
      if (!value_reader.read_int32(value.value.uasp_id)) return false;
      break;
    }
    case 2: {
      if (!value_reader.read_int32(value.value.flight_id)) return false;
      break;
    }
    case 3: {
      {
         ::CORBA::Boolean bx;
        if (!value_reader.read_boolean(bx)) return false;
        value.value.requested_status = bx;
      }
      break;
    }
    case 4: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.value.request_time = x.c_str();
      }
      break;
    }
    }
    if (!value_reader.end_struct_member()) return false;
  }
  if (!value_reader.end_struct()) return false;
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const  ::UATM::flightAuthorizationRequest& value)
{
  ACE_UNUSED_ARG(value_writer);
  ACE_UNUSED_ARG(value);
  if (!value_writer.begin_struct(OpenDDS::DCPS::APPENDABLE)) {
    return false;
  }
  {
    MemberParam param(0, false, "auth_request_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.auth_request_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(1, false, "uasp_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.uasp_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(2, false, "flight_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.flight_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(3, false, "requested_status", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_boolean(value.requested_status)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(4, false, "request_time", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.request_time)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  return value_writer.end_struct();
}

bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const NestedKeyOnly<const  ::UATM::flightAuthorizationRequest>& value)
{
  ACE_UNUSED_ARG(value_writer);
  ACE_UNUSED_ARG(value);
  if (!value_writer.begin_struct(OpenDDS::DCPS::APPENDABLE)) {
    return false;
  }
  {
    MemberParam param(0, false, "auth_request_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.value.auth_request_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(1, false, "uasp_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.value.uasp_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(2, false, "flight_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.value.flight_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(3, false, "requested_status", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_boolean(value.value.requested_status)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(4, false, "request_time", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.value.request_time)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  return value_writer.end_struct();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> void set_default( ::UATM::flightAuthorizationRequest& stru)
{
  ACE_UNUSED_ARG(stru);
  stru.auth_request_id = 0;
  stru.uasp_id = 0;
  stru.flight_id = 0;
  stru.requested_status = 0;
  stru.request_time = "";
}

void serialized_size(const Encoding& encoding, size_t& size, const ::UATM::flightAuthorizationRequest& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
  primitive_serialized_size(encoding, size, stru.auth_request_id);
  primitive_serialized_size(encoding, size, stru.uasp_id);
  primitive_serialized_size(encoding, size, stru.flight_id);
  primitive_serialized_size(encoding, size, ACE_OutputCDR::from_boolean(stru.requested_status));
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.request_time.in()) + 1;
}

bool operator<<(Serializer& strm, const ::UATM::flightAuthorizationRequest& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
  return (strm << stru.auth_request_id)
    && (strm << stru.uasp_id)
    && (strm << stru.flight_id)
    && (strm << ACE_OutputCDR::from_boolean(stru.requested_status))
    && (strm << ACE_OutputCDR::from_string(stru.request_time.in(), 20));
}

bool operator>>(Serializer& strm,  ::UATM::flightAuthorizationRequest& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  bool reached_end_of_struct = false;
  ACE_UNUSED_ARG(reached_end_of_struct);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.auth_request_id = 0;
  } else {
    if (!(strm >> stru.auth_request_id)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.uasp_id = 0;
  } else {
    if (!(strm >> stru.uasp_id)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.flight_id = 0;
  } else {
    if (!(strm >> stru.flight_id)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.requested_status = 0;
  } else {
    if (!(strm >> ACE_InputCDR::to_boolean(stru.requested_status))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.request_time = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.request_time.out(), 20))) {
      return false;
    }
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const ::UATM::flightAuthorizationRequest>& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
  primitive_serialized_size(encoding, size, stru.value.auth_request_id);
  primitive_serialized_size(encoding, size, stru.value.uasp_id);
  primitive_serialized_size(encoding, size, stru.value.flight_id);
  primitive_serialized_size(encoding, size, ACE_OutputCDR::from_boolean(stru.value.requested_status));
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.value.request_time.in()) + 1;
}

bool operator<<(Serializer& strm, const NestedKeyOnly<const ::UATM::flightAuthorizationRequest>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
  return (strm << stru.value.auth_request_id)
    && (strm << stru.value.uasp_id)
    && (strm << stru.value.flight_id)
    && (strm << ACE_OutputCDR::from_boolean(stru.value.requested_status))
    && (strm << ACE_OutputCDR::from_string(stru.value.request_time.in(), 20));
}

bool operator>>(Serializer& strm, const NestedKeyOnly< ::UATM::flightAuthorizationRequest>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  bool reached_end_of_struct = false;
  ACE_UNUSED_ARG(reached_end_of_struct);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.auth_request_id = 0;
  } else {
    if (!(strm >> stru.value.auth_request_id)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.uasp_id = 0;
  } else {
    if (!(strm >> stru.value.uasp_id)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.flight_id = 0;
  } else {
    if (!(strm >> stru.value.flight_id)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.requested_status = 0;
  } else {
    if (!(strm >> ACE_InputCDR::to_boolean(stru.value.requested_status))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.request_time = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.value.request_time.out(), 20))) {
      return false;
    }
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

void serialized_size(const Encoding& encoding, size_t& size, const KeyOnly<const  ::UATM::flightAuthorizationRequest> stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  switch (encoding.xcdr_version()) {
  case Encoding::XCDR_VERSION_1:
    {
    primitive_serialized_size(encoding, size, stru.value.auth_request_id);
    break;
    }
  case Encoding::XCDR_VERSION_2:
    {
    primitive_serialized_size(encoding, size, stru.value.auth_request_id);
    break;
    }
  case Encoding::XCDR_VERSION_NONE:
    {
    primitive_serialized_size(encoding, size, stru.value.auth_request_id);
    break;
    }
  }
}

bool operator<<(Serializer& strm, KeyOnly<const  ::UATM::flightAuthorizationRequest> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.value.auth_request_id);
}

bool operator>>(Serializer& strm, KeyOnly< ::UATM::flightAuthorizationRequest> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.value.auth_request_id);
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace DCPS {
bool DDSTraits< ::UATM::flightAuthorizationRequest>::is_key(const char* field)
{
  ACE_UNUSED_ARG(field);
  if (!ACE_OS::strcmp(field, "auth_request_id")) {
    return true;
  }
  return false;
}
} // namespace DCPS
} // namespace OpenDDS
OPENDDS_END_VERSIONED_NAMESPACE_DECL

namespace UATM {
::DDS::DataWriter_ptr flightAuthorizationRequestTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<flightAuthorizationRequest> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}

::DDS::DataReader_ptr flightAuthorizationRequestTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<flightAuthorizationRequest> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}

#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr flightAuthorizationRequestTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<flightAuthorizationRequest> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<flightAuthorizationRequest, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */

#ifndef OPENDDS_SAFETY_PROFILE
flightAuthorizationRequest* flightAuthorizationRequestTypeSupportImpl::create_sample(::DDS::DynamicData_ptr src)
{
  flightAuthorizationRequest* value = new flightAuthorizationRequest;
  const ::DDS::ReturnCode_t rc = OpenDDS::DCPS::TypeSupportImpl_T<flightAuthorizationRequest>::create_sample_rc(*value, src);
  if (rc != ::DDS::RETCODE_OK && OpenDDS::DCPS::log_level >= OpenDDS::DCPS::LogLevel::Warning) {
    ACE_ERROR((LM_WARNING, "(%P|%t) WARNING: flightAuthorizationRequestTypeSupportImpl::create_sample: "
      "create_sample_rc failed: %C\n", OpenDDS::DCPS::retcode_to_string(rc)));
  }
  return value;
}
#endif

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& flightAuthorizationRequestTypeSupportImpl::getMetaStructForType() const
{
  return OpenDDS::DCPS::getMetaStruct<flightAuthorizationRequest>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */

namespace {
  OpenDDS::DCPS::TypeSupportInitializer<flightAuthorizationRequestTypeSupportImpl> ts_init_UATM_flightAuthorizationRequest;
}

const OpenDDS::XTypes::TypeIdentifier& flightAuthorizationRequestTypeSupportImpl::getMinimalTypeIdentifier() const
{
  return OpenDDS::DCPS::getMinimalTypeIdentifier<OpenDDS::DCPS::UATM_flightAuthorizationRequest_xtag>();
}

const OpenDDS::XTypes::TypeMap& flightAuthorizationRequestTypeSupportImpl::getMinimalTypeMap() const
{
  return OpenDDS::DCPS::getMinimalTypeMap<OpenDDS::DCPS::UATM_flightAuthorizationRequest_xtag>();
}

const OpenDDS::XTypes::TypeIdentifier& flightAuthorizationRequestTypeSupportImpl::getCompleteTypeIdentifier() const
{
  static OpenDDS::XTypes::TypeIdentifier ti;
  return ti;
}

const OpenDDS::XTypes::TypeMap& flightAuthorizationRequestTypeSupportImpl::getCompleteTypeMap() const
{
  static OpenDDS::XTypes::TypeMap tm;
  return tm;
}

::DDS::ReturnCode_t flightAuthorizationRequestTypeSupportImpl::encode_to_string(const flightAuthorizationRequest& in, CORBA::String_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
#if OPENDDS_HAS_JSON_VALUE_WRITER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    rapidjson::StringBuffer buffer;
    rapidjson::Writer<rapidjson::StringBuffer> writer(buffer);
    OpenDDS::DCPS::JsonValueWriter<rapidjson::Writer<rapidjson::StringBuffer> > jvw(writer);
    if (!vwrite(jvw, in)) {
      return ::DDS::RETCODE_ERROR;
    }
    out = buffer.GetString();
    return ::DDS::RETCODE_OK;
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  out = "";
  return ::DDS::RETCODE_UNSUPPORTED;
}

::DDS::ReturnCode_t flightAuthorizationRequestTypeSupportImpl::encode_to_bytes(const flightAuthorizationRequest& in, ::DDS::OctetSeq_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
#if OPENDDS_HAS_JSON_VALUE_WRITER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    CORBA::String_var buffer;
    const ::DDS::ReturnCode_t ret = encode_to_string(in, buffer, format);
    if (ret == ::DDS::RETCODE_OK) {
      const ::DDS::UInt32 len = static_cast< ::DDS::UInt32>(std::strlen(buffer));
      out = new ::DDS::OctetSeq(len);
      out->length(len);
      std::memcpy(out->get_buffer(), buffer, len);
      return ::DDS::RETCODE_OK;
    } else {
      out = new ::DDS::OctetSeq();
      return ret;
    }
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  out = new ::DDS::OctetSeq();
  return ::DDS::RETCODE_UNSUPPORTED;
}

::DDS::ReturnCode_t flightAuthorizationRequestTypeSupportImpl::decode_from_string(const char* in, flightAuthorizationRequest_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
  out = new flightAuthorizationRequest;
  OpenDDS::DCPS::set_default(*out);
#if OPENDDS_HAS_JSON_VALUE_READER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    rapidjson::StringStream buffer(in);
    OpenDDS::DCPS::JsonValueReader<> jvr(buffer);
    return vread(jvr, *out) ? ::DDS::RETCODE_OK : ::DDS::RETCODE_ERROR;
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  return ::DDS::RETCODE_UNSUPPORTED;
}

::DDS::ReturnCode_t flightAuthorizationRequestTypeSupportImpl::decode_from_bytes(const ::DDS::OctetSeq& in, flightAuthorizationRequest_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
#if OPENDDS_HAS_JSON_VALUE_READER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    return decode_from_string(reinterpret_cast<const char*>(in.get_buffer()), out, format);
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  out = new flightAuthorizationRequest();
  return ::DDS::RETCODE_UNSUPPORTED;
}

flightAuthorizationRequestTypeSupport::_ptr_type flightAuthorizationRequestTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl< ::UATM::flightAuthorizationRequest> : MetaStruct {
  typedef  ::UATM::flightAuthorizationRequest T;

#ifndef OPENDDS_NO_MULTI_TOPIC
  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 1; }

#endif /* OPENDDS_NO_MULTI_TOPIC */

  Value getValue(const void* stru, const char* field) const
  {
    const ::UATM::flightAuthorizationRequest& typed = *static_cast<const ::UATM::flightAuthorizationRequest*>(stru);
    ACE_UNUSED_ARG(typed);
    if (std::strcmp(field, "auth_request_id") == 0) {
      return typed.auth_request_id;
    }
    if (std::strcmp(field, "uasp_id") == 0) {
      return typed.uasp_id;
    }
    if (std::strcmp(field, "flight_id") == 0) {
      return typed.flight_id;
    }
    if (std::strcmp(field, "requested_status") == 0) {
      return typed.requested_status;
    }
    if (std::strcmp(field, "request_time") == 0) {
      return typed.request_time.in();
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::flightAuthorizationRequest)");
  }

  Value getValue(Serializer& strm, const char* field, TypeSupportImpl* = 0) const
  {
    const Encoding& encoding = strm.encoding();
    ACE_UNUSED_ARG(encoding);
    size_t total_size = 0;
    if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
      if (!strm.read_delimiter(total_size)) {
        throw std::runtime_error("Unable to reader delimiter in getValue");
      }
    }
    std::string base_field = field;
    const size_t index = base_field.find('.');
    std::string subfield;
    if (index != std::string::npos) {
      subfield = base_field.substr(index + 1);
      base_field = base_field.substr(0, index);
    }
    if (base_field == "auth_request_id") {
      ACE_CDR::Long val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'auth_request_id' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'auth_request_id' could not be skipped");
      }
    }
    if (base_field == "uasp_id") {
      ACE_CDR::Long val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'uasp_id' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'uasp_id' could not be skipped");
      }
    }
    if (base_field == "flight_id") {
      ACE_CDR::Long val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'flight_id' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'flight_id' could not be skipped");
      }
    }
    if (base_field == "requested_status") {
      ACE_CDR::Boolean val;
      if (!(strm >> ACE_InputCDR::to_boolean(val))) {
        throw std::runtime_error("Field 'requested_status' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  1 )) {
        throw std::runtime_error("Field 'requested_status' could not be skipped");
      }
    }
    if (base_field == "request_time") {
      TAO::String_Manager val;
      if (!(strm >> val.out())) {
        throw std::runtime_error("Field 'request_time' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(strm >> len)) {
        throw std::runtime_error("String 'request_time' length could not be deserialized");
      }
      if (!strm.skip(len)) {
        throw std::runtime_error("String 'request_time' contents could not be skipped");
      }
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Did not find field in getValue");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "auth_request_id") == 0) {
      return make_field_cmp(&T::auth_request_id, next);
    }
    if (std::strcmp(field, "uasp_id") == 0) {
      return make_field_cmp(&T::uasp_id, next);
    }
    if (std::strcmp(field, "flight_id") == 0) {
      return make_field_cmp(&T::flight_id, next);
    }
    if (std::strcmp(field, "requested_status") == 0) {
      return make_field_cmp(&T::requested_status, next);
    }
    if (std::strcmp(field, "request_time") == 0) {
      return make_field_cmp(&T::request_time, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::flightAuthorizationRequest)");
  }

#ifndef OPENDDS_NO_MULTI_TOPIC
  const char** getFieldNames() const
  {
    static const char* names[] = {"auth_request_id", "uasp_id", "flight_id", "requested_status", "request_time", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "auth_request_id") == 0) {
      return &static_cast<const T*>(stru)->auth_request_id;
    }
    if (std::strcmp(field, "uasp_id") == 0) {
      return &static_cast<const T*>(stru)->uasp_id;
    }
    if (std::strcmp(field, "flight_id") == 0) {
      return &static_cast<const T*>(stru)->flight_id;
    }
    if (std::strcmp(field, "requested_status") == 0) {
      return &static_cast<const T*>(stru)->requested_status;
    }
    if (std::strcmp(field, "request_time") == 0) {
      return &static_cast<const T*>(stru)->request_time;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::flightAuthorizationRequest)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "auth_request_id") == 0) {
      static_cast<T*>(lhs)->auth_request_id = *static_cast<const  ::CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "uasp_id") == 0) {
      static_cast<T*>(lhs)->uasp_id = *static_cast<const  ::CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "flight_id") == 0) {
      static_cast<T*>(lhs)->flight_id = *static_cast<const  ::CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "requested_status") == 0) {
      static_cast<T*>(lhs)->requested_status = *static_cast<const  ::CORBA::Boolean*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "request_time") == 0) {
      static_cast<T*>(lhs)->request_time = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::flightAuthorizationRequest)");
  }

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "auth_request_id") == 0) {
      return static_cast<const T*>(lhs)->auth_request_id == static_cast<const T*>(rhs)->auth_request_id;
    }
    if (std::strcmp(field, "uasp_id") == 0) {
      return static_cast<const T*>(lhs)->uasp_id == static_cast<const T*>(rhs)->uasp_id;
    }
    if (std::strcmp(field, "flight_id") == 0) {
      return static_cast<const T*>(lhs)->flight_id == static_cast<const T*>(rhs)->flight_id;
    }
    if (std::strcmp(field, "requested_status") == 0) {
      return static_cast<const T*>(lhs)->requested_status == static_cast<const T*>(rhs)->requested_status;
    }
    if (std::strcmp(field, "request_time") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->request_time.in(), static_cast<const T*>(rhs)->request_time.in());
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::flightAuthorizationRequest)");
  }
#endif /* OPENDDS_NO_MULTI_TOPIC */

};

template<>
const MetaStruct& getMetaStruct< ::UATM::flightAuthorizationRequest>()
{
  static MetaStructImpl< ::UATM::flightAuthorizationRequest> msi;
  return msi;
}

bool gen_skip_over(Serializer& ser,  ::UATM::flightAuthorizationRequest*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl< ::UATM::flightAuthorizationRequest>().getValue(ser, "");
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif // ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace XTypes {

#ifndef OPENDDS_SAFETY_PROFILE
#if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
template <>
class DynamicDataAdapterImpl< ::UATM::flightAuthorizationRequest,  ::UATM::flightAuthorizationRequest > : public DynamicDataAdapter_T< ::UATM::flightAuthorizationRequest> {
public:
  DynamicDataAdapterImpl(DDS::DynamicType_ptr type,  ::UATM::flightAuthorizationRequest& value)
    : DynamicDataAdapter_T< ::UATM::flightAuthorizationRequest>(type, value)
  {
  }

  DynamicDataAdapterImpl(DDS::DynamicType_ptr type, const  ::UATM::flightAuthorizationRequest& value)
    : DynamicDataAdapter_T< ::UATM::flightAuthorizationRequest>(type, value)
  {
  }

  DDS::ReturnCode_t clear_all_values()
  {
    const DDS::ReturnCode_t rc = assert_mutable("DynamicDataAdapter::clear_all_values");
    if (rc == DDS::RETCODE_OK) {
      OpenDDS::DCPS::set_default(value_);
    }
    return rc;
  }

  DDS::UInt32 get_item_count()
  {
    return 5;
  }

  bool serialized_size(const OpenDDS::DCPS::Encoding& enc, size_t& size, OpenDDS::DCPS::Sample::Extent ext) const
  {
    using namespace OpenDDS::DCPS;
    if (ext == Sample::Full) {
      DCPS::serialized_size(enc, size, value_);
    } else if (ext == Sample::NestedKeyOnly) {
      const NestedKeyOnly<const  ::UATM::flightAuthorizationRequest> nested_key_only(value_);
      DCPS::serialized_size(enc, size, nested_key_only);
    } else {
      return false; // Non-topic type
    }
    return true;
  }

  bool serialize(OpenDDS::DCPS::Serializer& ser, OpenDDS::DCPS::Sample::Extent ext) const
  {
    using namespace OpenDDS::DCPS;
    if (ext == Sample::Full) {
      return ser << value_;
    } else if (ext == Sample::NestedKeyOnly) {
      NestedKeyOnly<const  ::UATM::flightAuthorizationRequest> nested_key_only(value_);
      return ser << nested_key_only;
    } else {
      return false; // Non-topic type
    }
  }

protected:
  DDS::ReturnCode_t get_raw_value(const char* method, void* dest, DDS::TypeKind tk, DDS::MemberId id)
  {
    switch (id) {
    case 0:
      {
        return get_simple_raw_value(method, dest, tk, value_.auth_request_id, id);
      }
    case 1:
      {
        return get_simple_raw_value(method, dest, tk, value_.uasp_id, id);
      }
    case 2:
      {
        return get_simple_raw_value(method, dest, tk, value_.flight_id, id);
      }
    case 3:
      {
        return get_simple_raw_value(method, dest, tk, value_.requested_status, id);
      }
    case 4:
      {
        return get_s8_raw_value(method, dest, tk, value_.request_time, id);
      }
    default:
      return invalid_id(method, id);
    }
  }

  DDS::ReturnCode_t set_raw_value(const char* method, DDS::MemberId id, const void* source, DDS::TypeKind tk)
  {
    DDS::ReturnCode_t rc = assert_mutable(method);
    if (rc != DDS::RETCODE_OK) {
      return rc;
    }
    switch (id) {
    case 0:
      {
        return set_simple_raw_value(method, value_.auth_request_id, id, source, tk);
      }
    case 1:
      {
        return set_simple_raw_value(method, value_.uasp_id, id, source, tk);
      }
    case 2:
      {
        return set_simple_raw_value(method, value_.flight_id, id, source, tk);
      }
    case 3:
      {
        return set_simple_raw_value(method, value_.requested_status, id, source, tk);
      }
    case 4:
      {
        return set_s8_raw_value(method, value_.request_time.inout(), id, source, tk);
      }
    default:
      return invalid_id(method, id);
    }
  }
};

#endif // if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER

template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::flightAuthorizationRequest,  ::UATM::flightAuthorizationRequest>(DDS::DynamicType_ptr type, const  ::UATM::flightAuthorizationRequest& value)
{
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  if (type) {
    return new DynamicDataAdapterImpl< ::UATM::flightAuthorizationRequest,  ::UATM::flightAuthorizationRequest>(type, value);
  }
#  else
  ACE_UNUSED_ARG(type);
  ACE_UNUSED_ARG(value);
#  endif
  return 0;
}

template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::flightAuthorizationRequest,  ::UATM::flightAuthorizationRequest>(DDS::DynamicType_ptr type,  ::UATM::flightAuthorizationRequest& value)
{
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  if (type) {
    return new DynamicDataAdapterImpl< ::UATM::flightAuthorizationRequest,  ::UATM::flightAuthorizationRequest>(type, value);
  }
#  else
  ACE_UNUSED_ARG(type);
  ACE_UNUSED_ARG(value);
#  endif
  return 0;
}

template <>
const  ::UATM::flightAuthorizationRequest* get_dynamic_data_adapter_value< ::UATM::flightAuthorizationRequest,  ::UATM::flightAuthorizationRequest>(DDS::DynamicData_ptr dd)
{
  ACE_UNUSED_ARG(dd);
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  typedef DynamicDataAdapterImpl< ::UATM::flightAuthorizationRequest,  ::UATM::flightAuthorizationRequest> Dda;
  const Dda* const dda = dynamic_cast<Dda*>(dd);
  if (dda) {
    return &dda->wrapped();
  }
#  endif
  return 0;
}
#endif // ifndef OPENDDS_SAFETY_PROFILE

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End STRUCT: flightAuthorizationRequest */

/* End MODULE: UATM */


/* Begin MODULE: UATM */



/* Begin STRUCT: weatherInfo */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> const XTypes::TypeIdentifier& getMinimalTypeIdentifier<UATM_weatherInfo_xtag>()
{
  static XTypes::TypeIdentifier ti;
  ACE_GUARD_RETURN(ACE_Thread_Mutex, guard, TheServiceParticipant->get_static_xtypes_lock(), ti);
  if (ti.kind() == XTypes::TK_NONE) {
    ti = XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(153, 43, 12, 157, 181, 156, 1, 197, 33, 234, 126, 93, 167, 218));
  }
  return ti;
}

template<> const XTypes::TypeMap& getMinimalTypeMap<UATM_weatherInfo_xtag>()
{
  return OPENDDS_IDL_FILE_SPECIFIC(get_minimal_type_map, 0)();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool vread(OpenDDS::DCPS::ValueReader& value_reader,  ::UATM::weatherInfo& value)
{
  ACE_UNUSED_ARG(value_reader);
  ACE_UNUSED_ARG(value);
  static const ListMemberHelper::Pair pairs[] = {{"weather_id",0},{"location",1},{"temperature",2},{"wind_speed",3},{"weather_condition",4},{"observation_time",5},{0,0}};
  ListMemberHelper helper(pairs);
  if (!value_reader.begin_struct(OpenDDS::DCPS::APPENDABLE)) return false;
  XTypes::MemberId member_id;
  while (value_reader.members_remaining()) {
    if (!value_reader.begin_struct_member(member_id, helper)) return false;
    switch (member_id) {
    case 0: {
      if (!value_reader.read_int32(value.weather_id)) return false;
      break;
    }
    case 1: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.location = x.c_str();
      }
      break;
    }
    case 2: {
      if (!value_reader.read_float32(value.temperature)) return false;
      break;
    }
    case 3: {
      if (!value_reader.read_float32(value.wind_speed)) return false;
      break;
    }
    case 4: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.weather_condition = x.c_str();
      }
      break;
    }
    case 5: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.observation_time = x.c_str();
      }
      break;
    }
    }
    if (!value_reader.end_struct_member()) return false;
  }
  if (!value_reader.end_struct()) return false;
  return true;
}

bool vread(OpenDDS::DCPS::ValueReader& value_reader, const NestedKeyOnly< ::UATM::weatherInfo>& value)
{
  ACE_UNUSED_ARG(value_reader);
  ACE_UNUSED_ARG(value);
  static const ListMemberHelper::Pair pairs[] = {{"weather_id",0},{"location",1},{"temperature",2},{"wind_speed",3},{"weather_condition",4},{"observation_time",5},{0,0}};
  ListMemberHelper helper(pairs);
  if (!value_reader.begin_struct(OpenDDS::DCPS::APPENDABLE)) return false;
  XTypes::MemberId member_id;
  while (value_reader.members_remaining()) {
    if (!value_reader.begin_struct_member(member_id, helper)) return false;
    switch (member_id) {
    case 0: {
      if (!value_reader.read_int32(value.value.weather_id)) return false;
      break;
    }
    case 1: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.value.location = x.c_str();
      }
      break;
    }
    case 2: {
      if (!value_reader.read_float32(value.value.temperature)) return false;
      break;
    }
    case 3: {
      if (!value_reader.read_float32(value.value.wind_speed)) return false;
      break;
    }
    case 4: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.value.weather_condition = x.c_str();
      }
      break;
    }
    case 5: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.value.observation_time = x.c_str();
      }
      break;
    }
    }
    if (!value_reader.end_struct_member()) return false;
  }
  if (!value_reader.end_struct()) return false;
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const  ::UATM::weatherInfo& value)
{
  ACE_UNUSED_ARG(value_writer);
  ACE_UNUSED_ARG(value);
  if (!value_writer.begin_struct(OpenDDS::DCPS::APPENDABLE)) {
    return false;
  }
  {
    MemberParam param(0, false, "weather_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.weather_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(1, false, "location", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.location)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(2, false, "temperature", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_float32(value.temperature)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(3, false, "wind_speed", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_float32(value.wind_speed)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(4, false, "weather_condition", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.weather_condition)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(5, false, "observation_time", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.observation_time)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  return value_writer.end_struct();
}

bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const NestedKeyOnly<const  ::UATM::weatherInfo>& value)
{
  ACE_UNUSED_ARG(value_writer);
  ACE_UNUSED_ARG(value);
  if (!value_writer.begin_struct(OpenDDS::DCPS::APPENDABLE)) {
    return false;
  }
  {
    MemberParam param(0, false, "weather_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.value.weather_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(1, false, "location", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.value.location)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(2, false, "temperature", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_float32(value.value.temperature)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(3, false, "wind_speed", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_float32(value.value.wind_speed)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(4, false, "weather_condition", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.value.weather_condition)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(5, false, "observation_time", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.value.observation_time)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  return value_writer.end_struct();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> void set_default( ::UATM::weatherInfo& stru)
{
  ACE_UNUSED_ARG(stru);
  stru.weather_id = 0;
  stru.location = "";
  stru.temperature = 0;
  stru.wind_speed = 0;
  stru.weather_condition = "";
  stru.observation_time = "";
}

void serialized_size(const Encoding& encoding, size_t& size, const ::UATM::weatherInfo& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
  primitive_serialized_size(encoding, size, stru.weather_id);
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.location.in()) + 1;
  primitive_serialized_size(encoding, size, stru.temperature);
  primitive_serialized_size(encoding, size, stru.wind_speed);
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.weather_condition.in()) + 1;
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.observation_time.in()) + 1;
}

bool operator<<(Serializer& strm, const ::UATM::weatherInfo& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
  return (strm << stru.weather_id)
    && (strm << ACE_OutputCDR::from_string(stru.location.in(), 20))
    && (strm << stru.temperature)
    && (strm << stru.wind_speed)
    && (strm << ACE_OutputCDR::from_string(stru.weather_condition.in(), 20))
    && (strm << ACE_OutputCDR::from_string(stru.observation_time.in(), 20));
}

bool operator>>(Serializer& strm,  ::UATM::weatherInfo& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  bool reached_end_of_struct = false;
  ACE_UNUSED_ARG(reached_end_of_struct);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.weather_id = 0;
  } else {
    if (!(strm >> stru.weather_id)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.location = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.location.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.temperature = 0;
  } else {
    if (!(strm >> stru.temperature)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.wind_speed = 0;
  } else {
    if (!(strm >> stru.wind_speed)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.weather_condition = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.weather_condition.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.observation_time = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.observation_time.out(), 20))) {
      return false;
    }
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const ::UATM::weatherInfo>& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
  primitive_serialized_size(encoding, size, stru.value.weather_id);
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.value.location.in()) + 1;
  primitive_serialized_size(encoding, size, stru.value.temperature);
  primitive_serialized_size(encoding, size, stru.value.wind_speed);
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.value.weather_condition.in()) + 1;
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.value.observation_time.in()) + 1;
}

bool operator<<(Serializer& strm, const NestedKeyOnly<const ::UATM::weatherInfo>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
  return (strm << stru.value.weather_id)
    && (strm << ACE_OutputCDR::from_string(stru.value.location.in(), 20))
    && (strm << stru.value.temperature)
    && (strm << stru.value.wind_speed)
    && (strm << ACE_OutputCDR::from_string(stru.value.weather_condition.in(), 20))
    && (strm << ACE_OutputCDR::from_string(stru.value.observation_time.in(), 20));
}

bool operator>>(Serializer& strm, const NestedKeyOnly< ::UATM::weatherInfo>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  bool reached_end_of_struct = false;
  ACE_UNUSED_ARG(reached_end_of_struct);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.weather_id = 0;
  } else {
    if (!(strm >> stru.value.weather_id)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.location = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.value.location.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.temperature = 0;
  } else {
    if (!(strm >> stru.value.temperature)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.wind_speed = 0;
  } else {
    if (!(strm >> stru.value.wind_speed)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.weather_condition = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.value.weather_condition.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.observation_time = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.value.observation_time.out(), 20))) {
      return false;
    }
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

void serialized_size(const Encoding& encoding, size_t& size, const KeyOnly<const  ::UATM::weatherInfo> stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  switch (encoding.xcdr_version()) {
  case Encoding::XCDR_VERSION_1:
    {
    primitive_serialized_size(encoding, size, stru.value.weather_id);
    break;
    }
  case Encoding::XCDR_VERSION_2:
    {
    primitive_serialized_size(encoding, size, stru.value.weather_id);
    break;
    }
  case Encoding::XCDR_VERSION_NONE:
    {
    primitive_serialized_size(encoding, size, stru.value.weather_id);
    break;
    }
  }
}

bool operator<<(Serializer& strm, KeyOnly<const  ::UATM::weatherInfo> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.value.weather_id);
}

bool operator>>(Serializer& strm, KeyOnly< ::UATM::weatherInfo> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.value.weather_id);
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace DCPS {
bool DDSTraits< ::UATM::weatherInfo>::is_key(const char* field)
{
  ACE_UNUSED_ARG(field);
  if (!ACE_OS::strcmp(field, "weather_id")) {
    return true;
  }
  return false;
}
} // namespace DCPS
} // namespace OpenDDS
OPENDDS_END_VERSIONED_NAMESPACE_DECL

namespace UATM {
::DDS::DataWriter_ptr weatherInfoTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<weatherInfo> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}

::DDS::DataReader_ptr weatherInfoTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<weatherInfo> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}

#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr weatherInfoTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<weatherInfo> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<weatherInfo, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */

#ifndef OPENDDS_SAFETY_PROFILE
weatherInfo* weatherInfoTypeSupportImpl::create_sample(::DDS::DynamicData_ptr src)
{
  weatherInfo* value = new weatherInfo;
  const ::DDS::ReturnCode_t rc = OpenDDS::DCPS::TypeSupportImpl_T<weatherInfo>::create_sample_rc(*value, src);
  if (rc != ::DDS::RETCODE_OK && OpenDDS::DCPS::log_level >= OpenDDS::DCPS::LogLevel::Warning) {
    ACE_ERROR((LM_WARNING, "(%P|%t) WARNING: weatherInfoTypeSupportImpl::create_sample: "
      "create_sample_rc failed: %C\n", OpenDDS::DCPS::retcode_to_string(rc)));
  }
  return value;
}
#endif

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& weatherInfoTypeSupportImpl::getMetaStructForType() const
{
  return OpenDDS::DCPS::getMetaStruct<weatherInfo>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */

namespace {
  OpenDDS::DCPS::TypeSupportInitializer<weatherInfoTypeSupportImpl> ts_init_UATM_weatherInfo;
}

const OpenDDS::XTypes::TypeIdentifier& weatherInfoTypeSupportImpl::getMinimalTypeIdentifier() const
{
  return OpenDDS::DCPS::getMinimalTypeIdentifier<OpenDDS::DCPS::UATM_weatherInfo_xtag>();
}

const OpenDDS::XTypes::TypeMap& weatherInfoTypeSupportImpl::getMinimalTypeMap() const
{
  return OpenDDS::DCPS::getMinimalTypeMap<OpenDDS::DCPS::UATM_weatherInfo_xtag>();
}

const OpenDDS::XTypes::TypeIdentifier& weatherInfoTypeSupportImpl::getCompleteTypeIdentifier() const
{
  static OpenDDS::XTypes::TypeIdentifier ti;
  return ti;
}

const OpenDDS::XTypes::TypeMap& weatherInfoTypeSupportImpl::getCompleteTypeMap() const
{
  static OpenDDS::XTypes::TypeMap tm;
  return tm;
}

::DDS::ReturnCode_t weatherInfoTypeSupportImpl::encode_to_string(const weatherInfo& in, CORBA::String_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
#if OPENDDS_HAS_JSON_VALUE_WRITER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    rapidjson::StringBuffer buffer;
    rapidjson::Writer<rapidjson::StringBuffer> writer(buffer);
    OpenDDS::DCPS::JsonValueWriter<rapidjson::Writer<rapidjson::StringBuffer> > jvw(writer);
    if (!vwrite(jvw, in)) {
      return ::DDS::RETCODE_ERROR;
    }
    out = buffer.GetString();
    return ::DDS::RETCODE_OK;
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  out = "";
  return ::DDS::RETCODE_UNSUPPORTED;
}

::DDS::ReturnCode_t weatherInfoTypeSupportImpl::encode_to_bytes(const weatherInfo& in, ::DDS::OctetSeq_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
#if OPENDDS_HAS_JSON_VALUE_WRITER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    CORBA::String_var buffer;
    const ::DDS::ReturnCode_t ret = encode_to_string(in, buffer, format);
    if (ret == ::DDS::RETCODE_OK) {
      const ::DDS::UInt32 len = static_cast< ::DDS::UInt32>(std::strlen(buffer));
      out = new ::DDS::OctetSeq(len);
      out->length(len);
      std::memcpy(out->get_buffer(), buffer, len);
      return ::DDS::RETCODE_OK;
    } else {
      out = new ::DDS::OctetSeq();
      return ret;
    }
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  out = new ::DDS::OctetSeq();
  return ::DDS::RETCODE_UNSUPPORTED;
}

::DDS::ReturnCode_t weatherInfoTypeSupportImpl::decode_from_string(const char* in, weatherInfo_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
  out = new weatherInfo;
  OpenDDS::DCPS::set_default(*out);
#if OPENDDS_HAS_JSON_VALUE_READER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    rapidjson::StringStream buffer(in);
    OpenDDS::DCPS::JsonValueReader<> jvr(buffer);
    return vread(jvr, *out) ? ::DDS::RETCODE_OK : ::DDS::RETCODE_ERROR;
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  return ::DDS::RETCODE_UNSUPPORTED;
}

::DDS::ReturnCode_t weatherInfoTypeSupportImpl::decode_from_bytes(const ::DDS::OctetSeq& in, weatherInfo_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
#if OPENDDS_HAS_JSON_VALUE_READER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    return decode_from_string(reinterpret_cast<const char*>(in.get_buffer()), out, format);
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  out = new weatherInfo();
  return ::DDS::RETCODE_UNSUPPORTED;
}

weatherInfoTypeSupport::_ptr_type weatherInfoTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl< ::UATM::weatherInfo> : MetaStruct {
  typedef  ::UATM::weatherInfo T;

#ifndef OPENDDS_NO_MULTI_TOPIC
  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 1; }

#endif /* OPENDDS_NO_MULTI_TOPIC */

  Value getValue(const void* stru, const char* field) const
  {
    const ::UATM::weatherInfo& typed = *static_cast<const ::UATM::weatherInfo*>(stru);
    ACE_UNUSED_ARG(typed);
    if (std::strcmp(field, "weather_id") == 0) {
      return typed.weather_id;
    }
    if (std::strcmp(field, "location") == 0) {
      return typed.location.in();
    }
    if (std::strcmp(field, "temperature") == 0) {
      return typed.temperature;
    }
    if (std::strcmp(field, "wind_speed") == 0) {
      return typed.wind_speed;
    }
    if (std::strcmp(field, "weather_condition") == 0) {
      return typed.weather_condition.in();
    }
    if (std::strcmp(field, "observation_time") == 0) {
      return typed.observation_time.in();
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::weatherInfo)");
  }

  Value getValue(Serializer& strm, const char* field, TypeSupportImpl* = 0) const
  {
    const Encoding& encoding = strm.encoding();
    ACE_UNUSED_ARG(encoding);
    size_t total_size = 0;
    if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
      if (!strm.read_delimiter(total_size)) {
        throw std::runtime_error("Unable to reader delimiter in getValue");
      }
    }
    std::string base_field = field;
    const size_t index = base_field.find('.');
    std::string subfield;
    if (index != std::string::npos) {
      subfield = base_field.substr(index + 1);
      base_field = base_field.substr(0, index);
    }
    if (base_field == "weather_id") {
      ACE_CDR::Long val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'weather_id' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'weather_id' could not be skipped");
      }
    }
    if (base_field == "location") {
      TAO::String_Manager val;
      if (!(strm >> val.out())) {
        throw std::runtime_error("Field 'location' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(strm >> len)) {
        throw std::runtime_error("String 'location' length could not be deserialized");
      }
      if (!strm.skip(len)) {
        throw std::runtime_error("String 'location' contents could not be skipped");
      }
    }
    if (base_field == "temperature") {
      ACE_CDR::Float val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'temperature' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'temperature' could not be skipped");
      }
    }
    if (base_field == "wind_speed") {
      ACE_CDR::Float val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'wind_speed' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'wind_speed' could not be skipped");
      }
    }
    if (base_field == "weather_condition") {
      TAO::String_Manager val;
      if (!(strm >> val.out())) {
        throw std::runtime_error("Field 'weather_condition' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(strm >> len)) {
        throw std::runtime_error("String 'weather_condition' length could not be deserialized");
      }
      if (!strm.skip(len)) {
        throw std::runtime_error("String 'weather_condition' contents could not be skipped");
      }
    }
    if (base_field == "observation_time") {
      TAO::String_Manager val;
      if (!(strm >> val.out())) {
        throw std::runtime_error("Field 'observation_time' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(strm >> len)) {
        throw std::runtime_error("String 'observation_time' length could not be deserialized");
      }
      if (!strm.skip(len)) {
        throw std::runtime_error("String 'observation_time' contents could not be skipped");
      }
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Did not find field in getValue");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "weather_id") == 0) {
      return make_field_cmp(&T::weather_id, next);
    }
    if (std::strcmp(field, "location") == 0) {
      return make_field_cmp(&T::location, next);
    }
    if (std::strcmp(field, "temperature") == 0) {
      return make_field_cmp(&T::temperature, next);
    }
    if (std::strcmp(field, "wind_speed") == 0) {
      return make_field_cmp(&T::wind_speed, next);
    }
    if (std::strcmp(field, "weather_condition") == 0) {
      return make_field_cmp(&T::weather_condition, next);
    }
    if (std::strcmp(field, "observation_time") == 0) {
      return make_field_cmp(&T::observation_time, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::weatherInfo)");
  }

#ifndef OPENDDS_NO_MULTI_TOPIC
  const char** getFieldNames() const
  {
    static const char* names[] = {"weather_id", "location", "temperature", "wind_speed", "weather_condition", "observation_time", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "weather_id") == 0) {
      return &static_cast<const T*>(stru)->weather_id;
    }
    if (std::strcmp(field, "location") == 0) {
      return &static_cast<const T*>(stru)->location;
    }
    if (std::strcmp(field, "temperature") == 0) {
      return &static_cast<const T*>(stru)->temperature;
    }
    if (std::strcmp(field, "wind_speed") == 0) {
      return &static_cast<const T*>(stru)->wind_speed;
    }
    if (std::strcmp(field, "weather_condition") == 0) {
      return &static_cast<const T*>(stru)->weather_condition;
    }
    if (std::strcmp(field, "observation_time") == 0) {
      return &static_cast<const T*>(stru)->observation_time;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::weatherInfo)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "weather_id") == 0) {
      static_cast<T*>(lhs)->weather_id = *static_cast<const  ::CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "location") == 0) {
      static_cast<T*>(lhs)->location = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "temperature") == 0) {
      static_cast<T*>(lhs)->temperature = *static_cast<const  ::CORBA::Float*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "wind_speed") == 0) {
      static_cast<T*>(lhs)->wind_speed = *static_cast<const  ::CORBA::Float*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "weather_condition") == 0) {
      static_cast<T*>(lhs)->weather_condition = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "observation_time") == 0) {
      static_cast<T*>(lhs)->observation_time = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::weatherInfo)");
  }

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "weather_id") == 0) {
      return static_cast<const T*>(lhs)->weather_id == static_cast<const T*>(rhs)->weather_id;
    }
    if (std::strcmp(field, "location") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->location.in(), static_cast<const T*>(rhs)->location.in());
    }
    if (std::strcmp(field, "temperature") == 0) {
      return static_cast<const T*>(lhs)->temperature == static_cast<const T*>(rhs)->temperature;
    }
    if (std::strcmp(field, "wind_speed") == 0) {
      return static_cast<const T*>(lhs)->wind_speed == static_cast<const T*>(rhs)->wind_speed;
    }
    if (std::strcmp(field, "weather_condition") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->weather_condition.in(), static_cast<const T*>(rhs)->weather_condition.in());
    }
    if (std::strcmp(field, "observation_time") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->observation_time.in(), static_cast<const T*>(rhs)->observation_time.in());
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::weatherInfo)");
  }
#endif /* OPENDDS_NO_MULTI_TOPIC */

};

template<>
const MetaStruct& getMetaStruct< ::UATM::weatherInfo>()
{
  static MetaStructImpl< ::UATM::weatherInfo> msi;
  return msi;
}

bool gen_skip_over(Serializer& ser,  ::UATM::weatherInfo*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl< ::UATM::weatherInfo>().getValue(ser, "");
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif // ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace XTypes {

#ifndef OPENDDS_SAFETY_PROFILE
#if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
template <>
class DynamicDataAdapterImpl< ::UATM::weatherInfo,  ::UATM::weatherInfo > : public DynamicDataAdapter_T< ::UATM::weatherInfo> {
public:
  DynamicDataAdapterImpl(DDS::DynamicType_ptr type,  ::UATM::weatherInfo& value)
    : DynamicDataAdapter_T< ::UATM::weatherInfo>(type, value)
  {
  }

  DynamicDataAdapterImpl(DDS::DynamicType_ptr type, const  ::UATM::weatherInfo& value)
    : DynamicDataAdapter_T< ::UATM::weatherInfo>(type, value)
  {
  }

  DDS::ReturnCode_t clear_all_values()
  {
    const DDS::ReturnCode_t rc = assert_mutable("DynamicDataAdapter::clear_all_values");
    if (rc == DDS::RETCODE_OK) {
      OpenDDS::DCPS::set_default(value_);
    }
    return rc;
  }

  DDS::UInt32 get_item_count()
  {
    return 6;
  }

  bool serialized_size(const OpenDDS::DCPS::Encoding& enc, size_t& size, OpenDDS::DCPS::Sample::Extent ext) const
  {
    using namespace OpenDDS::DCPS;
    if (ext == Sample::Full) {
      DCPS::serialized_size(enc, size, value_);
    } else if (ext == Sample::NestedKeyOnly) {
      const NestedKeyOnly<const  ::UATM::weatherInfo> nested_key_only(value_);
      DCPS::serialized_size(enc, size, nested_key_only);
    } else {
      return false; // Non-topic type
    }
    return true;
  }

  bool serialize(OpenDDS::DCPS::Serializer& ser, OpenDDS::DCPS::Sample::Extent ext) const
  {
    using namespace OpenDDS::DCPS;
    if (ext == Sample::Full) {
      return ser << value_;
    } else if (ext == Sample::NestedKeyOnly) {
      NestedKeyOnly<const  ::UATM::weatherInfo> nested_key_only(value_);
      return ser << nested_key_only;
    } else {
      return false; // Non-topic type
    }
  }

protected:
  DDS::ReturnCode_t get_raw_value(const char* method, void* dest, DDS::TypeKind tk, DDS::MemberId id)
  {
    switch (id) {
    case 0:
      {
        return get_simple_raw_value(method, dest, tk, value_.weather_id, id);
      }
    case 1:
      {
        return get_s8_raw_value(method, dest, tk, value_.location, id);
      }
    case 2:
      {
        return get_simple_raw_value(method, dest, tk, value_.temperature, id);
      }
    case 3:
      {
        return get_simple_raw_value(method, dest, tk, value_.wind_speed, id);
      }
    case 4:
      {
        return get_s8_raw_value(method, dest, tk, value_.weather_condition, id);
      }
    case 5:
      {
        return get_s8_raw_value(method, dest, tk, value_.observation_time, id);
      }
    default:
      return invalid_id(method, id);
    }
  }

  DDS::ReturnCode_t set_raw_value(const char* method, DDS::MemberId id, const void* source, DDS::TypeKind tk)
  {
    DDS::ReturnCode_t rc = assert_mutable(method);
    if (rc != DDS::RETCODE_OK) {
      return rc;
    }
    switch (id) {
    case 0:
      {
        return set_simple_raw_value(method, value_.weather_id, id, source, tk);
      }
    case 1:
      {
        return set_s8_raw_value(method, value_.location.inout(), id, source, tk);
      }
    case 2:
      {
        return set_simple_raw_value(method, value_.temperature, id, source, tk);
      }
    case 3:
      {
        return set_simple_raw_value(method, value_.wind_speed, id, source, tk);
      }
    case 4:
      {
        return set_s8_raw_value(method, value_.weather_condition.inout(), id, source, tk);
      }
    case 5:
      {
        return set_s8_raw_value(method, value_.observation_time.inout(), id, source, tk);
      }
    default:
      return invalid_id(method, id);
    }
  }
};

#endif // if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER

template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::weatherInfo,  ::UATM::weatherInfo>(DDS::DynamicType_ptr type, const  ::UATM::weatherInfo& value)
{
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  if (type) {
    return new DynamicDataAdapterImpl< ::UATM::weatherInfo,  ::UATM::weatherInfo>(type, value);
  }
#  else
  ACE_UNUSED_ARG(type);
  ACE_UNUSED_ARG(value);
#  endif
  return 0;
}

template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::weatherInfo,  ::UATM::weatherInfo>(DDS::DynamicType_ptr type,  ::UATM::weatherInfo& value)
{
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  if (type) {
    return new DynamicDataAdapterImpl< ::UATM::weatherInfo,  ::UATM::weatherInfo>(type, value);
  }
#  else
  ACE_UNUSED_ARG(type);
  ACE_UNUSED_ARG(value);
#  endif
  return 0;
}

template <>
const  ::UATM::weatherInfo* get_dynamic_data_adapter_value< ::UATM::weatherInfo,  ::UATM::weatherInfo>(DDS::DynamicData_ptr dd)
{
  ACE_UNUSED_ARG(dd);
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  typedef DynamicDataAdapterImpl< ::UATM::weatherInfo,  ::UATM::weatherInfo> Dda;
  const Dda* const dda = dynamic_cast<Dda*>(dd);
  if (dda) {
    return &dda->wrapped();
  }
#  endif
  return 0;
}
#endif // ifndef OPENDDS_SAFETY_PROFILE

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End STRUCT: weatherInfo */

/* End MODULE: UATM */


/* Begin MODULE: UATM */



/* Begin STRUCT: flightAssign */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> const XTypes::TypeIdentifier& getMinimalTypeIdentifier<UATM_flightAssign_xtag>()
{
  static XTypes::TypeIdentifier ti;
  ACE_GUARD_RETURN(ACE_Thread_Mutex, guard, TheServiceParticipant->get_static_xtypes_lock(), ti);
  if (ti.kind() == XTypes::TK_NONE) {
    ti = XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(52, 76, 14, 154, 222, 242, 115, 40, 37, 107, 14, 9, 27, 247));
  }
  return ti;
}

template<> const XTypes::TypeMap& getMinimalTypeMap<UATM_flightAssign_xtag>()
{
  return OPENDDS_IDL_FILE_SPECIFIC(get_minimal_type_map, 0)();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool vread(OpenDDS::DCPS::ValueReader& value_reader,  ::UATM::flightAssign& value)
{
  ACE_UNUSED_ARG(value_reader);
  ACE_UNUSED_ARG(value);
  static const ListMemberHelper::Pair pairs[] = {{"flight_assign_id",0},{"assign_time",1},{"operator_id",2},{"assign_status",3},{"resources_id",4},{0,0}};
  ListMemberHelper helper(pairs);
  if (!value_reader.begin_struct(OpenDDS::DCPS::APPENDABLE)) return false;
  XTypes::MemberId member_id;
  while (value_reader.members_remaining()) {
    if (!value_reader.begin_struct_member(member_id, helper)) return false;
    switch (member_id) {
    case 0: {
      if (!value_reader.read_int32(value.flight_assign_id)) return false;
      break;
    }
    case 1: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.assign_time = x.c_str();
      }
      break;
    }
    case 2: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.operator_id = x.c_str();
      }
      break;
    }
    case 3: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.assign_status = x.c_str();
      }
      break;
    }
    case 4: {
      if (!value_reader.begin_array(XTypes::TK_STRING8)) return false;
      for (unsigned int i = 0; i != 2; ++i) {
        if (!value_reader.begin_element()) return false;
        {
          String x;
          if (!value_reader.read_string(x)) return false;
          value.resources_id[i] = x.c_str();
        }
        if (!value_reader.end_element()) return false;
      }
      if (!value_reader.end_array()) return false;
      break;
    }
    }
    if (!value_reader.end_struct_member()) return false;
  }
  if (!value_reader.end_struct()) return false;
  return true;
}

bool vread(OpenDDS::DCPS::ValueReader& value_reader, const NestedKeyOnly< ::UATM::flightAssign>& value)
{
  ACE_UNUSED_ARG(value_reader);
  ACE_UNUSED_ARG(value);
  static const ListMemberHelper::Pair pairs[] = {{"flight_assign_id",0},{"assign_time",1},{"operator_id",2},{"assign_status",3},{"resources_id",4},{0,0}};
  ListMemberHelper helper(pairs);
  if (!value_reader.begin_struct(OpenDDS::DCPS::APPENDABLE)) return false;
  XTypes::MemberId member_id;
  while (value_reader.members_remaining()) {
    if (!value_reader.begin_struct_member(member_id, helper)) return false;
    switch (member_id) {
    case 0: {
      if (!value_reader.read_int32(value.value.flight_assign_id)) return false;
      break;
    }
    case 1: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.value.assign_time = x.c_str();
      }
      break;
    }
    case 2: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.value.operator_id = x.c_str();
      }
      break;
    }
    case 3: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.value.assign_status = x.c_str();
      }
      break;
    }
    case 4: {
      if (!value_reader.begin_array(XTypes::TK_STRING8)) return false;
      for (unsigned int i = 0; i != 2; ++i) {
        if (!value_reader.begin_element()) return false;
        {
          String x;
          if (!value_reader.read_string(x)) return false;
          value.value.resources_id[i] = x.c_str();
        }
        if (!value_reader.end_element()) return false;
      }
      if (!value_reader.end_array()) return false;
      break;
    }
    }
    if (!value_reader.end_struct_member()) return false;
  }
  if (!value_reader.end_struct()) return false;
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const  ::UATM::flightAssign& value)
{
  ACE_UNUSED_ARG(value_writer);
  ACE_UNUSED_ARG(value);
  if (!value_writer.begin_struct(OpenDDS::DCPS::APPENDABLE)) {
    return false;
  }
  {
    MemberParam param(0, false, "flight_assign_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.flight_assign_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(1, false, "assign_time", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.assign_time)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(2, false, "operator_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.operator_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(3, false, "assign_status", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.assign_status)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(4, false, "resources_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.begin_array(XTypes::TK_STRING8)) {
        return false;
      }
      for (::CORBA::ULong i = 0; i != 2; ++i) {
        if (!value_writer.begin_element(static_cast<ACE_CDR::ULong>(i))) {
          return false;
        }
        if (!value_writer.write_string(value.resources_id[i])) {
          return false;
        }
        if (!value_writer.end_element()) {
          return false;
        }
      }
      if (!value_writer.end_array()) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  return value_writer.end_struct();
}

bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const NestedKeyOnly<const  ::UATM::flightAssign>& value)
{
  ACE_UNUSED_ARG(value_writer);
  ACE_UNUSED_ARG(value);
  if (!value_writer.begin_struct(OpenDDS::DCPS::APPENDABLE)) {
    return false;
  }
  {
    MemberParam param(0, false, "flight_assign_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.value.flight_assign_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(1, false, "assign_time", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.value.assign_time)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(2, false, "operator_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.value.operator_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(3, false, "assign_status", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.value.assign_status)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(4, false, "resources_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.begin_array(XTypes::TK_STRING8)) {
        return false;
      }
      for (::CORBA::ULong i = 0; i != 2; ++i) {
        if (!value_writer.begin_element(static_cast<ACE_CDR::ULong>(i))) {
          return false;
        }
        if (!value_writer.write_string(value.value.resources_id[i])) {
          return false;
        }
        if (!value_writer.end_element()) {
          return false;
        }
      }
      if (!value_writer.end_array()) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  return value_writer.end_struct();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> void set_default( ::UATM::flightAssign& stru)
{
  ACE_UNUSED_ARG(stru);
  stru.flight_assign_id = 0;
  stru.assign_time = "";
  stru.operator_id = "";
  stru.assign_status = "";
   ::UATM::ArrayString_forany stru_resources_id_temp(const_cast< ::UATM::ArrayString_slice*>(stru.resources_id));
  set_default(stru_resources_id_temp);
}

void serialized_size(const Encoding& encoding, size_t& size, const ::UATM::flightAssign& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
   ::UATM::ArrayString_forany stru_resources_9id_forany(const_cast< ::UATM::ArrayString_slice*>(stru.resources_id));
  primitive_serialized_size(encoding, size, stru.flight_assign_id);
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.assign_time.in()) + 1;
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.operator_id.in()) + 1;
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.assign_status.in()) + 1;
  serialized_size(encoding, size, stru_resources_9id_forany);
}

bool operator<<(Serializer& strm, const ::UATM::flightAssign& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
   ::UATM::ArrayString_forany stru_resources_9id_forany(const_cast< ::UATM::ArrayString_slice*>(stru.resources_id));
  return (strm << stru.flight_assign_id)
    && (strm << ACE_OutputCDR::from_string(stru.assign_time.in(), 20))
    && (strm << ACE_OutputCDR::from_string(stru.operator_id.in(), 20))
    && (strm << ACE_OutputCDR::from_string(stru.assign_status.in(), 20))
    && (strm << stru_resources_9id_forany);
}

bool operator>>(Serializer& strm,  ::UATM::flightAssign& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  bool reached_end_of_struct = false;
  ACE_UNUSED_ARG(reached_end_of_struct);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

   ::UATM::ArrayString_forany stru_resources_9id_forany(const_cast< ::UATM::ArrayString_slice*>(stru.resources_id));
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.flight_assign_id = 0;
  } else {
    if (!(strm >> stru.flight_assign_id)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.assign_time = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.assign_time.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.operator_id = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.operator_id.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.assign_status = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.assign_status.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
     ::UATM::ArrayString_forany stru_resources_id_temp(const_cast< ::UATM::ArrayString_slice*>(stru.resources_id));
    set_default(stru_resources_id_temp);
  } else {
    if (!(strm >> stru_resources_9id_forany)) {
      return false;
    }
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const ::UATM::flightAssign>& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
   ::UATM::ArrayString_forany stru_value_resources_9id_forany(const_cast< ::UATM::ArrayString_slice*>(stru.value.resources_id));
  primitive_serialized_size(encoding, size, stru.value.flight_assign_id);
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.value.assign_time.in()) + 1;
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.value.operator_id.in()) + 1;
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.value.assign_status.in()) + 1;
  serialized_size(encoding, size, stru_value_resources_9id_forany);
}

bool operator<<(Serializer& strm, const NestedKeyOnly<const ::UATM::flightAssign>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
   ::UATM::ArrayString_forany stru_value_resources_9id_forany(const_cast< ::UATM::ArrayString_slice*>(stru.value.resources_id));
  return (strm << stru.value.flight_assign_id)
    && (strm << ACE_OutputCDR::from_string(stru.value.assign_time.in(), 20))
    && (strm << ACE_OutputCDR::from_string(stru.value.operator_id.in(), 20))
    && (strm << ACE_OutputCDR::from_string(stru.value.assign_status.in(), 20))
    && (strm << stru_value_resources_9id_forany);
}

bool operator>>(Serializer& strm, const NestedKeyOnly< ::UATM::flightAssign>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  bool reached_end_of_struct = false;
  ACE_UNUSED_ARG(reached_end_of_struct);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

   ::UATM::ArrayString_forany stru_value_resources_9id_forany(const_cast< ::UATM::ArrayString_slice*>(stru.value.resources_id));
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.flight_assign_id = 0;
  } else {
    if (!(strm >> stru.value.flight_assign_id)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.assign_time = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.value.assign_time.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.operator_id = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.value.operator_id.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.assign_status = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.value.assign_status.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
     ::UATM::ArrayString_forany stru_value_resources_id_temp(const_cast< ::UATM::ArrayString_slice*>(stru.value.resources_id));
    set_default(stru_value_resources_id_temp);
  } else {
    if (!(strm >> stru_value_resources_9id_forany)) {
      return false;
    }
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

void serialized_size(const Encoding& encoding, size_t& size, const KeyOnly<const  ::UATM::flightAssign> stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  switch (encoding.xcdr_version()) {
  case Encoding::XCDR_VERSION_1:
    {
    primitive_serialized_size(encoding, size, stru.value.flight_assign_id);
    break;
    }
  case Encoding::XCDR_VERSION_2:
    {
    primitive_serialized_size(encoding, size, stru.value.flight_assign_id);
    break;
    }
  case Encoding::XCDR_VERSION_NONE:
    {
    primitive_serialized_size(encoding, size, stru.value.flight_assign_id);
    break;
    }
  }
}

bool operator<<(Serializer& strm, KeyOnly<const  ::UATM::flightAssign> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.value.flight_assign_id);
}

bool operator>>(Serializer& strm, KeyOnly< ::UATM::flightAssign> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.value.flight_assign_id);
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace DCPS {
bool DDSTraits< ::UATM::flightAssign>::is_key(const char* field)
{
  ACE_UNUSED_ARG(field);
  if (!ACE_OS::strcmp(field, "flight_assign_id")) {
    return true;
  }
  return false;
}
} // namespace DCPS
} // namespace OpenDDS
OPENDDS_END_VERSIONED_NAMESPACE_DECL

namespace UATM {
::DDS::DataWriter_ptr flightAssignTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<flightAssign> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}

::DDS::DataReader_ptr flightAssignTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<flightAssign> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}

#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr flightAssignTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<flightAssign> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<flightAssign, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */

#ifndef OPENDDS_SAFETY_PROFILE
flightAssign* flightAssignTypeSupportImpl::create_sample(::DDS::DynamicData_ptr src)
{
  flightAssign* value = new flightAssign;
  const ::DDS::ReturnCode_t rc = OpenDDS::DCPS::TypeSupportImpl_T<flightAssign>::create_sample_rc(*value, src);
  if (rc != ::DDS::RETCODE_OK && OpenDDS::DCPS::log_level >= OpenDDS::DCPS::LogLevel::Warning) {
    ACE_ERROR((LM_WARNING, "(%P|%t) WARNING: flightAssignTypeSupportImpl::create_sample: "
      "create_sample_rc failed: %C\n", OpenDDS::DCPS::retcode_to_string(rc)));
  }
  return value;
}
#endif

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& flightAssignTypeSupportImpl::getMetaStructForType() const
{
  return OpenDDS::DCPS::getMetaStruct<flightAssign>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */

namespace {
  OpenDDS::DCPS::TypeSupportInitializer<flightAssignTypeSupportImpl> ts_init_UATM_flightAssign;
}

const OpenDDS::XTypes::TypeIdentifier& flightAssignTypeSupportImpl::getMinimalTypeIdentifier() const
{
  return OpenDDS::DCPS::getMinimalTypeIdentifier<OpenDDS::DCPS::UATM_flightAssign_xtag>();
}

const OpenDDS::XTypes::TypeMap& flightAssignTypeSupportImpl::getMinimalTypeMap() const
{
  return OpenDDS::DCPS::getMinimalTypeMap<OpenDDS::DCPS::UATM_flightAssign_xtag>();
}

const OpenDDS::XTypes::TypeIdentifier& flightAssignTypeSupportImpl::getCompleteTypeIdentifier() const
{
  static OpenDDS::XTypes::TypeIdentifier ti;
  return ti;
}

const OpenDDS::XTypes::TypeMap& flightAssignTypeSupportImpl::getCompleteTypeMap() const
{
  static OpenDDS::XTypes::TypeMap tm;
  return tm;
}

::DDS::ReturnCode_t flightAssignTypeSupportImpl::encode_to_string(const flightAssign& in, CORBA::String_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
#if OPENDDS_HAS_JSON_VALUE_WRITER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    rapidjson::StringBuffer buffer;
    rapidjson::Writer<rapidjson::StringBuffer> writer(buffer);
    OpenDDS::DCPS::JsonValueWriter<rapidjson::Writer<rapidjson::StringBuffer> > jvw(writer);
    if (!vwrite(jvw, in)) {
      return ::DDS::RETCODE_ERROR;
    }
    out = buffer.GetString();
    return ::DDS::RETCODE_OK;
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  out = "";
  return ::DDS::RETCODE_UNSUPPORTED;
}

::DDS::ReturnCode_t flightAssignTypeSupportImpl::encode_to_bytes(const flightAssign& in, ::DDS::OctetSeq_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
#if OPENDDS_HAS_JSON_VALUE_WRITER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    CORBA::String_var buffer;
    const ::DDS::ReturnCode_t ret = encode_to_string(in, buffer, format);
    if (ret == ::DDS::RETCODE_OK) {
      const ::DDS::UInt32 len = static_cast< ::DDS::UInt32>(std::strlen(buffer));
      out = new ::DDS::OctetSeq(len);
      out->length(len);
      std::memcpy(out->get_buffer(), buffer, len);
      return ::DDS::RETCODE_OK;
    } else {
      out = new ::DDS::OctetSeq();
      return ret;
    }
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  out = new ::DDS::OctetSeq();
  return ::DDS::RETCODE_UNSUPPORTED;
}

::DDS::ReturnCode_t flightAssignTypeSupportImpl::decode_from_string(const char* in, flightAssign_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
  out = new flightAssign;
  OpenDDS::DCPS::set_default(*out);
#if OPENDDS_HAS_JSON_VALUE_READER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    rapidjson::StringStream buffer(in);
    OpenDDS::DCPS::JsonValueReader<> jvr(buffer);
    return vread(jvr, *out) ? ::DDS::RETCODE_OK : ::DDS::RETCODE_ERROR;
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  return ::DDS::RETCODE_UNSUPPORTED;
}

::DDS::ReturnCode_t flightAssignTypeSupportImpl::decode_from_bytes(const ::DDS::OctetSeq& in, flightAssign_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
#if OPENDDS_HAS_JSON_VALUE_READER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    return decode_from_string(reinterpret_cast<const char*>(in.get_buffer()), out, format);
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  out = new flightAssign();
  return ::DDS::RETCODE_UNSUPPORTED;
}

flightAssignTypeSupport::_ptr_type flightAssignTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl< ::UATM::flightAssign> : MetaStruct {
  typedef  ::UATM::flightAssign T;

#ifndef OPENDDS_NO_MULTI_TOPIC
  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 1; }

#endif /* OPENDDS_NO_MULTI_TOPIC */

  Value getValue(const void* stru, const char* field) const
  {
    const ::UATM::flightAssign& typed = *static_cast<const ::UATM::flightAssign*>(stru);
    ACE_UNUSED_ARG(typed);
    if (std::strcmp(field, "flight_assign_id") == 0) {
      return typed.flight_assign_id;
    }
    if (std::strcmp(field, "assign_time") == 0) {
      return typed.assign_time.in();
    }
    if (std::strcmp(field, "operator_id") == 0) {
      return typed.operator_id.in();
    }
    if (std::strcmp(field, "assign_status") == 0) {
      return typed.assign_status.in();
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::flightAssign)");
  }

  Value getValue(Serializer& strm, const char* field, TypeSupportImpl* = 0) const
  {
    const Encoding& encoding = strm.encoding();
    ACE_UNUSED_ARG(encoding);
    size_t total_size = 0;
    if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
      if (!strm.read_delimiter(total_size)) {
        throw std::runtime_error("Unable to reader delimiter in getValue");
      }
    }
    std::string base_field = field;
    const size_t index = base_field.find('.');
    std::string subfield;
    if (index != std::string::npos) {
      subfield = base_field.substr(index + 1);
      base_field = base_field.substr(0, index);
    }
    if (base_field == "flight_assign_id") {
      ACE_CDR::Long val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'flight_assign_id' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'flight_assign_id' could not be skipped");
      }
    }
    if (base_field == "assign_time") {
      TAO::String_Manager val;
      if (!(strm >> val.out())) {
        throw std::runtime_error("Field 'assign_time' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(strm >> len)) {
        throw std::runtime_error("String 'assign_time' length could not be deserialized");
      }
      if (!strm.skip(len)) {
        throw std::runtime_error("String 'assign_time' contents could not be skipped");
      }
    }
    if (base_field == "operator_id") {
      TAO::String_Manager val;
      if (!(strm >> val.out())) {
        throw std::runtime_error("Field 'operator_id' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(strm >> len)) {
        throw std::runtime_error("String 'operator_id' length could not be deserialized");
      }
      if (!strm.skip(len)) {
        throw std::runtime_error("String 'operator_id' contents could not be skipped");
      }
    }
    if (base_field == "assign_status") {
      TAO::String_Manager val;
      if (!(strm >> val.out())) {
        throw std::runtime_error("Field 'assign_status' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(strm >> len)) {
        throw std::runtime_error("String 'assign_status' length could not be deserialized");
      }
      if (!strm.skip(len)) {
        throw std::runtime_error("String 'assign_status' contents could not be skipped");
      }
    }
    if (!gen_skip_over(strm, static_cast< ::UATM::ArrayString_forany*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Did not find field in getValue");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "flight_assign_id") == 0) {
      return make_field_cmp(&T::flight_assign_id, next);
    }
    if (std::strcmp(field, "assign_time") == 0) {
      return make_field_cmp(&T::assign_time, next);
    }
    if (std::strcmp(field, "operator_id") == 0) {
      return make_field_cmp(&T::operator_id, next);
    }
    if (std::strcmp(field, "assign_status") == 0) {
      return make_field_cmp(&T::assign_status, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::flightAssign)");
  }

#ifndef OPENDDS_NO_MULTI_TOPIC
  const char** getFieldNames() const
  {
    static const char* names[] = {"flight_assign_id", "assign_time", "operator_id", "assign_status", "resources_id", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "flight_assign_id") == 0) {
      return &static_cast<const T*>(stru)->flight_assign_id;
    }
    if (std::strcmp(field, "assign_time") == 0) {
      return &static_cast<const T*>(stru)->assign_time;
    }
    if (std::strcmp(field, "operator_id") == 0) {
      return &static_cast<const T*>(stru)->operator_id;
    }
    if (std::strcmp(field, "assign_status") == 0) {
      return &static_cast<const T*>(stru)->assign_status;
    }
    if (std::strcmp(field, "resources_id") == 0) {
      return &static_cast<const T*>(stru)->resources_id;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::flightAssign)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "flight_assign_id") == 0) {
      static_cast<T*>(lhs)->flight_assign_id = *static_cast<const  ::CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "assign_time") == 0) {
      static_cast<T*>(lhs)->assign_time = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "operator_id") == 0) {
      static_cast<T*>(lhs)->operator_id = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "assign_status") == 0) {
      static_cast<T*>(lhs)->assign_status = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "resources_id") == 0) {
       ::UATM::ArrayString* lhsArr = &static_cast<T*>(lhs)->resources_id;
      const  ::UATM::ArrayString* rhsArr = static_cast<const  ::UATM::ArrayString*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      for (CORBA::ULong i0 = 0; i0 < 2; ++i0) {
        (*lhsArr)[i0] = (*rhsArr)[i0];
      }
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::flightAssign)");
  }

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "flight_assign_id") == 0) {
      return static_cast<const T*>(lhs)->flight_assign_id == static_cast<const T*>(rhs)->flight_assign_id;
    }
    if (std::strcmp(field, "assign_time") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->assign_time.in(), static_cast<const T*>(rhs)->assign_time.in());
    }
    if (std::strcmp(field, "operator_id") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->operator_id.in(), static_cast<const T*>(rhs)->operator_id.in());
    }
    if (std::strcmp(field, "assign_status") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->assign_status.in(), static_cast<const T*>(rhs)->assign_status.in());
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::flightAssign)");
  }
#endif /* OPENDDS_NO_MULTI_TOPIC */

};

template<>
const MetaStruct& getMetaStruct< ::UATM::flightAssign>()
{
  static MetaStructImpl< ::UATM::flightAssign> msi;
  return msi;
}

bool gen_skip_over(Serializer& ser,  ::UATM::flightAssign*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl< ::UATM::flightAssign>().getValue(ser, "");
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif // ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace XTypes {

#ifndef OPENDDS_SAFETY_PROFILE
#if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
template <>
class DynamicDataAdapterImpl< ::UATM::flightAssign,  ::UATM::flightAssign > : public DynamicDataAdapter_T< ::UATM::flightAssign> {
public:
  DynamicDataAdapterImpl(DDS::DynamicType_ptr type,  ::UATM::flightAssign& value)
    : DynamicDataAdapter_T< ::UATM::flightAssign>(type, value)
  {
  }

  DynamicDataAdapterImpl(DDS::DynamicType_ptr type, const  ::UATM::flightAssign& value)
    : DynamicDataAdapter_T< ::UATM::flightAssign>(type, value)
  {
  }

  DDS::ReturnCode_t clear_all_values()
  {
    const DDS::ReturnCode_t rc = assert_mutable("DynamicDataAdapter::clear_all_values");
    if (rc == DDS::RETCODE_OK) {
      OpenDDS::DCPS::set_default(value_);
    }
    return rc;
  }

  DDS::UInt32 get_item_count()
  {
    return 5;
  }

  bool serialized_size(const OpenDDS::DCPS::Encoding& enc, size_t& size, OpenDDS::DCPS::Sample::Extent ext) const
  {
    using namespace OpenDDS::DCPS;
    if (ext == Sample::Full) {
      DCPS::serialized_size(enc, size, value_);
    } else if (ext == Sample::NestedKeyOnly) {
      const NestedKeyOnly<const  ::UATM::flightAssign> nested_key_only(value_);
      DCPS::serialized_size(enc, size, nested_key_only);
    } else {
      return false; // Non-topic type
    }
    return true;
  }

  bool serialize(OpenDDS::DCPS::Serializer& ser, OpenDDS::DCPS::Sample::Extent ext) const
  {
    using namespace OpenDDS::DCPS;
    if (ext == Sample::Full) {
      return ser << value_;
    } else if (ext == Sample::NestedKeyOnly) {
      NestedKeyOnly<const  ::UATM::flightAssign> nested_key_only(value_);
      return ser << nested_key_only;
    } else {
      return false; // Non-topic type
    }
  }

protected:
  DDS::ReturnCode_t get_raw_value(const char* method, void* dest, DDS::TypeKind tk, DDS::MemberId id)
  {
    switch (id) {
    case 0:
      {
        return get_simple_raw_value(method, dest, tk, value_.flight_assign_id, id);
      }
    case 1:
      {
        return get_s8_raw_value(method, dest, tk, value_.assign_time, id);
      }
    case 2:
      {
        return get_s8_raw_value(method, dest, tk, value_.operator_id, id);
      }
    case 3:
      {
        return get_s8_raw_value(method, dest, tk, value_.assign_status, id);
      }
    case 4:
      {
        return get_complex_raw_value< ::UATM::ArrayString, UATM_ArrayString_dda_tag>(method, dest, tk, value_.resources_id, id);
      }
    default:
      return invalid_id(method, id);
    }
  }

  DDS::ReturnCode_t set_raw_value(const char* method, DDS::MemberId id, const void* source, DDS::TypeKind tk)
  {
    DDS::ReturnCode_t rc = assert_mutable(method);
    if (rc != DDS::RETCODE_OK) {
      return rc;
    }
    switch (id) {
    case 0:
      {
        return set_simple_raw_value(method, value_.flight_assign_id, id, source, tk);
      }
    case 1:
      {
        return set_s8_raw_value(method, value_.assign_time.inout(), id, source, tk);
      }
    case 2:
      {
        return set_s8_raw_value(method, value_.operator_id.inout(), id, source, tk);
      }
    case 3:
      {
        return set_s8_raw_value(method, value_.assign_status.inout(), id, source, tk);
      }
    case 4:
      {
        return set_indirect_complex_raw_value< ::UATM::ArrayString, UATM_ArrayString_dda_tag>(method, value_.resources_id, id, source, tk);
      }
    default:
      return invalid_id(method, id);
    }
  }
};

#endif // if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER

template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::flightAssign,  ::UATM::flightAssign>(DDS::DynamicType_ptr type, const  ::UATM::flightAssign& value)
{
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  if (type) {
    return new DynamicDataAdapterImpl< ::UATM::flightAssign,  ::UATM::flightAssign>(type, value);
  }
#  else
  ACE_UNUSED_ARG(type);
  ACE_UNUSED_ARG(value);
#  endif
  return 0;
}

template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::flightAssign,  ::UATM::flightAssign>(DDS::DynamicType_ptr type,  ::UATM::flightAssign& value)
{
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  if (type) {
    return new DynamicDataAdapterImpl< ::UATM::flightAssign,  ::UATM::flightAssign>(type, value);
  }
#  else
  ACE_UNUSED_ARG(type);
  ACE_UNUSED_ARG(value);
#  endif
  return 0;
}

template <>
const  ::UATM::flightAssign* get_dynamic_data_adapter_value< ::UATM::flightAssign,  ::UATM::flightAssign>(DDS::DynamicData_ptr dd)
{
  ACE_UNUSED_ARG(dd);
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  typedef DynamicDataAdapterImpl< ::UATM::flightAssign,  ::UATM::flightAssign> Dda;
  const Dda* const dda = dynamic_cast<Dda*>(dd);
  if (dda) {
    return &dda->wrapped();
  }
#  endif
  return 0;
}
#endif // ifndef OPENDDS_SAFETY_PROFILE

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End STRUCT: flightAssign */

/* End MODULE: UATM */
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

namespace {
XTypes::TypeObject OPENDDS_IDL_FILE_SPECIFIC(minimal_to, 0)()
{
  static const unsigned char to_bytes[] = { 116, 0, 0, 0, 241, 81, 10, 0, 1, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 6, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 34, 140, 99, 227, 0, 12, 0, 0, 0, 1, 0, 0, 0, 1, 0, 112, 20, 75, 130, 103, 123, 12, 0, 0, 0, 2, 0, 0, 0, 1, 0, 112, 20, 233, 80, 242, 175, 12, 0, 0, 0, 3, 0, 0, 0, 1, 0, 112, 20, 196, 217, 141, 189, 12, 0, 0, 0, 4, 0, 0, 0, 1, 0, 112, 20, 48, 93, 40, 137, 12, 0, 0, 0, 5, 0, 0, 0, 1, 0, 112, 20, 135, 62, 156, 11  };
  XTypes::TypeObject to;
  if (!to_type_object(to_bytes, sizeof(to_bytes), to)) {
    throw std::runtime_error("Could not deserialize minimal Type Object 0");
  }
  return to;
}

XTypes::TypeObject OPENDDS_IDL_FILE_SPECIFIC(minimal_to, 1)()
{
  static const unsigned char to_bytes[] = { 100, 0, 0, 0, 241, 81, 10, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 0, 0, 0, 5, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 226, 243, 239, 91, 0, 12, 0, 0, 0, 1, 0, 0, 0, 1, 0, 112, 20, 69, 98, 240, 208, 11, 0, 0, 0, 2, 0, 0, 0, 1, 0, 1, 154, 203, 68, 84, 0, 12, 0, 0, 0, 3, 0, 0, 0, 1, 0, 112, 20, 213, 24, 157, 224, 12, 0, 0, 0, 4, 0, 0, 0, 1, 0, 112, 20, 209, 235, 16, 141  };
  XTypes::TypeObject to;
  if (!to_type_object(to_bytes, sizeof(to_bytes), to)) {
    throw std::runtime_error("Could not deserialize minimal Type Object 1");
  }
  return to;
}

XTypes::TypeObject OPENDDS_IDL_FILE_SPECIFIC(minimal_to, 2)()
{
  static const unsigned char to_bytes[] = { 100, 0, 0, 0, 241, 81, 10, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 0, 0, 0, 5, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 125, 152, 92, 149, 0, 12, 0, 0, 0, 1, 0, 0, 0, 1, 0, 112, 20, 75, 130, 103, 123, 12, 0, 0, 0, 2, 0, 0, 0, 1, 0, 112, 20, 52, 191, 73, 238, 12, 0, 0, 0, 3, 0, 0, 0, 1, 0, 112, 20, 113, 128, 14, 157, 12, 0, 0, 0, 4, 0, 0, 0, 1, 0, 112, 20, 215, 230, 213, 91  };
  XTypes::TypeObject to;
  if (!to_type_object(to_bytes, sizeof(to_bytes), to)) {
    throw std::runtime_error("Could not deserialize minimal Type Object 2");
  }
  return to;
}

XTypes::TypeObject OPENDDS_IDL_FILE_SPECIFIC(minimal_to, 3)()
{
  static const unsigned char to_bytes[] = { 84, 0, 0, 0, 241, 81, 10, 0, 1, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 4, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 128, 197, 98, 174, 0, 11, 0, 0, 0, 1, 0, 0, 0, 1, 0, 4, 114, 20, 76, 242, 0, 11, 0, 0, 0, 2, 0, 0, 0, 1, 0, 4, 61, 233, 39, 13, 0, 12, 0, 0, 0, 3, 0, 0, 0, 1, 0, 112, 20, 180, 232, 190, 205  };
  XTypes::TypeObject to;
  if (!to_type_object(to_bytes, sizeof(to_bytes), to)) {
    throw std::runtime_error("Could not deserialize minimal Type Object 3");
  }
  return to;
}

XTypes::TypeObject OPENDDS_IDL_FILE_SPECIFIC(minimal_to, 4)()
{
  static const unsigned char to_bytes[] = { 115, 0, 0, 0, 241, 81, 10, 0, 1, 0, 0, 0, 0, 0, 0, 0, 99, 0, 0, 0, 5, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 216, 106, 181, 124, 0, 11, 0, 0, 0, 1, 0, 0, 0, 1, 0, 4, 114, 20, 76, 242, 0, 25, 0, 0, 0, 2, 0, 0, 0, 1, 0, 241, 126, 198, 253, 33, 84, 187, 219, 157, 152, 51, 230, 44, 169, 26, 10, 48, 186, 121, 0, 0, 0, 12, 0, 0, 0, 3, 0, 0, 0, 1, 0, 112, 20, 51, 174, 235, 158, 11, 0, 0, 0, 4, 0, 0, 0, 1, 0, 1, 154, 203, 68, 84  };
  XTypes::TypeObject to;
  if (!to_type_object(to_bytes, sizeof(to_bytes), to)) {
    throw std::runtime_error("Could not deserialize minimal Type Object 4");
  }
  return to;
}

XTypes::TypeObject OPENDDS_IDL_FILE_SPECIFIC(minimal_to, 5)()
{
  static const unsigned char to_bytes[] = { 113, 0, 0, 0, 241, 81, 10, 0, 1, 0, 0, 0, 0, 0, 0, 0, 97, 0, 0, 0, 5, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 3, 82, 22, 213, 0, 12, 0, 0, 0, 1, 0, 0, 0, 1, 0, 112, 20, 180, 232, 190, 205, 12, 0, 0, 0, 2, 0, 0, 0, 1, 0, 112, 20, 77, 20, 161, 107, 12, 0, 0, 0, 3, 0, 0, 0, 1, 0, 112, 20, 151, 205, 154, 44, 25, 0, 0, 0, 4, 0, 0, 0, 1, 0, 241, 126, 198, 253, 33, 84, 187, 219, 157, 152, 51, 230, 44, 169, 26, 176, 196, 75, 15  };
  XTypes::TypeObject to;
  if (!to_type_object(to_bytes, sizeof(to_bytes), to)) {
    throw std::runtime_error("Could not deserialize minimal Type Object 5");
  }
  return to;
}

XTypes::TypeObject OPENDDS_IDL_FILE_SPECIFIC(minimal_to, 6)()
{
  static const unsigned char to_bytes[] = { 116, 0, 0, 0, 241, 81, 10, 0, 1, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 5, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 159, 24, 56, 236, 0, 11, 0, 0, 0, 1, 0, 0, 0, 1, 0, 4, 114, 20, 76, 242, 0, 25, 0, 0, 0, 2, 0, 0, 0, 1, 0, 241, 126, 198, 253, 33, 84, 187, 219, 157, 152, 51, 230, 44, 169, 26, 102, 123, 79, 239, 0, 0, 0, 12, 0, 0, 0, 3, 0, 0, 0, 1, 0, 112, 20, 232, 136, 225, 229, 12, 0, 0, 0, 4, 0, 0, 0, 1, 0, 112, 20, 172, 32, 183, 134  };
  XTypes::TypeObject to;
  if (!to_type_object(to_bytes, sizeof(to_bytes), to)) {
    throw std::runtime_error("Could not deserialize minimal Type Object 6");
  }
  return to;
}

XTypes::TypeObject OPENDDS_IDL_FILE_SPECIFIC(minimal_to, 7)()
{
  static const unsigned char to_bytes[] = { 27, 0, 0, 0, 241, 48, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 144, 243, 1, 0, 0, 0, 1, 0, 0, 0, 2, 112, 10  };
  XTypes::TypeObject to;
  if (!to_type_object(to_bytes, sizeof(to_bytes), to)) {
    throw std::runtime_error("Could not deserialize minimal Type Object 7");
  }
  return to;
}

XTypes::TypeObject OPENDDS_IDL_FILE_SPECIFIC(minimal_to, 8)()
{
  static const unsigned char to_bytes[] = { 116, 0, 0, 0, 241, 81, 10, 0, 1, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 6, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 56, 29, 18, 71, 0, 12, 0, 0, 0, 1, 0, 0, 0, 1, 0, 112, 20, 213, 24, 157, 224, 11, 0, 0, 0, 2, 0, 0, 0, 1, 0, 9, 238, 244, 56, 247, 0, 11, 0, 0, 0, 3, 0, 0, 0, 1, 0, 9, 104, 28, 114, 154, 0, 12, 0, 0, 0, 4, 0, 0, 0, 1, 0, 112, 20, 113, 247, 96, 43, 12, 0, 0, 0, 5, 0, 0, 0, 1, 0, 112, 20, 175, 124, 98, 243  };
  XTypes::TypeObject to;
  if (!to_type_object(to_bytes, sizeof(to_bytes), to)) {
    throw std::runtime_error("Could not deserialize minimal Type Object 8");
  }
  return to;
}

XTypes::TypeObject OPENDDS_IDL_FILE_SPECIFIC(minimal_to, 9)()
{
  static const unsigned char to_bytes[] = { 131, 0, 0, 0, 241, 81, 10, 0, 1, 0, 0, 0, 0, 0, 0, 0, 115, 0, 0, 0, 7, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 146, 136, 159, 137, 0, 12, 0, 0, 0, 1, 0, 0, 0, 1, 0, 112, 20, 124, 73, 177, 83, 12, 0, 0, 0, 2, 0, 0, 0, 1, 0, 112, 20, 105, 144, 165, 67, 12, 0, 0, 0, 3, 0, 0, 0, 1, 0, 112, 20, 51, 174, 235, 158, 12, 0, 0, 0, 4, 0, 0, 0, 1, 0, 112, 20, 38, 44, 87, 111, 12, 0, 0, 0, 5, 0, 0, 0, 1, 0, 112, 20, 215, 230, 213, 91, 11, 0, 0, 0, 6, 0, 0, 0, 1, 0, 1, 66, 100, 198, 56  };
  XTypes::TypeObject to;
  if (!to_type_object(to_bytes, sizeof(to_bytes), to)) {
    throw std::runtime_error("Could not deserialize minimal Type Object 9");
  }
  return to;
}

XTypes::TypeObject OPENDDS_IDL_FILE_SPECIFIC(minimal_to, 10)()
{
  static const unsigned char to_bytes[] = { 132, 0, 0, 0, 241, 81, 10, 0, 1, 0, 0, 0, 0, 0, 0, 0, 116, 0, 0, 0, 6, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 198, 93, 92, 77, 0, 11, 0, 0, 0, 1, 0, 0, 0, 1, 0, 4, 114, 20, 76, 242, 0, 12, 0, 0, 0, 2, 0, 0, 0, 1, 0, 112, 20, 32, 180, 155, 20, 12, 0, 0, 0, 3, 0, 0, 0, 1, 0, 112, 20, 64, 190, 168, 214, 25, 0, 0, 0, 4, 0, 0, 0, 1, 0, 241, 126, 198, 253, 33, 84, 187, 219, 157, 152, 51, 230, 44, 169, 26, 177, 42, 92, 88, 0, 0, 0, 12, 0, 0, 0, 5, 0, 0, 0, 1, 0, 112, 20, 172, 32, 183, 134  };
  XTypes::TypeObject to;
  if (!to_type_object(to_bytes, sizeof(to_bytes), to)) {
    throw std::runtime_error("Could not deserialize minimal Type Object 10");
  }
  return to;
}

XTypes::TypeObject OPENDDS_IDL_FILE_SPECIFIC(minimal_to, 11)()
{
  static const unsigned char to_bytes[] = { 100, 0, 0, 0, 241, 81, 10, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 0, 0, 0, 5, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 221, 193, 123, 98, 0, 11, 0, 0, 0, 1, 0, 0, 0, 1, 0, 4, 22, 80, 118, 14, 0, 11, 0, 0, 0, 2, 0, 0, 0, 1, 0, 4, 114, 20, 76, 242, 0, 11, 0, 0, 0, 3, 0, 0, 0, 1, 0, 1, 127, 74, 123, 89, 0, 12, 0, 0, 0, 4, 0, 0, 0, 1, 0, 112, 20, 236, 227, 205, 96  };
  XTypes::TypeObject to;
  if (!to_type_object(to_bytes, sizeof(to_bytes), to)) {
    throw std::runtime_error("Could not deserialize minimal Type Object 11");
  }
  return to;
}

XTypes::TypeObject OPENDDS_IDL_FILE_SPECIFIC(minimal_to, 12)()
{
  static const unsigned char to_bytes[] = { 131, 0, 0, 0, 241, 81, 10, 0, 1, 0, 0, 0, 0, 0, 0, 0, 115, 0, 0, 0, 7, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 176, 6, 10, 247, 0, 12, 0, 0, 0, 1, 0, 0, 0, 1, 0, 112, 20, 203, 36, 55, 59, 11, 0, 0, 0, 2, 0, 0, 0, 1, 0, 4, 114, 20, 76, 242, 0, 12, 0, 0, 0, 3, 0, 0, 0, 1, 0, 112, 20, 240, 15, 9, 138, 12, 0, 0, 0, 4, 0, 0, 0, 1, 0, 112, 20, 69, 83, 154, 68, 11, 0, 0, 0, 5, 0, 0, 0, 1, 0, 4, 180, 52, 121, 153, 0, 11, 0, 0, 0, 6, 0, 0, 0, 1, 0, 1, 248, 29, 85, 195  };
  XTypes::TypeObject to;
  if (!to_type_object(to_bytes, sizeof(to_bytes), to)) {
    throw std::runtime_error("Could not deserialize minimal Type Object 12");
  }
  return to;
}

XTypes::TypeObject OPENDDS_IDL_FILE_SPECIFIC(minimal_to, 13)()
{
  static const unsigned char to_bytes[] = { 116, 0, 0, 0, 241, 81, 10, 0, 1, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 6, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 134, 178, 224, 224, 0, 11, 0, 0, 0, 1, 0, 0, 0, 1, 0, 4, 114, 20, 76, 242, 0, 11, 0, 0, 0, 2, 0, 0, 0, 1, 0, 4, 145, 232, 53, 28, 0, 12, 0, 0, 0, 3, 0, 0, 0, 1, 0, 112, 20, 135, 62, 156, 11, 12, 0, 0, 0, 4, 0, 0, 0, 1, 0, 112, 20, 237, 158, 128, 165, 12, 0, 0, 0, 5, 0, 0, 0, 1, 0, 112, 20, 53, 26, 91, 37  };
  XTypes::TypeObject to;
  if (!to_type_object(to_bytes, sizeof(to_bytes), to)) {
    throw std::runtime_error("Could not deserialize minimal Type Object 13");
  }
  return to;
}

XTypes::TypeObject OPENDDS_IDL_FILE_SPECIFIC(minimal_to, 14)()
{
  static const unsigned char to_bytes[] = { 116, 0, 0, 0, 241, 81, 10, 0, 1, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 6, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 246, 141, 44, 54, 0, 11, 0, 0, 0, 1, 0, 0, 0, 1, 0, 4, 114, 20, 76, 242, 0, 11, 0, 0, 0, 2, 0, 0, 0, 1, 0, 4, 156, 240, 169, 170, 0, 11, 0, 0, 0, 3, 0, 0, 0, 1, 0, 4, 195, 133, 196, 172, 0, 11, 0, 0, 0, 4, 0, 0, 0, 1, 0, 1, 248, 29, 85, 195, 0, 12, 0, 0, 0, 5, 0, 0, 0, 1, 0, 112, 20, 236, 227, 205, 96  };
  XTypes::TypeObject to;
  if (!to_type_object(to_bytes, sizeof(to_bytes), to)) {
    throw std::runtime_error("Could not deserialize minimal Type Object 14");
  }
  return to;
}

XTypes::TypeMap OPENDDS_IDL_FILE_SPECIFIC(get_minimal_type_map_private, 0)()
{
  XTypes::TypeMap tm;
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(1, 35, 160, 32, 170, 18, 149, 31, 139, 154, 187, 251, 106, 50))] = OPENDDS_IDL_FILE_SPECIFIC(minimal_to, 0)();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(19, 168, 58, 29, 6, 237, 50, 67, 22, 43, 153, 216, 181, 78))] = OPENDDS_IDL_FILE_SPECIFIC(minimal_to, 1)();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(21, 27, 167, 176, 5, 152, 95, 110, 75, 219, 157, 143, 116, 91))] = OPENDDS_IDL_FILE_SPECIFIC(minimal_to, 2)();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(31, 242, 6, 28, 208, 105, 241, 201, 108, 219, 22, 235, 214, 200))] = OPENDDS_IDL_FILE_SPECIFIC(minimal_to, 3)();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(42, 36, 207, 230, 130, 229, 86, 190, 71, 246, 192, 32, 9, 76))] = OPENDDS_IDL_FILE_SPECIFIC(minimal_to, 4)();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(52, 76, 14, 154, 222, 242, 115, 40, 37, 107, 14, 9, 27, 247))] = OPENDDS_IDL_FILE_SPECIFIC(minimal_to, 5)();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(59, 3, 164, 171, 221, 150, 161, 151, 229, 182, 14, 63, 71, 70))] = OPENDDS_IDL_FILE_SPECIFIC(minimal_to, 6)();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(126, 198, 253, 33, 84, 187, 219, 157, 152, 51, 230, 44, 169, 26))] = OPENDDS_IDL_FILE_SPECIFIC(minimal_to, 7)();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(153, 43, 12, 157, 181, 156, 1, 197, 33, 234, 126, 93, 167, 218))] = OPENDDS_IDL_FILE_SPECIFIC(minimal_to, 8)();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(160, 253, 203, 53, 192, 227, 74, 44, 97, 38, 179, 249, 152, 188))] = OPENDDS_IDL_FILE_SPECIFIC(minimal_to, 9)();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(170, 173, 17, 67, 101, 79, 115, 232, 218, 249, 177, 238, 223, 12))] = OPENDDS_IDL_FILE_SPECIFIC(minimal_to, 10)();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(174, 79, 122, 214, 90, 17, 230, 64, 143, 13, 46, 50, 18, 143))] = OPENDDS_IDL_FILE_SPECIFIC(minimal_to, 11)();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(203, 78, 209, 7, 193, 170, 16, 253, 20, 115, 164, 230, 57, 79))] = OPENDDS_IDL_FILE_SPECIFIC(minimal_to, 12)();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(224, 2, 25, 151, 93, 69, 55, 8, 242, 60, 174, 242, 37, 244))] = OPENDDS_IDL_FILE_SPECIFIC(minimal_to, 13)();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(238, 169, 226, 91, 131, 31, 23, 62, 109, 239, 221, 93, 103, 225))] = OPENDDS_IDL_FILE_SPECIFIC(minimal_to, 14)();
  return tm;
}

}

const XTypes::TypeMap& OPENDDS_IDL_FILE_SPECIFIC(get_minimal_type_map, 0)()
{
  static XTypes::TypeMap tm;
  ACE_GUARD_RETURN(ACE_Thread_Mutex, guard, TheServiceParticipant->get_static_xtypes_lock(), tm);
  if (tm.empty()) {
    tm = OPENDDS_IDL_FILE_SPECIFIC(get_minimal_type_map_private, 0)();
  }
  return tm;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

