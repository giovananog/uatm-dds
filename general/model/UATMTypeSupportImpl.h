/* -*- C++ -*- */
/* Generated by C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\bin\opendds_idl version 3.29.1 (ACE version 6.5.21) running on input file UATM.idl */
#ifndef OPENDDS_IDL_GENERATED_UATMTYPESUPPORTIMPL_H_V95XRT
#define OPENDDS_IDL_GENERATED_UATMTYPESUPPORTIMPL_H_V95XRT

#include <dds/Version.h>
#if !OPENDDS_VERSION_EXACTLY(3, 29, 1)
#  error "This file should be regenerated with opendds_idl"
#endif
#include <dds/DCPS/Definitions.h>

#include <dds/DdsDcpsC.h>

#include "UATMC.h"
#include "UATMTypeSupportC.h"
#include "dds/DCPS/Serializer.h"
#include "dds/DCPS/Service_Participant.h"
#include "dds/DCPS/TypeSupportImpl.h"
#include "dds/DCPS/TypeSupportImpl_T.h"
#include "dds/DCPS/Util.h"
#include "dds/DCPS/ValueDispatcher.h"
#include "dds/DCPS/ValueReader.h"
#include "dds/DCPS/ValueWriter.h"
#include "dds/DCPS/XTypes/DynamicDataAdapter.h"
#include "dds/DCPS/XTypes/TypeObject.h"


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: UATM */



/* Begin STRUCT-FWD: acceptableRoute */


/* End STRUCT-FWD: acceptableRoute */


/* Begin STRUCT-FWD: airspaceRestrictions */


/* End STRUCT-FWD: airspaceRestrictions */


/* Begin STRUCT-FWD: availabilityInfo */


/* End STRUCT-FWD: availabilityInfo */


/* Begin STRUCT-FWD: bookingFlightRequest */


/* End STRUCT-FWD: bookingFlightRequest */


/* Begin STRUCT-FWD: flightAuthorization */


/* End STRUCT-FWD: flightAuthorization */


/* Begin STRUCT-FWD: flightChanceRec */


/* End STRUCT-FWD: flightChanceRec */


/* Begin STRUCT-FWD: flightCoordination */


/* End STRUCT-FWD: flightCoordination */


/* Begin STRUCT-FWD: flightRequestInfo */


/* End STRUCT-FWD: flightRequestInfo */


/* Begin STRUCT-FWD: flightRoutesInfo */


/* End STRUCT-FWD: flightRoutesInfo */


/* Begin STRUCT-FWD: tolPadRequest */


/* End STRUCT-FWD: tolPadRequest */


/* Begin STRUCT-FWD: trafficFlowsInfo */


/* End STRUCT-FWD: trafficFlowsInfo */


/* Begin STRUCT-FWD: flightAuthorizationRequest */


/* End STRUCT-FWD: flightAuthorizationRequest */


/* Begin STRUCT-FWD: weatherInfo */


/* End STRUCT-FWD: weatherInfo */


/* Begin STRUCT-FWD: flightAssign */


/* End STRUCT-FWD: flightAssign */

/* End MODULE: UATM */


/* Begin MODULE: UATM */



/* Begin STRUCT: acceptableRoute */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

struct UATM_acceptableRoute_xtag {};
template<> UATM_Export
const XTypes::TypeIdentifier& getMinimalTypeIdentifier<UATM_acceptableRoute_xtag>();

template<> UATM_Export
const XTypes::TypeMap& getMinimalTypeMap<UATM_acceptableRoute_xtag>();

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

UATM_Export
bool vread(OpenDDS::DCPS::ValueReader& value_reader,  ::UATM::acceptableRoute& value);

UATM_Export
bool vread(OpenDDS::DCPS::ValueReader& value_reader, const NestedKeyOnly< ::UATM::acceptableRoute>& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

UATM_Export
bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const  ::UATM::acceptableRoute& value);

UATM_Export
bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const NestedKeyOnly<const  ::UATM::acceptableRoute>& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> UATM_Export
void set_default( ::UATM::acceptableRoute& stru);

UATM_Export
void serialized_size(const Encoding& encoding, size_t& size, const ::UATM::acceptableRoute& stru);

UATM_Export
bool operator<<(Serializer& strm, const ::UATM::acceptableRoute& stru);

UATM_Export
bool operator>>(Serializer& strm,  ::UATM::acceptableRoute& stru);

UATM_Export
void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const ::UATM::acceptableRoute>& stru);

UATM_Export
bool operator<<(Serializer& strm, const NestedKeyOnly<const ::UATM::acceptableRoute>& stru);

UATM_Export
bool operator>>(Serializer& strm, const NestedKeyOnly< ::UATM::acceptableRoute>& stru);

template <>
struct MarshalTraits< ::UATM::acceptableRoute> {
  static void representations_allowed_by_type(DDS::DataRepresentationIdSeq& seq)
  {
    seq.length(4);
    seq[0] = DDS::XCDR_DATA_REPRESENTATION;
    seq[1] = DDS::XCDR2_DATA_REPRESENTATION;
    seq[2] = DDS::XML_DATA_REPRESENTATION;
    seq[3] = OpenDDS::DCPS::UNALIGNED_CDR_DATA_REPRESENTATION;
  }

  static SerializedSizeBound serialized_size_bound(const Encoding& encoding)
  {
    switch (encoding.kind()) {
    case Encoding::KIND_XCDR1:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR2:
      return SerializedSizeBound();
    case Encoding::KIND_UNALIGNED_CDR:
      return SerializedSizeBound(130);
    default:
      OPENDDS_ASSERT(false);
      return SerializedSizeBound();
    }
  }

  static SerializedSizeBound key_only_serialized_size_bound(const Encoding& encoding)
  {
    switch (encoding.kind()) {
    case Encoding::KIND_XCDR1:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR2:
      return SerializedSizeBound();
    case Encoding::KIND_UNALIGNED_CDR:
      return SerializedSizeBound(4);
    default:
      OPENDDS_ASSERT(false);
      return SerializedSizeBound();
    }
  }

  static bool to_message_block(ACE_Message_Block&, const  ::UATM::acceptableRoute&) { return false; }
  static bool from_message_block( ::UATM::acceptableRoute&, const ACE_Message_Block&) { return false; }
  static Extensibility extensibility() { return APPENDABLE; }
  static Extensibility max_extensibility_level() { return APPENDABLE; }
};
UATM_Export
void serialized_size(const Encoding& encoding, size_t& size, const KeyOnly<const  ::UATM::acceptableRoute> stru);

UATM_Export
bool operator<<(Serializer& strm, KeyOnly<const  ::UATM::acceptableRoute> stru);

UATM_Export
bool operator>>(Serializer& strm, KeyOnly< ::UATM::acceptableRoute> stru);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace UATM {
/// This structure supports use of std::map with one or more keys.
struct UATM_Export acceptableRoute_OpenDDS_KeyLessThan {
  bool operator()(const  ::UATM::acceptableRoute& v1, const  ::UATM::acceptableRoute& v2) const
  {
    using ::operator<; // TAO::String_Manager's operator< is in global NS
    if (v1.ac_route_id < v2.ac_route_id) return true;
    if (v2.ac_route_id < v1.ac_route_id) return false;
    return false;
  }
};
}

namespace UATM {
class acceptableRouteTypeSupportImpl;
}
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace DCPS {
template <>
struct DDSTraits< ::UATM::acceptableRoute> {
  typedef  ::UATM::acceptableRoute MessageType;
  typedef  ::UATM::acceptableRouteSeq MessageSequenceType;
  typedef  ::UATM::acceptableRouteSeq::PrivateMemberAccess MessageSequenceAdapterType;
  typedef  ::UATM::acceptableRouteTypeSupport TypeSupportType;
  typedef  ::UATM::acceptableRouteTypeSupportImpl TypeSupportImplType;
  typedef  ::UATM::acceptableRouteDataWriter DataWriterType;
  typedef  ::UATM::acceptableRouteDataReader DataReaderType;
  typedef  ::UATM::acceptableRoute_OpenDDS_KeyLessThan LessThanType;
  typedef OpenDDS::DCPS::KeyOnly<const  ::UATM::acceptableRoute> KeyOnlyType;
  typedef OpenDDS::DCPS::UATM_acceptableRoute_xtag XtagType;

  static const char* type_name() { return "UATM::acceptableRoute"; }
  static size_t key_count() { return 1; }
  static bool is_key(const char*);
};
} // namespace DCPS
} // namespace OpenDDS
OPENDDS_END_VERSIONED_NAMESPACE_DECL

namespace UATM {
class UATM_Export acceptableRouteTypeSupportImpl
  : public virtual OpenDDS::DCPS::TypeSupportImpl_T<acceptableRoute>
  , public virtual OpenDDS::DCPS::ValueDispatcher_T<acceptableRoute>
{
public:
  typedef acceptableRouteTypeSupport TypeSupportType;
  typedef acceptableRouteTypeSupport::_var_type _var_type;
  typedef acceptableRouteTypeSupport::_ptr_type _ptr_type;

  acceptableRouteTypeSupportImpl() {}
  virtual ~acceptableRouteTypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_SAFETY_PROFILE
  acceptableRoute* create_sample(::DDS::DynamicData_ptr src);
#endif
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType() const;
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */

  virtual const OpenDDS::XTypes::TypeIdentifier& getMinimalTypeIdentifier() const;
  virtual const OpenDDS::XTypes::TypeMap& getMinimalTypeMap() const;

  virtual const OpenDDS::XTypes::TypeIdentifier& getCompleteTypeIdentifier() const;
  virtual const OpenDDS::XTypes::TypeMap& getCompleteTypeMap() const;

  ::DDS::ReturnCode_t encode_to_string(const acceptableRoute& in, CORBA::String_out out, OpenDDS::DCPS::RepresentationFormat* format);
  ::DDS::ReturnCode_t encode_to_bytes(const acceptableRoute& in, ::DDS::OctetSeq_out out, OpenDDS::DCPS::RepresentationFormat* format);
  ::DDS::ReturnCode_t decode_from_string(const char* in, acceptableRoute_out out, OpenDDS::DCPS::RepresentationFormat* format);
  ::DDS::ReturnCode_t decode_from_bytes(const ::DDS::OctetSeq& in, acceptableRoute_out out, OpenDDS::DCPS::RepresentationFormat* format);

  static acceptableRouteTypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};

}
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

class MetaStruct;

template<typename T>
const MetaStruct& getMetaStruct();

template<>
UATM_Export
const MetaStruct& getMetaStruct< ::UATM::acceptableRoute>();
UATM_Export
bool gen_skip_over(Serializer& ser,  ::UATM::acceptableRoute*);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif // ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace XTypes {

#ifndef OPENDDS_SAFETY_PROFILE
template <>
UATM_Export DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::acceptableRoute,  ::UATM::acceptableRoute>(DDS::DynamicType_ptr type, const  ::UATM::acceptableRoute& value);

template <>
UATM_Export DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::acceptableRoute,  ::UATM::acceptableRoute>(DDS::DynamicType_ptr type,  ::UATM::acceptableRoute& value);

template <>
UATM_Export const  ::UATM::acceptableRoute* get_dynamic_data_adapter_value< ::UATM::acceptableRoute,  ::UATM::acceptableRoute>(DDS::DynamicData_ptr dd);

#endif // ifndef OPENDDS_SAFETY_PROFILE

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End STRUCT: acceptableRoute */

/* End MODULE: UATM */


/* Begin MODULE: UATM */



/* Begin STRUCT: airspaceRestrictions */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

struct UATM_airspaceRestrictions_xtag {};
template<> UATM_Export
const XTypes::TypeIdentifier& getMinimalTypeIdentifier<UATM_airspaceRestrictions_xtag>();

template<> UATM_Export
const XTypes::TypeMap& getMinimalTypeMap<UATM_airspaceRestrictions_xtag>();

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

UATM_Export
bool vread(OpenDDS::DCPS::ValueReader& value_reader,  ::UATM::airspaceRestrictions& value);

UATM_Export
bool vread(OpenDDS::DCPS::ValueReader& value_reader, const NestedKeyOnly< ::UATM::airspaceRestrictions>& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

UATM_Export
bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const  ::UATM::airspaceRestrictions& value);

UATM_Export
bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const NestedKeyOnly<const  ::UATM::airspaceRestrictions>& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> UATM_Export
void set_default( ::UATM::airspaceRestrictions& stru);

UATM_Export
void serialized_size(const Encoding& encoding, size_t& size, const ::UATM::airspaceRestrictions& stru);

UATM_Export
bool operator<<(Serializer& strm, const ::UATM::airspaceRestrictions& stru);

UATM_Export
bool operator>>(Serializer& strm,  ::UATM::airspaceRestrictions& stru);

UATM_Export
void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const ::UATM::airspaceRestrictions>& stru);

UATM_Export
bool operator<<(Serializer& strm, const NestedKeyOnly<const ::UATM::airspaceRestrictions>& stru);

UATM_Export
bool operator>>(Serializer& strm, const NestedKeyOnly< ::UATM::airspaceRestrictions>& stru);

template <>
struct MarshalTraits< ::UATM::airspaceRestrictions> {
  static void representations_allowed_by_type(DDS::DataRepresentationIdSeq& seq)
  {
    seq.length(4);
    seq[0] = DDS::XCDR_DATA_REPRESENTATION;
    seq[1] = DDS::XCDR2_DATA_REPRESENTATION;
    seq[2] = DDS::XML_DATA_REPRESENTATION;
    seq[3] = OpenDDS::DCPS::UNALIGNED_CDR_DATA_REPRESENTATION;
  }

  static SerializedSizeBound serialized_size_bound(const Encoding& encoding)
  {
    switch (encoding.kind()) {
    case Encoding::KIND_XCDR1:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR2:
      return SerializedSizeBound();
    case Encoding::KIND_UNALIGNED_CDR:
      return SerializedSizeBound(129);
    default:
      OPENDDS_ASSERT(false);
      return SerializedSizeBound();
    }
  }

  static SerializedSizeBound key_only_serialized_size_bound(const Encoding& encoding)
  {
    switch (encoding.kind()) {
    case Encoding::KIND_XCDR1:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR2:
      return SerializedSizeBound();
    case Encoding::KIND_UNALIGNED_CDR:
      return SerializedSizeBound(4);
    default:
      OPENDDS_ASSERT(false);
      return SerializedSizeBound();
    }
  }

  static bool to_message_block(ACE_Message_Block&, const  ::UATM::airspaceRestrictions&) { return false; }
  static bool from_message_block( ::UATM::airspaceRestrictions&, const ACE_Message_Block&) { return false; }
  static Extensibility extensibility() { return APPENDABLE; }
  static Extensibility max_extensibility_level() { return APPENDABLE; }
};
UATM_Export
void serialized_size(const Encoding& encoding, size_t& size, const KeyOnly<const  ::UATM::airspaceRestrictions> stru);

UATM_Export
bool operator<<(Serializer& strm, KeyOnly<const  ::UATM::airspaceRestrictions> stru);

UATM_Export
bool operator>>(Serializer& strm, KeyOnly< ::UATM::airspaceRestrictions> stru);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace UATM {
/// This structure supports use of std::map with one or more keys.
struct UATM_Export airspaceRestrictions_OpenDDS_KeyLessThan {
  bool operator()(const  ::UATM::airspaceRestrictions& v1, const  ::UATM::airspaceRestrictions& v2) const
  {
    using ::operator<; // TAO::String_Manager's operator< is in global NS
    if (v1.restriction_id < v2.restriction_id) return true;
    if (v2.restriction_id < v1.restriction_id) return false;
    return false;
  }
};
}

namespace UATM {
class airspaceRestrictionsTypeSupportImpl;
}
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace DCPS {
template <>
struct DDSTraits< ::UATM::airspaceRestrictions> {
  typedef  ::UATM::airspaceRestrictions MessageType;
  typedef  ::UATM::airspaceRestrictionsSeq MessageSequenceType;
  typedef  ::UATM::airspaceRestrictionsSeq::PrivateMemberAccess MessageSequenceAdapterType;
  typedef  ::UATM::airspaceRestrictionsTypeSupport TypeSupportType;
  typedef  ::UATM::airspaceRestrictionsTypeSupportImpl TypeSupportImplType;
  typedef  ::UATM::airspaceRestrictionsDataWriter DataWriterType;
  typedef  ::UATM::airspaceRestrictionsDataReader DataReaderType;
  typedef  ::UATM::airspaceRestrictions_OpenDDS_KeyLessThan LessThanType;
  typedef OpenDDS::DCPS::KeyOnly<const  ::UATM::airspaceRestrictions> KeyOnlyType;
  typedef OpenDDS::DCPS::UATM_airspaceRestrictions_xtag XtagType;

  static const char* type_name() { return "UATM::airspaceRestrictions"; }
  static size_t key_count() { return 1; }
  static bool is_key(const char*);
};
} // namespace DCPS
} // namespace OpenDDS
OPENDDS_END_VERSIONED_NAMESPACE_DECL

namespace UATM {
class UATM_Export airspaceRestrictionsTypeSupportImpl
  : public virtual OpenDDS::DCPS::TypeSupportImpl_T<airspaceRestrictions>
  , public virtual OpenDDS::DCPS::ValueDispatcher_T<airspaceRestrictions>
{
public:
  typedef airspaceRestrictionsTypeSupport TypeSupportType;
  typedef airspaceRestrictionsTypeSupport::_var_type _var_type;
  typedef airspaceRestrictionsTypeSupport::_ptr_type _ptr_type;

  airspaceRestrictionsTypeSupportImpl() {}
  virtual ~airspaceRestrictionsTypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_SAFETY_PROFILE
  airspaceRestrictions* create_sample(::DDS::DynamicData_ptr src);
#endif
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType() const;
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */

  virtual const OpenDDS::XTypes::TypeIdentifier& getMinimalTypeIdentifier() const;
  virtual const OpenDDS::XTypes::TypeMap& getMinimalTypeMap() const;

  virtual const OpenDDS::XTypes::TypeIdentifier& getCompleteTypeIdentifier() const;
  virtual const OpenDDS::XTypes::TypeMap& getCompleteTypeMap() const;

  ::DDS::ReturnCode_t encode_to_string(const airspaceRestrictions& in, CORBA::String_out out, OpenDDS::DCPS::RepresentationFormat* format);
  ::DDS::ReturnCode_t encode_to_bytes(const airspaceRestrictions& in, ::DDS::OctetSeq_out out, OpenDDS::DCPS::RepresentationFormat* format);
  ::DDS::ReturnCode_t decode_from_string(const char* in, airspaceRestrictions_out out, OpenDDS::DCPS::RepresentationFormat* format);
  ::DDS::ReturnCode_t decode_from_bytes(const ::DDS::OctetSeq& in, airspaceRestrictions_out out, OpenDDS::DCPS::RepresentationFormat* format);

  static airspaceRestrictionsTypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};

}
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
UATM_Export
const MetaStruct& getMetaStruct< ::UATM::airspaceRestrictions>();
UATM_Export
bool gen_skip_over(Serializer& ser,  ::UATM::airspaceRestrictions*);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif // ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace XTypes {

#ifndef OPENDDS_SAFETY_PROFILE
template <>
UATM_Export DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::airspaceRestrictions,  ::UATM::airspaceRestrictions>(DDS::DynamicType_ptr type, const  ::UATM::airspaceRestrictions& value);

template <>
UATM_Export DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::airspaceRestrictions,  ::UATM::airspaceRestrictions>(DDS::DynamicType_ptr type,  ::UATM::airspaceRestrictions& value);

template <>
UATM_Export const  ::UATM::airspaceRestrictions* get_dynamic_data_adapter_value< ::UATM::airspaceRestrictions,  ::UATM::airspaceRestrictions>(DDS::DynamicData_ptr dd);

#endif // ifndef OPENDDS_SAFETY_PROFILE

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End STRUCT: airspaceRestrictions */

/* End MODULE: UATM */


/* Begin MODULE: UATM */



/* Begin STRUCT: availabilityInfo */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

struct UATM_availabilityInfo_xtag {};
template<> UATM_Export
const XTypes::TypeIdentifier& getMinimalTypeIdentifier<UATM_availabilityInfo_xtag>();

template<> UATM_Export
const XTypes::TypeMap& getMinimalTypeMap<UATM_availabilityInfo_xtag>();

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

UATM_Export
bool vread(OpenDDS::DCPS::ValueReader& value_reader,  ::UATM::availabilityInfo& value);

UATM_Export
bool vread(OpenDDS::DCPS::ValueReader& value_reader, const NestedKeyOnly< ::UATM::availabilityInfo>& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

UATM_Export
bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const  ::UATM::availabilityInfo& value);

UATM_Export
bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const NestedKeyOnly<const  ::UATM::availabilityInfo>& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> UATM_Export
void set_default( ::UATM::availabilityInfo& stru);

UATM_Export
void serialized_size(const Encoding& encoding, size_t& size, const ::UATM::availabilityInfo& stru);

UATM_Export
bool operator<<(Serializer& strm, const ::UATM::availabilityInfo& stru);

UATM_Export
bool operator>>(Serializer& strm,  ::UATM::availabilityInfo& stru);

UATM_Export
void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const ::UATM::availabilityInfo>& stru);

UATM_Export
bool operator<<(Serializer& strm, const NestedKeyOnly<const ::UATM::availabilityInfo>& stru);

UATM_Export
bool operator>>(Serializer& strm, const NestedKeyOnly< ::UATM::availabilityInfo>& stru);

template <>
struct MarshalTraits< ::UATM::availabilityInfo> {
  static void representations_allowed_by_type(DDS::DataRepresentationIdSeq& seq)
  {
    seq.length(4);
    seq[0] = DDS::XCDR_DATA_REPRESENTATION;
    seq[1] = DDS::XCDR2_DATA_REPRESENTATION;
    seq[2] = DDS::XML_DATA_REPRESENTATION;
    seq[3] = OpenDDS::DCPS::UNALIGNED_CDR_DATA_REPRESENTATION;
  }

  static SerializedSizeBound serialized_size_bound(const Encoding& encoding)
  {
    switch (encoding.kind()) {
    case Encoding::KIND_XCDR1:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR2:
      return SerializedSizeBound();
    case Encoding::KIND_UNALIGNED_CDR:
      return SerializedSizeBound(80);
    default:
      OPENDDS_ASSERT(false);
      return SerializedSizeBound();
    }
  }

  static SerializedSizeBound key_only_serialized_size_bound(const Encoding& encoding)
  {
    switch (encoding.kind()) {
    case Encoding::KIND_XCDR1:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR2:
      return SerializedSizeBound();
    case Encoding::KIND_UNALIGNED_CDR:
      return SerializedSizeBound(4);
    default:
      OPENDDS_ASSERT(false);
      return SerializedSizeBound();
    }
  }

  static bool to_message_block(ACE_Message_Block&, const  ::UATM::availabilityInfo&) { return false; }
  static bool from_message_block( ::UATM::availabilityInfo&, const ACE_Message_Block&) { return false; }
  static Extensibility extensibility() { return APPENDABLE; }
  static Extensibility max_extensibility_level() { return APPENDABLE; }
};
UATM_Export
void serialized_size(const Encoding& encoding, size_t& size, const KeyOnly<const  ::UATM::availabilityInfo> stru);

UATM_Export
bool operator<<(Serializer& strm, KeyOnly<const  ::UATM::availabilityInfo> stru);

UATM_Export
bool operator>>(Serializer& strm, KeyOnly< ::UATM::availabilityInfo> stru);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace UATM {
/// This structure supports use of std::map with one or more keys.
struct UATM_Export availabilityInfo_OpenDDS_KeyLessThan {
  bool operator()(const  ::UATM::availabilityInfo& v1, const  ::UATM::availabilityInfo& v2) const
  {
    using ::operator<; // TAO::String_Manager's operator< is in global NS
    if (v1.resource_id < v2.resource_id) return true;
    if (v2.resource_id < v1.resource_id) return false;
    return false;
  }
};
}

namespace UATM {
class availabilityInfoTypeSupportImpl;
}
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace DCPS {
template <>
struct DDSTraits< ::UATM::availabilityInfo> {
  typedef  ::UATM::availabilityInfo MessageType;
  typedef  ::UATM::availabilityInfoSeq MessageSequenceType;
  typedef  ::UATM::availabilityInfoSeq::PrivateMemberAccess MessageSequenceAdapterType;
  typedef  ::UATM::availabilityInfoTypeSupport TypeSupportType;
  typedef  ::UATM::availabilityInfoTypeSupportImpl TypeSupportImplType;
  typedef  ::UATM::availabilityInfoDataWriter DataWriterType;
  typedef  ::UATM::availabilityInfoDataReader DataReaderType;
  typedef  ::UATM::availabilityInfo_OpenDDS_KeyLessThan LessThanType;
  typedef OpenDDS::DCPS::KeyOnly<const  ::UATM::availabilityInfo> KeyOnlyType;
  typedef OpenDDS::DCPS::UATM_availabilityInfo_xtag XtagType;

  static const char* type_name() { return "UATM::availabilityInfo"; }
  static size_t key_count() { return 1; }
  static bool is_key(const char*);
};
} // namespace DCPS
} // namespace OpenDDS
OPENDDS_END_VERSIONED_NAMESPACE_DECL

namespace UATM {
class UATM_Export availabilityInfoTypeSupportImpl
  : public virtual OpenDDS::DCPS::TypeSupportImpl_T<availabilityInfo>
  , public virtual OpenDDS::DCPS::ValueDispatcher_T<availabilityInfo>
{
public:
  typedef availabilityInfoTypeSupport TypeSupportType;
  typedef availabilityInfoTypeSupport::_var_type _var_type;
  typedef availabilityInfoTypeSupport::_ptr_type _ptr_type;

  availabilityInfoTypeSupportImpl() {}
  virtual ~availabilityInfoTypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_SAFETY_PROFILE
  availabilityInfo* create_sample(::DDS::DynamicData_ptr src);
#endif
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType() const;
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */

  virtual const OpenDDS::XTypes::TypeIdentifier& getMinimalTypeIdentifier() const;
  virtual const OpenDDS::XTypes::TypeMap& getMinimalTypeMap() const;

  virtual const OpenDDS::XTypes::TypeIdentifier& getCompleteTypeIdentifier() const;
  virtual const OpenDDS::XTypes::TypeMap& getCompleteTypeMap() const;

  ::DDS::ReturnCode_t encode_to_string(const availabilityInfo& in, CORBA::String_out out, OpenDDS::DCPS::RepresentationFormat* format);
  ::DDS::ReturnCode_t encode_to_bytes(const availabilityInfo& in, ::DDS::OctetSeq_out out, OpenDDS::DCPS::RepresentationFormat* format);
  ::DDS::ReturnCode_t decode_from_string(const char* in, availabilityInfo_out out, OpenDDS::DCPS::RepresentationFormat* format);
  ::DDS::ReturnCode_t decode_from_bytes(const ::DDS::OctetSeq& in, availabilityInfo_out out, OpenDDS::DCPS::RepresentationFormat* format);

  static availabilityInfoTypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};

}
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
UATM_Export
const MetaStruct& getMetaStruct< ::UATM::availabilityInfo>();
UATM_Export
bool gen_skip_over(Serializer& ser,  ::UATM::availabilityInfo*);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif // ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace XTypes {

#ifndef OPENDDS_SAFETY_PROFILE
template <>
UATM_Export DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::availabilityInfo,  ::UATM::availabilityInfo>(DDS::DynamicType_ptr type, const  ::UATM::availabilityInfo& value);

template <>
UATM_Export DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::availabilityInfo,  ::UATM::availabilityInfo>(DDS::DynamicType_ptr type,  ::UATM::availabilityInfo& value);

template <>
UATM_Export const  ::UATM::availabilityInfo* get_dynamic_data_adapter_value< ::UATM::availabilityInfo,  ::UATM::availabilityInfo>(DDS::DynamicData_ptr dd);

#endif // ifndef OPENDDS_SAFETY_PROFILE

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End STRUCT: availabilityInfo */

/* End MODULE: UATM */


/* Begin MODULE: UATM */



/* Begin STRUCT: bookingFlightRequest */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

struct UATM_bookingFlightRequest_xtag {};
template<> UATM_Export
const XTypes::TypeIdentifier& getMinimalTypeIdentifier<UATM_bookingFlightRequest_xtag>();

template<> UATM_Export
const XTypes::TypeMap& getMinimalTypeMap<UATM_bookingFlightRequest_xtag>();

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

UATM_Export
bool vread(OpenDDS::DCPS::ValueReader& value_reader,  ::UATM::bookingFlightRequest& value);

UATM_Export
bool vread(OpenDDS::DCPS::ValueReader& value_reader, const NestedKeyOnly< ::UATM::bookingFlightRequest>& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

UATM_Export
bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const  ::UATM::bookingFlightRequest& value);

UATM_Export
bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const NestedKeyOnly<const  ::UATM::bookingFlightRequest>& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> UATM_Export
void set_default( ::UATM::bookingFlightRequest& stru);

UATM_Export
void serialized_size(const Encoding& encoding, size_t& size, const ::UATM::bookingFlightRequest& stru);

UATM_Export
bool operator<<(Serializer& strm, const ::UATM::bookingFlightRequest& stru);

UATM_Export
bool operator>>(Serializer& strm,  ::UATM::bookingFlightRequest& stru);

UATM_Export
void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const ::UATM::bookingFlightRequest>& stru);

UATM_Export
bool operator<<(Serializer& strm, const NestedKeyOnly<const ::UATM::bookingFlightRequest>& stru);

UATM_Export
bool operator>>(Serializer& strm, const NestedKeyOnly< ::UATM::bookingFlightRequest>& stru);

template <>
struct MarshalTraits< ::UATM::bookingFlightRequest> {
  static void representations_allowed_by_type(DDS::DataRepresentationIdSeq& seq)
  {
    seq.length(4);
    seq[0] = DDS::XCDR_DATA_REPRESENTATION;
    seq[1] = DDS::XCDR2_DATA_REPRESENTATION;
    seq[2] = DDS::XML_DATA_REPRESENTATION;
    seq[3] = OpenDDS::DCPS::UNALIGNED_CDR_DATA_REPRESENTATION;
  }

  static SerializedSizeBound serialized_size_bound(const Encoding& encoding)
  {
    switch (encoding.kind()) {
    case Encoding::KIND_XCDR1:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR2:
      return SerializedSizeBound();
    case Encoding::KIND_UNALIGNED_CDR:
      return SerializedSizeBound(88);
    default:
      OPENDDS_ASSERT(false);
      return SerializedSizeBound();
    }
  }

  static SerializedSizeBound key_only_serialized_size_bound(const Encoding& encoding)
  {
    switch (encoding.kind()) {
    case Encoding::KIND_XCDR1:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR2:
      return SerializedSizeBound();
    case Encoding::KIND_UNALIGNED_CDR:
      return SerializedSizeBound(4);
    default:
      OPENDDS_ASSERT(false);
      return SerializedSizeBound();
    }
  }

  static bool to_message_block(ACE_Message_Block&, const  ::UATM::bookingFlightRequest&) { return false; }
  static bool from_message_block( ::UATM::bookingFlightRequest&, const ACE_Message_Block&) { return false; }
  static Extensibility extensibility() { return APPENDABLE; }
  static Extensibility max_extensibility_level() { return APPENDABLE; }
};
UATM_Export
void serialized_size(const Encoding& encoding, size_t& size, const KeyOnly<const  ::UATM::bookingFlightRequest> stru);

UATM_Export
bool operator<<(Serializer& strm, KeyOnly<const  ::UATM::bookingFlightRequest> stru);

UATM_Export
bool operator>>(Serializer& strm, KeyOnly< ::UATM::bookingFlightRequest> stru);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace UATM {
/// This structure supports use of std::map with one or more keys.
struct UATM_Export bookingFlightRequest_OpenDDS_KeyLessThan {
  bool operator()(const  ::UATM::bookingFlightRequest& v1, const  ::UATM::bookingFlightRequest& v2) const
  {
    using ::operator<; // TAO::String_Manager's operator< is in global NS
    if (v1.booking_id < v2.booking_id) return true;
    if (v2.booking_id < v1.booking_id) return false;
    return false;
  }
};
}

namespace UATM {
class bookingFlightRequestTypeSupportImpl;
}
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace DCPS {
template <>
struct DDSTraits< ::UATM::bookingFlightRequest> {
  typedef  ::UATM::bookingFlightRequest MessageType;
  typedef  ::UATM::bookingFlightRequestSeq MessageSequenceType;
  typedef  ::UATM::bookingFlightRequestSeq::PrivateMemberAccess MessageSequenceAdapterType;
  typedef  ::UATM::bookingFlightRequestTypeSupport TypeSupportType;
  typedef  ::UATM::bookingFlightRequestTypeSupportImpl TypeSupportImplType;
  typedef  ::UATM::bookingFlightRequestDataWriter DataWriterType;
  typedef  ::UATM::bookingFlightRequestDataReader DataReaderType;
  typedef  ::UATM::bookingFlightRequest_OpenDDS_KeyLessThan LessThanType;
  typedef OpenDDS::DCPS::KeyOnly<const  ::UATM::bookingFlightRequest> KeyOnlyType;
  typedef OpenDDS::DCPS::UATM_bookingFlightRequest_xtag XtagType;

  static const char* type_name() { return "UATM::bookingFlightRequest"; }
  static size_t key_count() { return 1; }
  static bool is_key(const char*);
};
} // namespace DCPS
} // namespace OpenDDS
OPENDDS_END_VERSIONED_NAMESPACE_DECL

namespace UATM {
class UATM_Export bookingFlightRequestTypeSupportImpl
  : public virtual OpenDDS::DCPS::TypeSupportImpl_T<bookingFlightRequest>
  , public virtual OpenDDS::DCPS::ValueDispatcher_T<bookingFlightRequest>
{
public:
  typedef bookingFlightRequestTypeSupport TypeSupportType;
  typedef bookingFlightRequestTypeSupport::_var_type _var_type;
  typedef bookingFlightRequestTypeSupport::_ptr_type _ptr_type;

  bookingFlightRequestTypeSupportImpl() {}
  virtual ~bookingFlightRequestTypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_SAFETY_PROFILE
  bookingFlightRequest* create_sample(::DDS::DynamicData_ptr src);
#endif
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType() const;
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */

  virtual const OpenDDS::XTypes::TypeIdentifier& getMinimalTypeIdentifier() const;
  virtual const OpenDDS::XTypes::TypeMap& getMinimalTypeMap() const;

  virtual const OpenDDS::XTypes::TypeIdentifier& getCompleteTypeIdentifier() const;
  virtual const OpenDDS::XTypes::TypeMap& getCompleteTypeMap() const;

  ::DDS::ReturnCode_t encode_to_string(const bookingFlightRequest& in, CORBA::String_out out, OpenDDS::DCPS::RepresentationFormat* format);
  ::DDS::ReturnCode_t encode_to_bytes(const bookingFlightRequest& in, ::DDS::OctetSeq_out out, OpenDDS::DCPS::RepresentationFormat* format);
  ::DDS::ReturnCode_t decode_from_string(const char* in, bookingFlightRequest_out out, OpenDDS::DCPS::RepresentationFormat* format);
  ::DDS::ReturnCode_t decode_from_bytes(const ::DDS::OctetSeq& in, bookingFlightRequest_out out, OpenDDS::DCPS::RepresentationFormat* format);

  static bookingFlightRequestTypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};

}
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
UATM_Export
const MetaStruct& getMetaStruct< ::UATM::bookingFlightRequest>();
UATM_Export
bool gen_skip_over(Serializer& ser,  ::UATM::bookingFlightRequest*);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif // ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace XTypes {

#ifndef OPENDDS_SAFETY_PROFILE
template <>
UATM_Export DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::bookingFlightRequest,  ::UATM::bookingFlightRequest>(DDS::DynamicType_ptr type, const  ::UATM::bookingFlightRequest& value);

template <>
UATM_Export DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::bookingFlightRequest,  ::UATM::bookingFlightRequest>(DDS::DynamicType_ptr type,  ::UATM::bookingFlightRequest& value);

template <>
UATM_Export const  ::UATM::bookingFlightRequest* get_dynamic_data_adapter_value< ::UATM::bookingFlightRequest,  ::UATM::bookingFlightRequest>(DDS::DynamicData_ptr dd);

#endif // ifndef OPENDDS_SAFETY_PROFILE

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End STRUCT: bookingFlightRequest */

/* End MODULE: UATM */


/* Begin MODULE: UATM */



/* Begin STRUCT: flightAuthorization */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

struct UATM_flightAuthorization_xtag {};
template<> UATM_Export
const XTypes::TypeIdentifier& getMinimalTypeIdentifier<UATM_flightAuthorization_xtag>();

template<> UATM_Export
const XTypes::TypeMap& getMinimalTypeMap<UATM_flightAuthorization_xtag>();

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

UATM_Export
bool vread(OpenDDS::DCPS::ValueReader& value_reader,  ::UATM::flightAuthorization& value);

UATM_Export
bool vread(OpenDDS::DCPS::ValueReader& value_reader, const NestedKeyOnly< ::UATM::flightAuthorization>& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

UATM_Export
bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const  ::UATM::flightAuthorization& value);

UATM_Export
bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const NestedKeyOnly<const  ::UATM::flightAuthorization>& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> UATM_Export
void set_default( ::UATM::flightAuthorization& stru);

UATM_Export
void serialized_size(const Encoding& encoding, size_t& size, const ::UATM::flightAuthorization& stru);

UATM_Export
bool operator<<(Serializer& strm, const ::UATM::flightAuthorization& stru);

UATM_Export
bool operator>>(Serializer& strm,  ::UATM::flightAuthorization& stru);

UATM_Export
void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const ::UATM::flightAuthorization>& stru);

UATM_Export
bool operator<<(Serializer& strm, const NestedKeyOnly<const ::UATM::flightAuthorization>& stru);

UATM_Export
bool operator>>(Serializer& strm, const NestedKeyOnly< ::UATM::flightAuthorization>& stru);

template <>
struct MarshalTraits< ::UATM::flightAuthorization> {
  static void representations_allowed_by_type(DDS::DataRepresentationIdSeq& seq)
  {
    seq.length(4);
    seq[0] = DDS::XCDR_DATA_REPRESENTATION;
    seq[1] = DDS::XCDR2_DATA_REPRESENTATION;
    seq[2] = DDS::XML_DATA_REPRESENTATION;
    seq[3] = OpenDDS::DCPS::UNALIGNED_CDR_DATA_REPRESENTATION;
  }

  static SerializedSizeBound serialized_size_bound(const Encoding& encoding)
  {
    switch (encoding.kind()) {
    case Encoding::KIND_XCDR1:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR2:
      return SerializedSizeBound();
    case Encoding::KIND_UNALIGNED_CDR:
      return SerializedSizeBound(87);
    default:
      OPENDDS_ASSERT(false);
      return SerializedSizeBound();
    }
  }

  static SerializedSizeBound key_only_serialized_size_bound(const Encoding& encoding)
  {
    switch (encoding.kind()) {
    case Encoding::KIND_XCDR1:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR2:
      return SerializedSizeBound();
    case Encoding::KIND_UNALIGNED_CDR:
      return SerializedSizeBound(4);
    default:
      OPENDDS_ASSERT(false);
      return SerializedSizeBound();
    }
  }

  static bool to_message_block(ACE_Message_Block&, const  ::UATM::flightAuthorization&) { return false; }
  static bool from_message_block( ::UATM::flightAuthorization&, const ACE_Message_Block&) { return false; }
  static Extensibility extensibility() { return APPENDABLE; }
  static Extensibility max_extensibility_level() { return APPENDABLE; }
};
UATM_Export
void serialized_size(const Encoding& encoding, size_t& size, const KeyOnly<const  ::UATM::flightAuthorization> stru);

UATM_Export
bool operator<<(Serializer& strm, KeyOnly<const  ::UATM::flightAuthorization> stru);

UATM_Export
bool operator>>(Serializer& strm, KeyOnly< ::UATM::flightAuthorization> stru);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace UATM {
/// This structure supports use of std::map with one or more keys.
struct UATM_Export flightAuthorization_OpenDDS_KeyLessThan {
  bool operator()(const  ::UATM::flightAuthorization& v1, const  ::UATM::flightAuthorization& v2) const
  {
    using ::operator<; // TAO::String_Manager's operator< is in global NS
    if (v1.authorization_id < v2.authorization_id) return true;
    if (v2.authorization_id < v1.authorization_id) return false;
    return false;
  }
};
}

namespace UATM {
class flightAuthorizationTypeSupportImpl;
}
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace DCPS {
template <>
struct DDSTraits< ::UATM::flightAuthorization> {
  typedef  ::UATM::flightAuthorization MessageType;
  typedef  ::UATM::flightAuthorizationSeq MessageSequenceType;
  typedef  ::UATM::flightAuthorizationSeq::PrivateMemberAccess MessageSequenceAdapterType;
  typedef  ::UATM::flightAuthorizationTypeSupport TypeSupportType;
  typedef  ::UATM::flightAuthorizationTypeSupportImpl TypeSupportImplType;
  typedef  ::UATM::flightAuthorizationDataWriter DataWriterType;
  typedef  ::UATM::flightAuthorizationDataReader DataReaderType;
  typedef  ::UATM::flightAuthorization_OpenDDS_KeyLessThan LessThanType;
  typedef OpenDDS::DCPS::KeyOnly<const  ::UATM::flightAuthorization> KeyOnlyType;
  typedef OpenDDS::DCPS::UATM_flightAuthorization_xtag XtagType;

  static const char* type_name() { return "UATM::flightAuthorization"; }
  static size_t key_count() { return 1; }
  static bool is_key(const char*);
};
} // namespace DCPS
} // namespace OpenDDS
OPENDDS_END_VERSIONED_NAMESPACE_DECL

namespace UATM {
class UATM_Export flightAuthorizationTypeSupportImpl
  : public virtual OpenDDS::DCPS::TypeSupportImpl_T<flightAuthorization>
  , public virtual OpenDDS::DCPS::ValueDispatcher_T<flightAuthorization>
{
public:
  typedef flightAuthorizationTypeSupport TypeSupportType;
  typedef flightAuthorizationTypeSupport::_var_type _var_type;
  typedef flightAuthorizationTypeSupport::_ptr_type _ptr_type;

  flightAuthorizationTypeSupportImpl() {}
  virtual ~flightAuthorizationTypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_SAFETY_PROFILE
  flightAuthorization* create_sample(::DDS::DynamicData_ptr src);
#endif
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType() const;
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */

  virtual const OpenDDS::XTypes::TypeIdentifier& getMinimalTypeIdentifier() const;
  virtual const OpenDDS::XTypes::TypeMap& getMinimalTypeMap() const;

  virtual const OpenDDS::XTypes::TypeIdentifier& getCompleteTypeIdentifier() const;
  virtual const OpenDDS::XTypes::TypeMap& getCompleteTypeMap() const;

  ::DDS::ReturnCode_t encode_to_string(const flightAuthorization& in, CORBA::String_out out, OpenDDS::DCPS::RepresentationFormat* format);
  ::DDS::ReturnCode_t encode_to_bytes(const flightAuthorization& in, ::DDS::OctetSeq_out out, OpenDDS::DCPS::RepresentationFormat* format);
  ::DDS::ReturnCode_t decode_from_string(const char* in, flightAuthorization_out out, OpenDDS::DCPS::RepresentationFormat* format);
  ::DDS::ReturnCode_t decode_from_bytes(const ::DDS::OctetSeq& in, flightAuthorization_out out, OpenDDS::DCPS::RepresentationFormat* format);

  static flightAuthorizationTypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};

}
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
UATM_Export
const MetaStruct& getMetaStruct< ::UATM::flightAuthorization>();
UATM_Export
bool gen_skip_over(Serializer& ser,  ::UATM::flightAuthorization*);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif // ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace XTypes {

#ifndef OPENDDS_SAFETY_PROFILE
template <>
UATM_Export DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::flightAuthorization,  ::UATM::flightAuthorization>(DDS::DynamicType_ptr type, const  ::UATM::flightAuthorization& value);

template <>
UATM_Export DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::flightAuthorization,  ::UATM::flightAuthorization>(DDS::DynamicType_ptr type,  ::UATM::flightAuthorization& value);

template <>
UATM_Export const  ::UATM::flightAuthorization* get_dynamic_data_adapter_value< ::UATM::flightAuthorization,  ::UATM::flightAuthorization>(DDS::DynamicData_ptr dd);

#endif // ifndef OPENDDS_SAFETY_PROFILE

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End STRUCT: flightAuthorization */

/* End MODULE: UATM */


/* Begin MODULE: UATM */



/* Begin TYPEDEF: ArrayString */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

struct UATM_ArrayString_xtag {};
template<> UATM_Export
const XTypes::TypeIdentifier& getMinimalTypeIdentifier<UATM_ArrayString_xtag>();

template<> UATM_Export
const XTypes::TypeMap& getMinimalTypeMap<UATM_ArrayString_xtag>();

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> UATM_Export
void set_default( ::UATM::ArrayString_forany& arr);

UATM_Export
void serialized_size(const Encoding& encoding, size_t& size, const  ::UATM::ArrayString_forany& arr);

UATM_Export
bool operator<<(Serializer& strm, const  ::UATM::ArrayString_forany& arr);

UATM_Export
bool operator>>(Serializer& strm,  ::UATM::ArrayString_forany& arr);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

UATM_Export
bool gen_skip_over(Serializer& ser,  ::UATM::ArrayString_forany*);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif // ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace XTypes {

#ifndef OPENDDS_SAFETY_PROFILE
struct UATM_ArrayString_dda_tag {};

template <>
UATM_Export DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::ArrayString, UATM_ArrayString_dda_tag>(DDS::DynamicType_ptr type, const  ::UATM::ArrayString& value);

template <>
UATM_Export DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::ArrayString, UATM_ArrayString_dda_tag>(DDS::DynamicType_ptr type,  ::UATM::ArrayString& value);

template <>
UATM_Export const  ::UATM::ArrayString* get_dynamic_data_adapter_value< ::UATM::ArrayString, UATM_ArrayString_dda_tag>(DDS::DynamicData_ptr dd);

#endif // ifndef OPENDDS_SAFETY_PROFILE

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End TYPEDEF: ArrayString */

/* End MODULE: UATM */


/* Begin MODULE: UATM */



/* Begin STRUCT: flightChanceRec */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

struct UATM_flightChanceRec_xtag {};
template<> UATM_Export
const XTypes::TypeIdentifier& getMinimalTypeIdentifier<UATM_flightChanceRec_xtag>();

template<> UATM_Export
const XTypes::TypeMap& getMinimalTypeMap<UATM_flightChanceRec_xtag>();

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

UATM_Export
bool vread(OpenDDS::DCPS::ValueReader& value_reader,  ::UATM::flightChanceRec& value);

UATM_Export
bool vread(OpenDDS::DCPS::ValueReader& value_reader, const NestedKeyOnly< ::UATM::flightChanceRec>& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

UATM_Export
bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const  ::UATM::flightChanceRec& value);

UATM_Export
bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const NestedKeyOnly<const  ::UATM::flightChanceRec>& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> UATM_Export
void set_default( ::UATM::flightChanceRec& stru);

UATM_Export
void serialized_size(const Encoding& encoding, size_t& size, const ::UATM::flightChanceRec& stru);

UATM_Export
bool operator<<(Serializer& strm, const ::UATM::flightChanceRec& stru);

UATM_Export
bool operator>>(Serializer& strm,  ::UATM::flightChanceRec& stru);

UATM_Export
void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const ::UATM::flightChanceRec>& stru);

UATM_Export
bool operator<<(Serializer& strm, const NestedKeyOnly<const ::UATM::flightChanceRec>& stru);

UATM_Export
bool operator>>(Serializer& strm, const NestedKeyOnly< ::UATM::flightChanceRec>& stru);

template <>
struct MarshalTraits< ::UATM::flightChanceRec> {
  static void representations_allowed_by_type(DDS::DataRepresentationIdSeq& seq)
  {
    seq.length(4);
    seq[0] = DDS::XCDR_DATA_REPRESENTATION;
    seq[1] = DDS::XCDR2_DATA_REPRESENTATION;
    seq[2] = DDS::XML_DATA_REPRESENTATION;
    seq[3] = OpenDDS::DCPS::UNALIGNED_CDR_DATA_REPRESENTATION;
  }

  static SerializedSizeBound serialized_size_bound(const Encoding& encoding)
  {
    switch (encoding.kind()) {
    case Encoding::KIND_XCDR1:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR2:
      return SerializedSizeBound();
    case Encoding::KIND_UNALIGNED_CDR:
      return SerializedSizeBound(113);
    default:
      OPENDDS_ASSERT(false);
      return SerializedSizeBound();
    }
  }

  static SerializedSizeBound key_only_serialized_size_bound(const Encoding& encoding)
  {
    switch (encoding.kind()) {
    case Encoding::KIND_XCDR1:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR2:
      return SerializedSizeBound();
    case Encoding::KIND_UNALIGNED_CDR:
      return SerializedSizeBound(4);
    default:
      OPENDDS_ASSERT(false);
      return SerializedSizeBound();
    }
  }

  static bool to_message_block(ACE_Message_Block&, const  ::UATM::flightChanceRec&) { return false; }
  static bool from_message_block( ::UATM::flightChanceRec&, const ACE_Message_Block&) { return false; }
  static Extensibility extensibility() { return APPENDABLE; }
  static Extensibility max_extensibility_level() { return APPENDABLE; }
};
UATM_Export
void serialized_size(const Encoding& encoding, size_t& size, const KeyOnly<const  ::UATM::flightChanceRec> stru);

UATM_Export
bool operator<<(Serializer& strm, KeyOnly<const  ::UATM::flightChanceRec> stru);

UATM_Export
bool operator>>(Serializer& strm, KeyOnly< ::UATM::flightChanceRec> stru);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace UATM {
/// This structure supports use of std::map with one or more keys.
struct UATM_Export flightChanceRec_OpenDDS_KeyLessThan {
  bool operator()(const  ::UATM::flightChanceRec& v1, const  ::UATM::flightChanceRec& v2) const
  {
    using ::operator<; // TAO::String_Manager's operator< is in global NS
    if (v1.recommendation_id < v2.recommendation_id) return true;
    if (v2.recommendation_id < v1.recommendation_id) return false;
    return false;
  }
};
}

namespace UATM {
class flightChanceRecTypeSupportImpl;
}
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace DCPS {
template <>
struct DDSTraits< ::UATM::flightChanceRec> {
  typedef  ::UATM::flightChanceRec MessageType;
  typedef  ::UATM::flightChanceRecSeq MessageSequenceType;
  typedef  ::UATM::flightChanceRecSeq::PrivateMemberAccess MessageSequenceAdapterType;
  typedef  ::UATM::flightChanceRecTypeSupport TypeSupportType;
  typedef  ::UATM::flightChanceRecTypeSupportImpl TypeSupportImplType;
  typedef  ::UATM::flightChanceRecDataWriter DataWriterType;
  typedef  ::UATM::flightChanceRecDataReader DataReaderType;
  typedef  ::UATM::flightChanceRec_OpenDDS_KeyLessThan LessThanType;
  typedef OpenDDS::DCPS::KeyOnly<const  ::UATM::flightChanceRec> KeyOnlyType;
  typedef OpenDDS::DCPS::UATM_flightChanceRec_xtag XtagType;

  static const char* type_name() { return "UATM::flightChanceRec"; }
  static size_t key_count() { return 1; }
  static bool is_key(const char*);
};
} // namespace DCPS
} // namespace OpenDDS
OPENDDS_END_VERSIONED_NAMESPACE_DECL

namespace UATM {
class UATM_Export flightChanceRecTypeSupportImpl
  : public virtual OpenDDS::DCPS::TypeSupportImpl_T<flightChanceRec>
  , public virtual OpenDDS::DCPS::ValueDispatcher_T<flightChanceRec>
{
public:
  typedef flightChanceRecTypeSupport TypeSupportType;
  typedef flightChanceRecTypeSupport::_var_type _var_type;
  typedef flightChanceRecTypeSupport::_ptr_type _ptr_type;

  flightChanceRecTypeSupportImpl() {}
  virtual ~flightChanceRecTypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_SAFETY_PROFILE
  flightChanceRec* create_sample(::DDS::DynamicData_ptr src);
#endif
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType() const;
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */

  virtual const OpenDDS::XTypes::TypeIdentifier& getMinimalTypeIdentifier() const;
  virtual const OpenDDS::XTypes::TypeMap& getMinimalTypeMap() const;

  virtual const OpenDDS::XTypes::TypeIdentifier& getCompleteTypeIdentifier() const;
  virtual const OpenDDS::XTypes::TypeMap& getCompleteTypeMap() const;

  ::DDS::ReturnCode_t encode_to_string(const flightChanceRec& in, CORBA::String_out out, OpenDDS::DCPS::RepresentationFormat* format);
  ::DDS::ReturnCode_t encode_to_bytes(const flightChanceRec& in, ::DDS::OctetSeq_out out, OpenDDS::DCPS::RepresentationFormat* format);
  ::DDS::ReturnCode_t decode_from_string(const char* in, flightChanceRec_out out, OpenDDS::DCPS::RepresentationFormat* format);
  ::DDS::ReturnCode_t decode_from_bytes(const ::DDS::OctetSeq& in, flightChanceRec_out out, OpenDDS::DCPS::RepresentationFormat* format);

  static flightChanceRecTypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};

}
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
UATM_Export
const MetaStruct& getMetaStruct< ::UATM::flightChanceRec>();
UATM_Export
bool gen_skip_over(Serializer& ser,  ::UATM::flightChanceRec*);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif // ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace XTypes {

#ifndef OPENDDS_SAFETY_PROFILE
template <>
UATM_Export DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::flightChanceRec,  ::UATM::flightChanceRec>(DDS::DynamicType_ptr type, const  ::UATM::flightChanceRec& value);

template <>
UATM_Export DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::flightChanceRec,  ::UATM::flightChanceRec>(DDS::DynamicType_ptr type,  ::UATM::flightChanceRec& value);

template <>
UATM_Export const  ::UATM::flightChanceRec* get_dynamic_data_adapter_value< ::UATM::flightChanceRec,  ::UATM::flightChanceRec>(DDS::DynamicData_ptr dd);

#endif // ifndef OPENDDS_SAFETY_PROFILE

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End STRUCT: flightChanceRec */

/* End MODULE: UATM */


/* Begin MODULE: UATM */



/* Begin STRUCT: flightCoordination */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

struct UATM_flightCoordination_xtag {};
template<> UATM_Export
const XTypes::TypeIdentifier& getMinimalTypeIdentifier<UATM_flightCoordination_xtag>();

template<> UATM_Export
const XTypes::TypeMap& getMinimalTypeMap<UATM_flightCoordination_xtag>();

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

UATM_Export
bool vread(OpenDDS::DCPS::ValueReader& value_reader,  ::UATM::flightCoordination& value);

UATM_Export
bool vread(OpenDDS::DCPS::ValueReader& value_reader, const NestedKeyOnly< ::UATM::flightCoordination>& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

UATM_Export
bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const  ::UATM::flightCoordination& value);

UATM_Export
bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const NestedKeyOnly<const  ::UATM::flightCoordination>& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> UATM_Export
void set_default( ::UATM::flightCoordination& stru);

UATM_Export
void serialized_size(const Encoding& encoding, size_t& size, const ::UATM::flightCoordination& stru);

UATM_Export
bool operator<<(Serializer& strm, const ::UATM::flightCoordination& stru);

UATM_Export
bool operator>>(Serializer& strm,  ::UATM::flightCoordination& stru);

UATM_Export
void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const ::UATM::flightCoordination>& stru);

UATM_Export
bool operator<<(Serializer& strm, const NestedKeyOnly<const ::UATM::flightCoordination>& stru);

UATM_Export
bool operator>>(Serializer& strm, const NestedKeyOnly< ::UATM::flightCoordination>& stru);

template <>
struct MarshalTraits< ::UATM::flightCoordination> {
  static void representations_allowed_by_type(DDS::DataRepresentationIdSeq& seq)
  {
    seq.length(4);
    seq[0] = DDS::XCDR_DATA_REPRESENTATION;
    seq[1] = DDS::XCDR2_DATA_REPRESENTATION;
    seq[2] = DDS::XML_DATA_REPRESENTATION;
    seq[3] = OpenDDS::DCPS::UNALIGNED_CDR_DATA_REPRESENTATION;
  }

  static SerializedSizeBound serialized_size_bound(const Encoding& encoding)
  {
    switch (encoding.kind()) {
    case Encoding::KIND_XCDR1:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR2:
      return SerializedSizeBound();
    case Encoding::KIND_UNALIGNED_CDR:
      return SerializedSizeBound(88);
    default:
      OPENDDS_ASSERT(false);
      return SerializedSizeBound();
    }
  }

  static SerializedSizeBound key_only_serialized_size_bound(const Encoding& encoding)
  {
    switch (encoding.kind()) {
    case Encoding::KIND_XCDR1:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR2:
      return SerializedSizeBound();
    case Encoding::KIND_UNALIGNED_CDR:
      return SerializedSizeBound(4);
    default:
      OPENDDS_ASSERT(false);
      return SerializedSizeBound();
    }
  }

  static bool to_message_block(ACE_Message_Block&, const  ::UATM::flightCoordination&) { return false; }
  static bool from_message_block( ::UATM::flightCoordination&, const ACE_Message_Block&) { return false; }
  static Extensibility extensibility() { return APPENDABLE; }
  static Extensibility max_extensibility_level() { return APPENDABLE; }
};
UATM_Export
void serialized_size(const Encoding& encoding, size_t& size, const KeyOnly<const  ::UATM::flightCoordination> stru);

UATM_Export
bool operator<<(Serializer& strm, KeyOnly<const  ::UATM::flightCoordination> stru);

UATM_Export
bool operator>>(Serializer& strm, KeyOnly< ::UATM::flightCoordination> stru);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace UATM {
/// This structure supports use of std::map with one or more keys.
struct UATM_Export flightCoordination_OpenDDS_KeyLessThan {
  bool operator()(const  ::UATM::flightCoordination& v1, const  ::UATM::flightCoordination& v2) const
  {
    using ::operator<; // TAO::String_Manager's operator< is in global NS
    if (v1.coordination_id < v2.coordination_id) return true;
    if (v2.coordination_id < v1.coordination_id) return false;
    return false;
  }
};
}

namespace UATM {
class flightCoordinationTypeSupportImpl;
}
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace DCPS {
template <>
struct DDSTraits< ::UATM::flightCoordination> {
  typedef  ::UATM::flightCoordination MessageType;
  typedef  ::UATM::flightCoordinationSeq MessageSequenceType;
  typedef  ::UATM::flightCoordinationSeq::PrivateMemberAccess MessageSequenceAdapterType;
  typedef  ::UATM::flightCoordinationTypeSupport TypeSupportType;
  typedef  ::UATM::flightCoordinationTypeSupportImpl TypeSupportImplType;
  typedef  ::UATM::flightCoordinationDataWriter DataWriterType;
  typedef  ::UATM::flightCoordinationDataReader DataReaderType;
  typedef  ::UATM::flightCoordination_OpenDDS_KeyLessThan LessThanType;
  typedef OpenDDS::DCPS::KeyOnly<const  ::UATM::flightCoordination> KeyOnlyType;
  typedef OpenDDS::DCPS::UATM_flightCoordination_xtag XtagType;

  static const char* type_name() { return "UATM::flightCoordination"; }
  static size_t key_count() { return 1; }
  static bool is_key(const char*);
};
} // namespace DCPS
} // namespace OpenDDS
OPENDDS_END_VERSIONED_NAMESPACE_DECL

namespace UATM {
class UATM_Export flightCoordinationTypeSupportImpl
  : public virtual OpenDDS::DCPS::TypeSupportImpl_T<flightCoordination>
  , public virtual OpenDDS::DCPS::ValueDispatcher_T<flightCoordination>
{
public:
  typedef flightCoordinationTypeSupport TypeSupportType;
  typedef flightCoordinationTypeSupport::_var_type _var_type;
  typedef flightCoordinationTypeSupport::_ptr_type _ptr_type;

  flightCoordinationTypeSupportImpl() {}
  virtual ~flightCoordinationTypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_SAFETY_PROFILE
  flightCoordination* create_sample(::DDS::DynamicData_ptr src);
#endif
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType() const;
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */

  virtual const OpenDDS::XTypes::TypeIdentifier& getMinimalTypeIdentifier() const;
  virtual const OpenDDS::XTypes::TypeMap& getMinimalTypeMap() const;

  virtual const OpenDDS::XTypes::TypeIdentifier& getCompleteTypeIdentifier() const;
  virtual const OpenDDS::XTypes::TypeMap& getCompleteTypeMap() const;

  ::DDS::ReturnCode_t encode_to_string(const flightCoordination& in, CORBA::String_out out, OpenDDS::DCPS::RepresentationFormat* format);
  ::DDS::ReturnCode_t encode_to_bytes(const flightCoordination& in, ::DDS::OctetSeq_out out, OpenDDS::DCPS::RepresentationFormat* format);
  ::DDS::ReturnCode_t decode_from_string(const char* in, flightCoordination_out out, OpenDDS::DCPS::RepresentationFormat* format);
  ::DDS::ReturnCode_t decode_from_bytes(const ::DDS::OctetSeq& in, flightCoordination_out out, OpenDDS::DCPS::RepresentationFormat* format);

  static flightCoordinationTypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};

}
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
UATM_Export
const MetaStruct& getMetaStruct< ::UATM::flightCoordination>();
UATM_Export
bool gen_skip_over(Serializer& ser,  ::UATM::flightCoordination*);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif // ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace XTypes {

#ifndef OPENDDS_SAFETY_PROFILE
template <>
UATM_Export DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::flightCoordination,  ::UATM::flightCoordination>(DDS::DynamicType_ptr type, const  ::UATM::flightCoordination& value);

template <>
UATM_Export DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::flightCoordination,  ::UATM::flightCoordination>(DDS::DynamicType_ptr type,  ::UATM::flightCoordination& value);

template <>
UATM_Export const  ::UATM::flightCoordination* get_dynamic_data_adapter_value< ::UATM::flightCoordination,  ::UATM::flightCoordination>(DDS::DynamicData_ptr dd);

#endif // ifndef OPENDDS_SAFETY_PROFILE

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End STRUCT: flightCoordination */

/* End MODULE: UATM */


/* Begin MODULE: UATM */



/* Begin STRUCT: flightRequestInfo */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

struct UATM_flightRequestInfo_xtag {};
template<> UATM_Export
const XTypes::TypeIdentifier& getMinimalTypeIdentifier<UATM_flightRequestInfo_xtag>();

template<> UATM_Export
const XTypes::TypeMap& getMinimalTypeMap<UATM_flightRequestInfo_xtag>();

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

UATM_Export
bool vread(OpenDDS::DCPS::ValueReader& value_reader,  ::UATM::flightRequestInfo& value);

UATM_Export
bool vread(OpenDDS::DCPS::ValueReader& value_reader, const NestedKeyOnly< ::UATM::flightRequestInfo>& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

UATM_Export
bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const  ::UATM::flightRequestInfo& value);

UATM_Export
bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const NestedKeyOnly<const  ::UATM::flightRequestInfo>& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> UATM_Export
void set_default( ::UATM::flightRequestInfo& stru);

UATM_Export
void serialized_size(const Encoding& encoding, size_t& size, const ::UATM::flightRequestInfo& stru);

UATM_Export
bool operator<<(Serializer& strm, const ::UATM::flightRequestInfo& stru);

UATM_Export
bool operator>>(Serializer& strm,  ::UATM::flightRequestInfo& stru);

UATM_Export
void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const ::UATM::flightRequestInfo>& stru);

UATM_Export
bool operator<<(Serializer& strm, const NestedKeyOnly<const ::UATM::flightRequestInfo>& stru);

UATM_Export
bool operator>>(Serializer& strm, const NestedKeyOnly< ::UATM::flightRequestInfo>& stru);

template <>
struct MarshalTraits< ::UATM::flightRequestInfo> {
  static void representations_allowed_by_type(DDS::DataRepresentationIdSeq& seq)
  {
    seq.length(4);
    seq[0] = DDS::XCDR_DATA_REPRESENTATION;
    seq[1] = DDS::XCDR2_DATA_REPRESENTATION;
    seq[2] = DDS::XML_DATA_REPRESENTATION;
    seq[3] = OpenDDS::DCPS::UNALIGNED_CDR_DATA_REPRESENTATION;
  }

  static SerializedSizeBound serialized_size_bound(const Encoding& encoding)
  {
    switch (encoding.kind()) {
    case Encoding::KIND_XCDR1:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR2:
      return SerializedSizeBound();
    case Encoding::KIND_UNALIGNED_CDR:
      return SerializedSizeBound(42);
    default:
      OPENDDS_ASSERT(false);
      return SerializedSizeBound();
    }
  }

  static SerializedSizeBound key_only_serialized_size_bound(const Encoding& encoding)
  {
    switch (encoding.kind()) {
    case Encoding::KIND_XCDR1:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR2:
      return SerializedSizeBound();
    case Encoding::KIND_UNALIGNED_CDR:
      return SerializedSizeBound(4);
    default:
      OPENDDS_ASSERT(false);
      return SerializedSizeBound();
    }
  }

  static bool to_message_block(ACE_Message_Block&, const  ::UATM::flightRequestInfo&) { return false; }
  static bool from_message_block( ::UATM::flightRequestInfo&, const ACE_Message_Block&) { return false; }
  static Extensibility extensibility() { return APPENDABLE; }
  static Extensibility max_extensibility_level() { return APPENDABLE; }
};
UATM_Export
void serialized_size(const Encoding& encoding, size_t& size, const KeyOnly<const  ::UATM::flightRequestInfo> stru);

UATM_Export
bool operator<<(Serializer& strm, KeyOnly<const  ::UATM::flightRequestInfo> stru);

UATM_Export
bool operator>>(Serializer& strm, KeyOnly< ::UATM::flightRequestInfo> stru);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace UATM {
/// This structure supports use of std::map with one or more keys.
struct UATM_Export flightRequestInfo_OpenDDS_KeyLessThan {
  bool operator()(const  ::UATM::flightRequestInfo& v1, const  ::UATM::flightRequestInfo& v2) const
  {
    using ::operator<; // TAO::String_Manager's operator< is in global NS
    if (v1.request_id < v2.request_id) return true;
    if (v2.request_id < v1.request_id) return false;
    return false;
  }
};
}

namespace UATM {
class flightRequestInfoTypeSupportImpl;
}
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace DCPS {
template <>
struct DDSTraits< ::UATM::flightRequestInfo> {
  typedef  ::UATM::flightRequestInfo MessageType;
  typedef  ::UATM::flightRequestInfoSeq MessageSequenceType;
  typedef  ::UATM::flightRequestInfoSeq::PrivateMemberAccess MessageSequenceAdapterType;
  typedef  ::UATM::flightRequestInfoTypeSupport TypeSupportType;
  typedef  ::UATM::flightRequestInfoTypeSupportImpl TypeSupportImplType;
  typedef  ::UATM::flightRequestInfoDataWriter DataWriterType;
  typedef  ::UATM::flightRequestInfoDataReader DataReaderType;
  typedef  ::UATM::flightRequestInfo_OpenDDS_KeyLessThan LessThanType;
  typedef OpenDDS::DCPS::KeyOnly<const  ::UATM::flightRequestInfo> KeyOnlyType;
  typedef OpenDDS::DCPS::UATM_flightRequestInfo_xtag XtagType;

  static const char* type_name() { return "UATM::flightRequestInfo"; }
  static size_t key_count() { return 1; }
  static bool is_key(const char*);
};
} // namespace DCPS
} // namespace OpenDDS
OPENDDS_END_VERSIONED_NAMESPACE_DECL

namespace UATM {
class UATM_Export flightRequestInfoTypeSupportImpl
  : public virtual OpenDDS::DCPS::TypeSupportImpl_T<flightRequestInfo>
  , public virtual OpenDDS::DCPS::ValueDispatcher_T<flightRequestInfo>
{
public:
  typedef flightRequestInfoTypeSupport TypeSupportType;
  typedef flightRequestInfoTypeSupport::_var_type _var_type;
  typedef flightRequestInfoTypeSupport::_ptr_type _ptr_type;

  flightRequestInfoTypeSupportImpl() {}
  virtual ~flightRequestInfoTypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_SAFETY_PROFILE
  flightRequestInfo* create_sample(::DDS::DynamicData_ptr src);
#endif
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType() const;
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */

  virtual const OpenDDS::XTypes::TypeIdentifier& getMinimalTypeIdentifier() const;
  virtual const OpenDDS::XTypes::TypeMap& getMinimalTypeMap() const;

  virtual const OpenDDS::XTypes::TypeIdentifier& getCompleteTypeIdentifier() const;
  virtual const OpenDDS::XTypes::TypeMap& getCompleteTypeMap() const;

  ::DDS::ReturnCode_t encode_to_string(const flightRequestInfo& in, CORBA::String_out out, OpenDDS::DCPS::RepresentationFormat* format);
  ::DDS::ReturnCode_t encode_to_bytes(const flightRequestInfo& in, ::DDS::OctetSeq_out out, OpenDDS::DCPS::RepresentationFormat* format);
  ::DDS::ReturnCode_t decode_from_string(const char* in, flightRequestInfo_out out, OpenDDS::DCPS::RepresentationFormat* format);
  ::DDS::ReturnCode_t decode_from_bytes(const ::DDS::OctetSeq& in, flightRequestInfo_out out, OpenDDS::DCPS::RepresentationFormat* format);

  static flightRequestInfoTypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};

}
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
UATM_Export
const MetaStruct& getMetaStruct< ::UATM::flightRequestInfo>();
UATM_Export
bool gen_skip_over(Serializer& ser,  ::UATM::flightRequestInfo*);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif // ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace XTypes {

#ifndef OPENDDS_SAFETY_PROFILE
template <>
UATM_Export DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::flightRequestInfo,  ::UATM::flightRequestInfo>(DDS::DynamicType_ptr type, const  ::UATM::flightRequestInfo& value);

template <>
UATM_Export DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::flightRequestInfo,  ::UATM::flightRequestInfo>(DDS::DynamicType_ptr type,  ::UATM::flightRequestInfo& value);

template <>
UATM_Export const  ::UATM::flightRequestInfo* get_dynamic_data_adapter_value< ::UATM::flightRequestInfo,  ::UATM::flightRequestInfo>(DDS::DynamicData_ptr dd);

#endif // ifndef OPENDDS_SAFETY_PROFILE

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End STRUCT: flightRequestInfo */

/* End MODULE: UATM */


/* Begin MODULE: UATM */



/* Begin STRUCT: flightRoutesInfo */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

struct UATM_flightRoutesInfo_xtag {};
template<> UATM_Export
const XTypes::TypeIdentifier& getMinimalTypeIdentifier<UATM_flightRoutesInfo_xtag>();

template<> UATM_Export
const XTypes::TypeMap& getMinimalTypeMap<UATM_flightRoutesInfo_xtag>();

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

UATM_Export
bool vread(OpenDDS::DCPS::ValueReader& value_reader,  ::UATM::flightRoutesInfo& value);

UATM_Export
bool vread(OpenDDS::DCPS::ValueReader& value_reader, const NestedKeyOnly< ::UATM::flightRoutesInfo>& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

UATM_Export
bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const  ::UATM::flightRoutesInfo& value);

UATM_Export
bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const NestedKeyOnly<const  ::UATM::flightRoutesInfo>& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> UATM_Export
void set_default( ::UATM::flightRoutesInfo& stru);

UATM_Export
void serialized_size(const Encoding& encoding, size_t& size, const ::UATM::flightRoutesInfo& stru);

UATM_Export
bool operator<<(Serializer& strm, const ::UATM::flightRoutesInfo& stru);

UATM_Export
bool operator>>(Serializer& strm,  ::UATM::flightRoutesInfo& stru);

UATM_Export
void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const ::UATM::flightRoutesInfo>& stru);

UATM_Export
bool operator<<(Serializer& strm, const NestedKeyOnly<const ::UATM::flightRoutesInfo>& stru);

UATM_Export
bool operator>>(Serializer& strm, const NestedKeyOnly< ::UATM::flightRoutesInfo>& stru);

template <>
struct MarshalTraits< ::UATM::flightRoutesInfo> {
  static void representations_allowed_by_type(DDS::DataRepresentationIdSeq& seq)
  {
    seq.length(4);
    seq[0] = DDS::XCDR_DATA_REPRESENTATION;
    seq[1] = DDS::XCDR2_DATA_REPRESENTATION;
    seq[2] = DDS::XML_DATA_REPRESENTATION;
    seq[3] = OpenDDS::DCPS::UNALIGNED_CDR_DATA_REPRESENTATION;
  }

  static SerializedSizeBound serialized_size_bound(const Encoding& encoding)
  {
    switch (encoding.kind()) {
    case Encoding::KIND_XCDR1:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR2:
      return SerializedSizeBound();
    case Encoding::KIND_UNALIGNED_CDR:
      return SerializedSizeBound(64);
    default:
      OPENDDS_ASSERT(false);
      return SerializedSizeBound();
    }
  }

  static SerializedSizeBound key_only_serialized_size_bound(const Encoding& encoding)
  {
    switch (encoding.kind()) {
    case Encoding::KIND_XCDR1:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR2:
      return SerializedSizeBound();
    case Encoding::KIND_UNALIGNED_CDR:
      return SerializedSizeBound(4);
    default:
      OPENDDS_ASSERT(false);
      return SerializedSizeBound();
    }
  }

  static bool to_message_block(ACE_Message_Block&, const  ::UATM::flightRoutesInfo&) { return false; }
  static bool from_message_block( ::UATM::flightRoutesInfo&, const ACE_Message_Block&) { return false; }
  static Extensibility extensibility() { return APPENDABLE; }
  static Extensibility max_extensibility_level() { return APPENDABLE; }
};
UATM_Export
void serialized_size(const Encoding& encoding, size_t& size, const KeyOnly<const  ::UATM::flightRoutesInfo> stru);

UATM_Export
bool operator<<(Serializer& strm, KeyOnly<const  ::UATM::flightRoutesInfo> stru);

UATM_Export
bool operator>>(Serializer& strm, KeyOnly< ::UATM::flightRoutesInfo> stru);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace UATM {
/// This structure supports use of std::map with one or more keys.
struct UATM_Export flightRoutesInfo_OpenDDS_KeyLessThan {
  bool operator()(const  ::UATM::flightRoutesInfo& v1, const  ::UATM::flightRoutesInfo& v2) const
  {
    using ::operator<; // TAO::String_Manager's operator< is in global NS
    if (v1.flight_route_id < v2.flight_route_id) return true;
    if (v2.flight_route_id < v1.flight_route_id) return false;
    return false;
  }
};
}

namespace UATM {
class flightRoutesInfoTypeSupportImpl;
}
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace DCPS {
template <>
struct DDSTraits< ::UATM::flightRoutesInfo> {
  typedef  ::UATM::flightRoutesInfo MessageType;
  typedef  ::UATM::flightRoutesInfoSeq MessageSequenceType;
  typedef  ::UATM::flightRoutesInfoSeq::PrivateMemberAccess MessageSequenceAdapterType;
  typedef  ::UATM::flightRoutesInfoTypeSupport TypeSupportType;
  typedef  ::UATM::flightRoutesInfoTypeSupportImpl TypeSupportImplType;
  typedef  ::UATM::flightRoutesInfoDataWriter DataWriterType;
  typedef  ::UATM::flightRoutesInfoDataReader DataReaderType;
  typedef  ::UATM::flightRoutesInfo_OpenDDS_KeyLessThan LessThanType;
  typedef OpenDDS::DCPS::KeyOnly<const  ::UATM::flightRoutesInfo> KeyOnlyType;
  typedef OpenDDS::DCPS::UATM_flightRoutesInfo_xtag XtagType;

  static const char* type_name() { return "UATM::flightRoutesInfo"; }
  static size_t key_count() { return 1; }
  static bool is_key(const char*);
};
} // namespace DCPS
} // namespace OpenDDS
OPENDDS_END_VERSIONED_NAMESPACE_DECL

namespace UATM {
class UATM_Export flightRoutesInfoTypeSupportImpl
  : public virtual OpenDDS::DCPS::TypeSupportImpl_T<flightRoutesInfo>
  , public virtual OpenDDS::DCPS::ValueDispatcher_T<flightRoutesInfo>
{
public:
  typedef flightRoutesInfoTypeSupport TypeSupportType;
  typedef flightRoutesInfoTypeSupport::_var_type _var_type;
  typedef flightRoutesInfoTypeSupport::_ptr_type _ptr_type;

  flightRoutesInfoTypeSupportImpl() {}
  virtual ~flightRoutesInfoTypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_SAFETY_PROFILE
  flightRoutesInfo* create_sample(::DDS::DynamicData_ptr src);
#endif
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType() const;
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */

  virtual const OpenDDS::XTypes::TypeIdentifier& getMinimalTypeIdentifier() const;
  virtual const OpenDDS::XTypes::TypeMap& getMinimalTypeMap() const;

  virtual const OpenDDS::XTypes::TypeIdentifier& getCompleteTypeIdentifier() const;
  virtual const OpenDDS::XTypes::TypeMap& getCompleteTypeMap() const;

  ::DDS::ReturnCode_t encode_to_string(const flightRoutesInfo& in, CORBA::String_out out, OpenDDS::DCPS::RepresentationFormat* format);
  ::DDS::ReturnCode_t encode_to_bytes(const flightRoutesInfo& in, ::DDS::OctetSeq_out out, OpenDDS::DCPS::RepresentationFormat* format);
  ::DDS::ReturnCode_t decode_from_string(const char* in, flightRoutesInfo_out out, OpenDDS::DCPS::RepresentationFormat* format);
  ::DDS::ReturnCode_t decode_from_bytes(const ::DDS::OctetSeq& in, flightRoutesInfo_out out, OpenDDS::DCPS::RepresentationFormat* format);

  static flightRoutesInfoTypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};

}
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
UATM_Export
const MetaStruct& getMetaStruct< ::UATM::flightRoutesInfo>();
UATM_Export
bool gen_skip_over(Serializer& ser,  ::UATM::flightRoutesInfo*);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif // ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace XTypes {

#ifndef OPENDDS_SAFETY_PROFILE
template <>
UATM_Export DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::flightRoutesInfo,  ::UATM::flightRoutesInfo>(DDS::DynamicType_ptr type, const  ::UATM::flightRoutesInfo& value);

template <>
UATM_Export DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::flightRoutesInfo,  ::UATM::flightRoutesInfo>(DDS::DynamicType_ptr type,  ::UATM::flightRoutesInfo& value);

template <>
UATM_Export const  ::UATM::flightRoutesInfo* get_dynamic_data_adapter_value< ::UATM::flightRoutesInfo,  ::UATM::flightRoutesInfo>(DDS::DynamicData_ptr dd);

#endif // ifndef OPENDDS_SAFETY_PROFILE

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End STRUCT: flightRoutesInfo */

/* End MODULE: UATM */


/* Begin MODULE: UATM */



/* Begin STRUCT: tolPadRequest */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

struct UATM_tolPadRequest_xtag {};
template<> UATM_Export
const XTypes::TypeIdentifier& getMinimalTypeIdentifier<UATM_tolPadRequest_xtag>();

template<> UATM_Export
const XTypes::TypeMap& getMinimalTypeMap<UATM_tolPadRequest_xtag>();

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

UATM_Export
bool vread(OpenDDS::DCPS::ValueReader& value_reader,  ::UATM::tolPadRequest& value);

UATM_Export
bool vread(OpenDDS::DCPS::ValueReader& value_reader, const NestedKeyOnly< ::UATM::tolPadRequest>& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

UATM_Export
bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const  ::UATM::tolPadRequest& value);

UATM_Export
bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const NestedKeyOnly<const  ::UATM::tolPadRequest>& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> UATM_Export
void set_default( ::UATM::tolPadRequest& stru);

UATM_Export
void serialized_size(const Encoding& encoding, size_t& size, const ::UATM::tolPadRequest& stru);

UATM_Export
bool operator<<(Serializer& strm, const ::UATM::tolPadRequest& stru);

UATM_Export
bool operator>>(Serializer& strm,  ::UATM::tolPadRequest& stru);

UATM_Export
void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const ::UATM::tolPadRequest>& stru);

UATM_Export
bool operator<<(Serializer& strm, const NestedKeyOnly<const ::UATM::tolPadRequest>& stru);

UATM_Export
bool operator>>(Serializer& strm, const NestedKeyOnly< ::UATM::tolPadRequest>& stru);

template <>
struct MarshalTraits< ::UATM::tolPadRequest> {
  static void representations_allowed_by_type(DDS::DataRepresentationIdSeq& seq)
  {
    seq.length(4);
    seq[0] = DDS::XCDR_DATA_REPRESENTATION;
    seq[1] = DDS::XCDR2_DATA_REPRESENTATION;
    seq[2] = DDS::XML_DATA_REPRESENTATION;
    seq[3] = OpenDDS::DCPS::UNALIGNED_CDR_DATA_REPRESENTATION;
  }

  static SerializedSizeBound serialized_size_bound(const Encoding& encoding)
  {
    switch (encoding.kind()) {
    case Encoding::KIND_XCDR1:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR2:
      return SerializedSizeBound();
    case Encoding::KIND_UNALIGNED_CDR:
      return SerializedSizeBound(37);
    default:
      OPENDDS_ASSERT(false);
      return SerializedSizeBound();
    }
  }

  static SerializedSizeBound key_only_serialized_size_bound(const Encoding& encoding)
  {
    switch (encoding.kind()) {
    case Encoding::KIND_XCDR1:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR2:
      return SerializedSizeBound();
    case Encoding::KIND_UNALIGNED_CDR:
      return SerializedSizeBound(4);
    default:
      OPENDDS_ASSERT(false);
      return SerializedSizeBound();
    }
  }

  static bool to_message_block(ACE_Message_Block&, const  ::UATM::tolPadRequest&) { return false; }
  static bool from_message_block( ::UATM::tolPadRequest&, const ACE_Message_Block&) { return false; }
  static Extensibility extensibility() { return APPENDABLE; }
  static Extensibility max_extensibility_level() { return APPENDABLE; }
};
UATM_Export
void serialized_size(const Encoding& encoding, size_t& size, const KeyOnly<const  ::UATM::tolPadRequest> stru);

UATM_Export
bool operator<<(Serializer& strm, KeyOnly<const  ::UATM::tolPadRequest> stru);

UATM_Export
bool operator>>(Serializer& strm, KeyOnly< ::UATM::tolPadRequest> stru);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace UATM {
/// This structure supports use of std::map with one or more keys.
struct UATM_Export tolPadRequest_OpenDDS_KeyLessThan {
  bool operator()(const  ::UATM::tolPadRequest& v1, const  ::UATM::tolPadRequest& v2) const
  {
    using ::operator<; // TAO::String_Manager's operator< is in global NS
    if (v1.assign_id < v2.assign_id) return true;
    if (v2.assign_id < v1.assign_id) return false;
    return false;
  }
};
}

namespace UATM {
class tolPadRequestTypeSupportImpl;
}
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace DCPS {
template <>
struct DDSTraits< ::UATM::tolPadRequest> {
  typedef  ::UATM::tolPadRequest MessageType;
  typedef  ::UATM::tolPadRequestSeq MessageSequenceType;
  typedef  ::UATM::tolPadRequestSeq::PrivateMemberAccess MessageSequenceAdapterType;
  typedef  ::UATM::tolPadRequestTypeSupport TypeSupportType;
  typedef  ::UATM::tolPadRequestTypeSupportImpl TypeSupportImplType;
  typedef  ::UATM::tolPadRequestDataWriter DataWriterType;
  typedef  ::UATM::tolPadRequestDataReader DataReaderType;
  typedef  ::UATM::tolPadRequest_OpenDDS_KeyLessThan LessThanType;
  typedef OpenDDS::DCPS::KeyOnly<const  ::UATM::tolPadRequest> KeyOnlyType;
  typedef OpenDDS::DCPS::UATM_tolPadRequest_xtag XtagType;

  static const char* type_name() { return "UATM::tolPadRequest"; }
  static size_t key_count() { return 1; }
  static bool is_key(const char*);
};
} // namespace DCPS
} // namespace OpenDDS
OPENDDS_END_VERSIONED_NAMESPACE_DECL

namespace UATM {
class UATM_Export tolPadRequestTypeSupportImpl
  : public virtual OpenDDS::DCPS::TypeSupportImpl_T<tolPadRequest>
  , public virtual OpenDDS::DCPS::ValueDispatcher_T<tolPadRequest>
{
public:
  typedef tolPadRequestTypeSupport TypeSupportType;
  typedef tolPadRequestTypeSupport::_var_type _var_type;
  typedef tolPadRequestTypeSupport::_ptr_type _ptr_type;

  tolPadRequestTypeSupportImpl() {}
  virtual ~tolPadRequestTypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_SAFETY_PROFILE
  tolPadRequest* create_sample(::DDS::DynamicData_ptr src);
#endif
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType() const;
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */

  virtual const OpenDDS::XTypes::TypeIdentifier& getMinimalTypeIdentifier() const;
  virtual const OpenDDS::XTypes::TypeMap& getMinimalTypeMap() const;

  virtual const OpenDDS::XTypes::TypeIdentifier& getCompleteTypeIdentifier() const;
  virtual const OpenDDS::XTypes::TypeMap& getCompleteTypeMap() const;

  ::DDS::ReturnCode_t encode_to_string(const tolPadRequest& in, CORBA::String_out out, OpenDDS::DCPS::RepresentationFormat* format);
  ::DDS::ReturnCode_t encode_to_bytes(const tolPadRequest& in, ::DDS::OctetSeq_out out, OpenDDS::DCPS::RepresentationFormat* format);
  ::DDS::ReturnCode_t decode_from_string(const char* in, tolPadRequest_out out, OpenDDS::DCPS::RepresentationFormat* format);
  ::DDS::ReturnCode_t decode_from_bytes(const ::DDS::OctetSeq& in, tolPadRequest_out out, OpenDDS::DCPS::RepresentationFormat* format);

  static tolPadRequestTypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};

}
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
UATM_Export
const MetaStruct& getMetaStruct< ::UATM::tolPadRequest>();
UATM_Export
bool gen_skip_over(Serializer& ser,  ::UATM::tolPadRequest*);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif // ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace XTypes {

#ifndef OPENDDS_SAFETY_PROFILE
template <>
UATM_Export DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::tolPadRequest,  ::UATM::tolPadRequest>(DDS::DynamicType_ptr type, const  ::UATM::tolPadRequest& value);

template <>
UATM_Export DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::tolPadRequest,  ::UATM::tolPadRequest>(DDS::DynamicType_ptr type,  ::UATM::tolPadRequest& value);

template <>
UATM_Export const  ::UATM::tolPadRequest* get_dynamic_data_adapter_value< ::UATM::tolPadRequest,  ::UATM::tolPadRequest>(DDS::DynamicData_ptr dd);

#endif // ifndef OPENDDS_SAFETY_PROFILE

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End STRUCT: tolPadRequest */

/* End MODULE: UATM */


/* Begin MODULE: UATM */



/* Begin STRUCT: trafficFlowsInfo */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

struct UATM_trafficFlowsInfo_xtag {};
template<> UATM_Export
const XTypes::TypeIdentifier& getMinimalTypeIdentifier<UATM_trafficFlowsInfo_xtag>();

template<> UATM_Export
const XTypes::TypeMap& getMinimalTypeMap<UATM_trafficFlowsInfo_xtag>();

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

UATM_Export
bool vread(OpenDDS::DCPS::ValueReader& value_reader,  ::UATM::trafficFlowsInfo& value);

UATM_Export
bool vread(OpenDDS::DCPS::ValueReader& value_reader, const NestedKeyOnly< ::UATM::trafficFlowsInfo>& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

UATM_Export
bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const  ::UATM::trafficFlowsInfo& value);

UATM_Export
bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const NestedKeyOnly<const  ::UATM::trafficFlowsInfo>& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> UATM_Export
void set_default( ::UATM::trafficFlowsInfo& stru);

UATM_Export
void serialized_size(const Encoding& encoding, size_t& size, const ::UATM::trafficFlowsInfo& stru);

UATM_Export
bool operator<<(Serializer& strm, const ::UATM::trafficFlowsInfo& stru);

UATM_Export
bool operator>>(Serializer& strm,  ::UATM::trafficFlowsInfo& stru);

UATM_Export
void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const ::UATM::trafficFlowsInfo>& stru);

UATM_Export
bool operator<<(Serializer& strm, const NestedKeyOnly<const ::UATM::trafficFlowsInfo>& stru);

UATM_Export
bool operator>>(Serializer& strm, const NestedKeyOnly< ::UATM::trafficFlowsInfo>& stru);

template <>
struct MarshalTraits< ::UATM::trafficFlowsInfo> {
  static void representations_allowed_by_type(DDS::DataRepresentationIdSeq& seq)
  {
    seq.length(4);
    seq[0] = DDS::XCDR_DATA_REPRESENTATION;
    seq[1] = DDS::XCDR2_DATA_REPRESENTATION;
    seq[2] = DDS::XML_DATA_REPRESENTATION;
    seq[3] = OpenDDS::DCPS::UNALIGNED_CDR_DATA_REPRESENTATION;
  }

  static SerializedSizeBound serialized_size_bound(const Encoding& encoding)
  {
    switch (encoding.kind()) {
    case Encoding::KIND_XCDR1:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR2:
      return SerializedSizeBound();
    case Encoding::KIND_UNALIGNED_CDR:
      return SerializedSizeBound(104);
    default:
      OPENDDS_ASSERT(false);
      return SerializedSizeBound();
    }
  }

  static SerializedSizeBound key_only_serialized_size_bound(const Encoding& encoding)
  {
    switch (encoding.kind()) {
    case Encoding::KIND_XCDR1:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR2:
      return SerializedSizeBound();
    case Encoding::KIND_UNALIGNED_CDR:
      return SerializedSizeBound(4);
    default:
      OPENDDS_ASSERT(false);
      return SerializedSizeBound();
    }
  }

  static bool to_message_block(ACE_Message_Block&, const  ::UATM::trafficFlowsInfo&) { return false; }
  static bool from_message_block( ::UATM::trafficFlowsInfo&, const ACE_Message_Block&) { return false; }
  static Extensibility extensibility() { return APPENDABLE; }
  static Extensibility max_extensibility_level() { return APPENDABLE; }
};
UATM_Export
void serialized_size(const Encoding& encoding, size_t& size, const KeyOnly<const  ::UATM::trafficFlowsInfo> stru);

UATM_Export
bool operator<<(Serializer& strm, KeyOnly<const  ::UATM::trafficFlowsInfo> stru);

UATM_Export
bool operator>>(Serializer& strm, KeyOnly< ::UATM::trafficFlowsInfo> stru);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace UATM {
/// This structure supports use of std::map with one or more keys.
struct UATM_Export trafficFlowsInfo_OpenDDS_KeyLessThan {
  bool operator()(const  ::UATM::trafficFlowsInfo& v1, const  ::UATM::trafficFlowsInfo& v2) const
  {
    using ::operator<; // TAO::String_Manager's operator< is in global NS
    if (v1.flows_id < v2.flows_id) return true;
    if (v2.flows_id < v1.flows_id) return false;
    return false;
  }
};
}

namespace UATM {
class trafficFlowsInfoTypeSupportImpl;
}
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace DCPS {
template <>
struct DDSTraits< ::UATM::trafficFlowsInfo> {
  typedef  ::UATM::trafficFlowsInfo MessageType;
  typedef  ::UATM::trafficFlowsInfoSeq MessageSequenceType;
  typedef  ::UATM::trafficFlowsInfoSeq::PrivateMemberAccess MessageSequenceAdapterType;
  typedef  ::UATM::trafficFlowsInfoTypeSupport TypeSupportType;
  typedef  ::UATM::trafficFlowsInfoTypeSupportImpl TypeSupportImplType;
  typedef  ::UATM::trafficFlowsInfoDataWriter DataWriterType;
  typedef  ::UATM::trafficFlowsInfoDataReader DataReaderType;
  typedef  ::UATM::trafficFlowsInfo_OpenDDS_KeyLessThan LessThanType;
  typedef OpenDDS::DCPS::KeyOnly<const  ::UATM::trafficFlowsInfo> KeyOnlyType;
  typedef OpenDDS::DCPS::UATM_trafficFlowsInfo_xtag XtagType;

  static const char* type_name() { return "UATM::trafficFlowsInfo"; }
  static size_t key_count() { return 1; }
  static bool is_key(const char*);
};
} // namespace DCPS
} // namespace OpenDDS
OPENDDS_END_VERSIONED_NAMESPACE_DECL

namespace UATM {
class UATM_Export trafficFlowsInfoTypeSupportImpl
  : public virtual OpenDDS::DCPS::TypeSupportImpl_T<trafficFlowsInfo>
  , public virtual OpenDDS::DCPS::ValueDispatcher_T<trafficFlowsInfo>
{
public:
  typedef trafficFlowsInfoTypeSupport TypeSupportType;
  typedef trafficFlowsInfoTypeSupport::_var_type _var_type;
  typedef trafficFlowsInfoTypeSupport::_ptr_type _ptr_type;

  trafficFlowsInfoTypeSupportImpl() {}
  virtual ~trafficFlowsInfoTypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_SAFETY_PROFILE
  trafficFlowsInfo* create_sample(::DDS::DynamicData_ptr src);
#endif
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType() const;
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */

  virtual const OpenDDS::XTypes::TypeIdentifier& getMinimalTypeIdentifier() const;
  virtual const OpenDDS::XTypes::TypeMap& getMinimalTypeMap() const;

  virtual const OpenDDS::XTypes::TypeIdentifier& getCompleteTypeIdentifier() const;
  virtual const OpenDDS::XTypes::TypeMap& getCompleteTypeMap() const;

  ::DDS::ReturnCode_t encode_to_string(const trafficFlowsInfo& in, CORBA::String_out out, OpenDDS::DCPS::RepresentationFormat* format);
  ::DDS::ReturnCode_t encode_to_bytes(const trafficFlowsInfo& in, ::DDS::OctetSeq_out out, OpenDDS::DCPS::RepresentationFormat* format);
  ::DDS::ReturnCode_t decode_from_string(const char* in, trafficFlowsInfo_out out, OpenDDS::DCPS::RepresentationFormat* format);
  ::DDS::ReturnCode_t decode_from_bytes(const ::DDS::OctetSeq& in, trafficFlowsInfo_out out, OpenDDS::DCPS::RepresentationFormat* format);

  static trafficFlowsInfoTypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};

}
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
UATM_Export
const MetaStruct& getMetaStruct< ::UATM::trafficFlowsInfo>();
UATM_Export
bool gen_skip_over(Serializer& ser,  ::UATM::trafficFlowsInfo*);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif // ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace XTypes {

#ifndef OPENDDS_SAFETY_PROFILE
template <>
UATM_Export DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::trafficFlowsInfo,  ::UATM::trafficFlowsInfo>(DDS::DynamicType_ptr type, const  ::UATM::trafficFlowsInfo& value);

template <>
UATM_Export DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::trafficFlowsInfo,  ::UATM::trafficFlowsInfo>(DDS::DynamicType_ptr type,  ::UATM::trafficFlowsInfo& value);

template <>
UATM_Export const  ::UATM::trafficFlowsInfo* get_dynamic_data_adapter_value< ::UATM::trafficFlowsInfo,  ::UATM::trafficFlowsInfo>(DDS::DynamicData_ptr dd);

#endif // ifndef OPENDDS_SAFETY_PROFILE

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End STRUCT: trafficFlowsInfo */

/* End MODULE: UATM */


/* Begin MODULE: UATM */



/* Begin STRUCT: flightAuthorizationRequest */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

struct UATM_flightAuthorizationRequest_xtag {};
template<> UATM_Export
const XTypes::TypeIdentifier& getMinimalTypeIdentifier<UATM_flightAuthorizationRequest_xtag>();

template<> UATM_Export
const XTypes::TypeMap& getMinimalTypeMap<UATM_flightAuthorizationRequest_xtag>();

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

UATM_Export
bool vread(OpenDDS::DCPS::ValueReader& value_reader,  ::UATM::flightAuthorizationRequest& value);

UATM_Export
bool vread(OpenDDS::DCPS::ValueReader& value_reader, const NestedKeyOnly< ::UATM::flightAuthorizationRequest>& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

UATM_Export
bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const  ::UATM::flightAuthorizationRequest& value);

UATM_Export
bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const NestedKeyOnly<const  ::UATM::flightAuthorizationRequest>& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> UATM_Export
void set_default( ::UATM::flightAuthorizationRequest& stru);

UATM_Export
void serialized_size(const Encoding& encoding, size_t& size, const ::UATM::flightAuthorizationRequest& stru);

UATM_Export
bool operator<<(Serializer& strm, const ::UATM::flightAuthorizationRequest& stru);

UATM_Export
bool operator>>(Serializer& strm,  ::UATM::flightAuthorizationRequest& stru);

UATM_Export
void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const ::UATM::flightAuthorizationRequest>& stru);

UATM_Export
bool operator<<(Serializer& strm, const NestedKeyOnly<const ::UATM::flightAuthorizationRequest>& stru);

UATM_Export
bool operator>>(Serializer& strm, const NestedKeyOnly< ::UATM::flightAuthorizationRequest>& stru);

template <>
struct MarshalTraits< ::UATM::flightAuthorizationRequest> {
  static void representations_allowed_by_type(DDS::DataRepresentationIdSeq& seq)
  {
    seq.length(4);
    seq[0] = DDS::XCDR_DATA_REPRESENTATION;
    seq[1] = DDS::XCDR2_DATA_REPRESENTATION;
    seq[2] = DDS::XML_DATA_REPRESENTATION;
    seq[3] = OpenDDS::DCPS::UNALIGNED_CDR_DATA_REPRESENTATION;
  }

  static SerializedSizeBound serialized_size_bound(const Encoding& encoding)
  {
    switch (encoding.kind()) {
    case Encoding::KIND_XCDR1:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR2:
      return SerializedSizeBound();
    case Encoding::KIND_UNALIGNED_CDR:
      return SerializedSizeBound(38);
    default:
      OPENDDS_ASSERT(false);
      return SerializedSizeBound();
    }
  }

  static SerializedSizeBound key_only_serialized_size_bound(const Encoding& encoding)
  {
    switch (encoding.kind()) {
    case Encoding::KIND_XCDR1:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR2:
      return SerializedSizeBound();
    case Encoding::KIND_UNALIGNED_CDR:
      return SerializedSizeBound(4);
    default:
      OPENDDS_ASSERT(false);
      return SerializedSizeBound();
    }
  }

  static bool to_message_block(ACE_Message_Block&, const  ::UATM::flightAuthorizationRequest&) { return false; }
  static bool from_message_block( ::UATM::flightAuthorizationRequest&, const ACE_Message_Block&) { return false; }
  static Extensibility extensibility() { return APPENDABLE; }
  static Extensibility max_extensibility_level() { return APPENDABLE; }
};
UATM_Export
void serialized_size(const Encoding& encoding, size_t& size, const KeyOnly<const  ::UATM::flightAuthorizationRequest> stru);

UATM_Export
bool operator<<(Serializer& strm, KeyOnly<const  ::UATM::flightAuthorizationRequest> stru);

UATM_Export
bool operator>>(Serializer& strm, KeyOnly< ::UATM::flightAuthorizationRequest> stru);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace UATM {
/// This structure supports use of std::map with one or more keys.
struct UATM_Export flightAuthorizationRequest_OpenDDS_KeyLessThan {
  bool operator()(const  ::UATM::flightAuthorizationRequest& v1, const  ::UATM::flightAuthorizationRequest& v2) const
  {
    using ::operator<; // TAO::String_Manager's operator< is in global NS
    if (v1.auth_request_id < v2.auth_request_id) return true;
    if (v2.auth_request_id < v1.auth_request_id) return false;
    return false;
  }
};
}

namespace UATM {
class flightAuthorizationRequestTypeSupportImpl;
}
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace DCPS {
template <>
struct DDSTraits< ::UATM::flightAuthorizationRequest> {
  typedef  ::UATM::flightAuthorizationRequest MessageType;
  typedef  ::UATM::flightAuthorizationRequestSeq MessageSequenceType;
  typedef  ::UATM::flightAuthorizationRequestSeq::PrivateMemberAccess MessageSequenceAdapterType;
  typedef  ::UATM::flightAuthorizationRequestTypeSupport TypeSupportType;
  typedef  ::UATM::flightAuthorizationRequestTypeSupportImpl TypeSupportImplType;
  typedef  ::UATM::flightAuthorizationRequestDataWriter DataWriterType;
  typedef  ::UATM::flightAuthorizationRequestDataReader DataReaderType;
  typedef  ::UATM::flightAuthorizationRequest_OpenDDS_KeyLessThan LessThanType;
  typedef OpenDDS::DCPS::KeyOnly<const  ::UATM::flightAuthorizationRequest> KeyOnlyType;
  typedef OpenDDS::DCPS::UATM_flightAuthorizationRequest_xtag XtagType;

  static const char* type_name() { return "UATM::flightAuthorizationRequest"; }
  static size_t key_count() { return 1; }
  static bool is_key(const char*);
};
} // namespace DCPS
} // namespace OpenDDS
OPENDDS_END_VERSIONED_NAMESPACE_DECL

namespace UATM {
class UATM_Export flightAuthorizationRequestTypeSupportImpl
  : public virtual OpenDDS::DCPS::TypeSupportImpl_T<flightAuthorizationRequest>
  , public virtual OpenDDS::DCPS::ValueDispatcher_T<flightAuthorizationRequest>
{
public:
  typedef flightAuthorizationRequestTypeSupport TypeSupportType;
  typedef flightAuthorizationRequestTypeSupport::_var_type _var_type;
  typedef flightAuthorizationRequestTypeSupport::_ptr_type _ptr_type;

  flightAuthorizationRequestTypeSupportImpl() {}
  virtual ~flightAuthorizationRequestTypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_SAFETY_PROFILE
  flightAuthorizationRequest* create_sample(::DDS::DynamicData_ptr src);
#endif
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType() const;
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */

  virtual const OpenDDS::XTypes::TypeIdentifier& getMinimalTypeIdentifier() const;
  virtual const OpenDDS::XTypes::TypeMap& getMinimalTypeMap() const;

  virtual const OpenDDS::XTypes::TypeIdentifier& getCompleteTypeIdentifier() const;
  virtual const OpenDDS::XTypes::TypeMap& getCompleteTypeMap() const;

  ::DDS::ReturnCode_t encode_to_string(const flightAuthorizationRequest& in, CORBA::String_out out, OpenDDS::DCPS::RepresentationFormat* format);
  ::DDS::ReturnCode_t encode_to_bytes(const flightAuthorizationRequest& in, ::DDS::OctetSeq_out out, OpenDDS::DCPS::RepresentationFormat* format);
  ::DDS::ReturnCode_t decode_from_string(const char* in, flightAuthorizationRequest_out out, OpenDDS::DCPS::RepresentationFormat* format);
  ::DDS::ReturnCode_t decode_from_bytes(const ::DDS::OctetSeq& in, flightAuthorizationRequest_out out, OpenDDS::DCPS::RepresentationFormat* format);

  static flightAuthorizationRequestTypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};

}
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
UATM_Export
const MetaStruct& getMetaStruct< ::UATM::flightAuthorizationRequest>();
UATM_Export
bool gen_skip_over(Serializer& ser,  ::UATM::flightAuthorizationRequest*);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif // ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace XTypes {

#ifndef OPENDDS_SAFETY_PROFILE
template <>
UATM_Export DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::flightAuthorizationRequest,  ::UATM::flightAuthorizationRequest>(DDS::DynamicType_ptr type, const  ::UATM::flightAuthorizationRequest& value);

template <>
UATM_Export DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::flightAuthorizationRequest,  ::UATM::flightAuthorizationRequest>(DDS::DynamicType_ptr type,  ::UATM::flightAuthorizationRequest& value);

template <>
UATM_Export const  ::UATM::flightAuthorizationRequest* get_dynamic_data_adapter_value< ::UATM::flightAuthorizationRequest,  ::UATM::flightAuthorizationRequest>(DDS::DynamicData_ptr dd);

#endif // ifndef OPENDDS_SAFETY_PROFILE

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End STRUCT: flightAuthorizationRequest */

/* End MODULE: UATM */


/* Begin MODULE: UATM */



/* Begin STRUCT: weatherInfo */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

struct UATM_weatherInfo_xtag {};
template<> UATM_Export
const XTypes::TypeIdentifier& getMinimalTypeIdentifier<UATM_weatherInfo_xtag>();

template<> UATM_Export
const XTypes::TypeMap& getMinimalTypeMap<UATM_weatherInfo_xtag>();

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

UATM_Export
bool vread(OpenDDS::DCPS::ValueReader& value_reader,  ::UATM::weatherInfo& value);

UATM_Export
bool vread(OpenDDS::DCPS::ValueReader& value_reader, const NestedKeyOnly< ::UATM::weatherInfo>& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

UATM_Export
bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const  ::UATM::weatherInfo& value);

UATM_Export
bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const NestedKeyOnly<const  ::UATM::weatherInfo>& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> UATM_Export
void set_default( ::UATM::weatherInfo& stru);

UATM_Export
void serialized_size(const Encoding& encoding, size_t& size, const ::UATM::weatherInfo& stru);

UATM_Export
bool operator<<(Serializer& strm, const ::UATM::weatherInfo& stru);

UATM_Export
bool operator>>(Serializer& strm,  ::UATM::weatherInfo& stru);

UATM_Export
void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const ::UATM::weatherInfo>& stru);

UATM_Export
bool operator<<(Serializer& strm, const NestedKeyOnly<const ::UATM::weatherInfo>& stru);

UATM_Export
bool operator>>(Serializer& strm, const NestedKeyOnly< ::UATM::weatherInfo>& stru);

template <>
struct MarshalTraits< ::UATM::weatherInfo> {
  static void representations_allowed_by_type(DDS::DataRepresentationIdSeq& seq)
  {
    seq.length(4);
    seq[0] = DDS::XCDR_DATA_REPRESENTATION;
    seq[1] = DDS::XCDR2_DATA_REPRESENTATION;
    seq[2] = DDS::XML_DATA_REPRESENTATION;
    seq[3] = OpenDDS::DCPS::UNALIGNED_CDR_DATA_REPRESENTATION;
  }

  static SerializedSizeBound serialized_size_bound(const Encoding& encoding)
  {
    switch (encoding.kind()) {
    case Encoding::KIND_XCDR1:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR2:
      return SerializedSizeBound();
    case Encoding::KIND_UNALIGNED_CDR:
      return SerializedSizeBound(87);
    default:
      OPENDDS_ASSERT(false);
      return SerializedSizeBound();
    }
  }

  static SerializedSizeBound key_only_serialized_size_bound(const Encoding& encoding)
  {
    switch (encoding.kind()) {
    case Encoding::KIND_XCDR1:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR2:
      return SerializedSizeBound();
    case Encoding::KIND_UNALIGNED_CDR:
      return SerializedSizeBound(4);
    default:
      OPENDDS_ASSERT(false);
      return SerializedSizeBound();
    }
  }

  static bool to_message_block(ACE_Message_Block&, const  ::UATM::weatherInfo&) { return false; }
  static bool from_message_block( ::UATM::weatherInfo&, const ACE_Message_Block&) { return false; }
  static Extensibility extensibility() { return APPENDABLE; }
  static Extensibility max_extensibility_level() { return APPENDABLE; }
};
UATM_Export
void serialized_size(const Encoding& encoding, size_t& size, const KeyOnly<const  ::UATM::weatherInfo> stru);

UATM_Export
bool operator<<(Serializer& strm, KeyOnly<const  ::UATM::weatherInfo> stru);

UATM_Export
bool operator>>(Serializer& strm, KeyOnly< ::UATM::weatherInfo> stru);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace UATM {
/// This structure supports use of std::map with one or more keys.
struct UATM_Export weatherInfo_OpenDDS_KeyLessThan {
  bool operator()(const  ::UATM::weatherInfo& v1, const  ::UATM::weatherInfo& v2) const
  {
    using ::operator<; // TAO::String_Manager's operator< is in global NS
    if (v1.weather_id < v2.weather_id) return true;
    if (v2.weather_id < v1.weather_id) return false;
    return false;
  }
};
}

namespace UATM {
class weatherInfoTypeSupportImpl;
}
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace DCPS {
template <>
struct DDSTraits< ::UATM::weatherInfo> {
  typedef  ::UATM::weatherInfo MessageType;
  typedef  ::UATM::weatherInfoSeq MessageSequenceType;
  typedef  ::UATM::weatherInfoSeq::PrivateMemberAccess MessageSequenceAdapterType;
  typedef  ::UATM::weatherInfoTypeSupport TypeSupportType;
  typedef  ::UATM::weatherInfoTypeSupportImpl TypeSupportImplType;
  typedef  ::UATM::weatherInfoDataWriter DataWriterType;
  typedef  ::UATM::weatherInfoDataReader DataReaderType;
  typedef  ::UATM::weatherInfo_OpenDDS_KeyLessThan LessThanType;
  typedef OpenDDS::DCPS::KeyOnly<const  ::UATM::weatherInfo> KeyOnlyType;
  typedef OpenDDS::DCPS::UATM_weatherInfo_xtag XtagType;

  static const char* type_name() { return "UATM::weatherInfo"; }
  static size_t key_count() { return 1; }
  static bool is_key(const char*);
};
} // namespace DCPS
} // namespace OpenDDS
OPENDDS_END_VERSIONED_NAMESPACE_DECL

namespace UATM {
class UATM_Export weatherInfoTypeSupportImpl
  : public virtual OpenDDS::DCPS::TypeSupportImpl_T<weatherInfo>
  , public virtual OpenDDS::DCPS::ValueDispatcher_T<weatherInfo>
{
public:
  typedef weatherInfoTypeSupport TypeSupportType;
  typedef weatherInfoTypeSupport::_var_type _var_type;
  typedef weatherInfoTypeSupport::_ptr_type _ptr_type;

  weatherInfoTypeSupportImpl() {}
  virtual ~weatherInfoTypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_SAFETY_PROFILE
  weatherInfo* create_sample(::DDS::DynamicData_ptr src);
#endif
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType() const;
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */

  virtual const OpenDDS::XTypes::TypeIdentifier& getMinimalTypeIdentifier() const;
  virtual const OpenDDS::XTypes::TypeMap& getMinimalTypeMap() const;

  virtual const OpenDDS::XTypes::TypeIdentifier& getCompleteTypeIdentifier() const;
  virtual const OpenDDS::XTypes::TypeMap& getCompleteTypeMap() const;

  ::DDS::ReturnCode_t encode_to_string(const weatherInfo& in, CORBA::String_out out, OpenDDS::DCPS::RepresentationFormat* format);
  ::DDS::ReturnCode_t encode_to_bytes(const weatherInfo& in, ::DDS::OctetSeq_out out, OpenDDS::DCPS::RepresentationFormat* format);
  ::DDS::ReturnCode_t decode_from_string(const char* in, weatherInfo_out out, OpenDDS::DCPS::RepresentationFormat* format);
  ::DDS::ReturnCode_t decode_from_bytes(const ::DDS::OctetSeq& in, weatherInfo_out out, OpenDDS::DCPS::RepresentationFormat* format);

  static weatherInfoTypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};

}
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
UATM_Export
const MetaStruct& getMetaStruct< ::UATM::weatherInfo>();
UATM_Export
bool gen_skip_over(Serializer& ser,  ::UATM::weatherInfo*);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif // ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace XTypes {

#ifndef OPENDDS_SAFETY_PROFILE
template <>
UATM_Export DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::weatherInfo,  ::UATM::weatherInfo>(DDS::DynamicType_ptr type, const  ::UATM::weatherInfo& value);

template <>
UATM_Export DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::weatherInfo,  ::UATM::weatherInfo>(DDS::DynamicType_ptr type,  ::UATM::weatherInfo& value);

template <>
UATM_Export const  ::UATM::weatherInfo* get_dynamic_data_adapter_value< ::UATM::weatherInfo,  ::UATM::weatherInfo>(DDS::DynamicData_ptr dd);

#endif // ifndef OPENDDS_SAFETY_PROFILE

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End STRUCT: weatherInfo */

/* End MODULE: UATM */


/* Begin MODULE: UATM */



/* Begin STRUCT: flightAssign */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

struct UATM_flightAssign_xtag {};
template<> UATM_Export
const XTypes::TypeIdentifier& getMinimalTypeIdentifier<UATM_flightAssign_xtag>();

template<> UATM_Export
const XTypes::TypeMap& getMinimalTypeMap<UATM_flightAssign_xtag>();

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

UATM_Export
bool vread(OpenDDS::DCPS::ValueReader& value_reader,  ::UATM::flightAssign& value);

UATM_Export
bool vread(OpenDDS::DCPS::ValueReader& value_reader, const NestedKeyOnly< ::UATM::flightAssign>& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

UATM_Export
bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const  ::UATM::flightAssign& value);

UATM_Export
bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const NestedKeyOnly<const  ::UATM::flightAssign>& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> UATM_Export
void set_default( ::UATM::flightAssign& stru);

UATM_Export
void serialized_size(const Encoding& encoding, size_t& size, const ::UATM::flightAssign& stru);

UATM_Export
bool operator<<(Serializer& strm, const ::UATM::flightAssign& stru);

UATM_Export
bool operator>>(Serializer& strm,  ::UATM::flightAssign& stru);

UATM_Export
void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const ::UATM::flightAssign>& stru);

UATM_Export
bool operator<<(Serializer& strm, const NestedKeyOnly<const ::UATM::flightAssign>& stru);

UATM_Export
bool operator>>(Serializer& strm, const NestedKeyOnly< ::UATM::flightAssign>& stru);

template <>
struct MarshalTraits< ::UATM::flightAssign> {
  static void representations_allowed_by_type(DDS::DataRepresentationIdSeq& seq)
  {
    seq.length(4);
    seq[0] = DDS::XCDR_DATA_REPRESENTATION;
    seq[1] = DDS::XCDR2_DATA_REPRESENTATION;
    seq[2] = DDS::XML_DATA_REPRESENTATION;
    seq[3] = OpenDDS::DCPS::UNALIGNED_CDR_DATA_REPRESENTATION;
  }

  static SerializedSizeBound serialized_size_bound(const Encoding& encoding)
  {
    switch (encoding.kind()) {
    case Encoding::KIND_XCDR1:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR2:
      return SerializedSizeBound();
    case Encoding::KIND_UNALIGNED_CDR:
      return SerializedSizeBound(109);
    default:
      OPENDDS_ASSERT(false);
      return SerializedSizeBound();
    }
  }

  static SerializedSizeBound key_only_serialized_size_bound(const Encoding& encoding)
  {
    switch (encoding.kind()) {
    case Encoding::KIND_XCDR1:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR2:
      return SerializedSizeBound();
    case Encoding::KIND_UNALIGNED_CDR:
      return SerializedSizeBound(4);
    default:
      OPENDDS_ASSERT(false);
      return SerializedSizeBound();
    }
  }

  static bool to_message_block(ACE_Message_Block&, const  ::UATM::flightAssign&) { return false; }
  static bool from_message_block( ::UATM::flightAssign&, const ACE_Message_Block&) { return false; }
  static Extensibility extensibility() { return APPENDABLE; }
  static Extensibility max_extensibility_level() { return APPENDABLE; }
};
UATM_Export
void serialized_size(const Encoding& encoding, size_t& size, const KeyOnly<const  ::UATM::flightAssign> stru);

UATM_Export
bool operator<<(Serializer& strm, KeyOnly<const  ::UATM::flightAssign> stru);

UATM_Export
bool operator>>(Serializer& strm, KeyOnly< ::UATM::flightAssign> stru);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace UATM {
/// This structure supports use of std::map with one or more keys.
struct UATM_Export flightAssign_OpenDDS_KeyLessThan {
  bool operator()(const  ::UATM::flightAssign& v1, const  ::UATM::flightAssign& v2) const
  {
    using ::operator<; // TAO::String_Manager's operator< is in global NS
    if (v1.flight_assign_id < v2.flight_assign_id) return true;
    if (v2.flight_assign_id < v1.flight_assign_id) return false;
    return false;
  }
};
}

namespace UATM {
class flightAssignTypeSupportImpl;
}
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace DCPS {
template <>
struct DDSTraits< ::UATM::flightAssign> {
  typedef  ::UATM::flightAssign MessageType;
  typedef  ::UATM::flightAssignSeq MessageSequenceType;
  typedef  ::UATM::flightAssignSeq::PrivateMemberAccess MessageSequenceAdapterType;
  typedef  ::UATM::flightAssignTypeSupport TypeSupportType;
  typedef  ::UATM::flightAssignTypeSupportImpl TypeSupportImplType;
  typedef  ::UATM::flightAssignDataWriter DataWriterType;
  typedef  ::UATM::flightAssignDataReader DataReaderType;
  typedef  ::UATM::flightAssign_OpenDDS_KeyLessThan LessThanType;
  typedef OpenDDS::DCPS::KeyOnly<const  ::UATM::flightAssign> KeyOnlyType;
  typedef OpenDDS::DCPS::UATM_flightAssign_xtag XtagType;

  static const char* type_name() { return "UATM::flightAssign"; }
  static size_t key_count() { return 1; }
  static bool is_key(const char*);
};
} // namespace DCPS
} // namespace OpenDDS
OPENDDS_END_VERSIONED_NAMESPACE_DECL

namespace UATM {
class UATM_Export flightAssignTypeSupportImpl
  : public virtual OpenDDS::DCPS::TypeSupportImpl_T<flightAssign>
  , public virtual OpenDDS::DCPS::ValueDispatcher_T<flightAssign>
{
public:
  typedef flightAssignTypeSupport TypeSupportType;
  typedef flightAssignTypeSupport::_var_type _var_type;
  typedef flightAssignTypeSupport::_ptr_type _ptr_type;

  flightAssignTypeSupportImpl() {}
  virtual ~flightAssignTypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_SAFETY_PROFILE
  flightAssign* create_sample(::DDS::DynamicData_ptr src);
#endif
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType() const;
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */

  virtual const OpenDDS::XTypes::TypeIdentifier& getMinimalTypeIdentifier() const;
  virtual const OpenDDS::XTypes::TypeMap& getMinimalTypeMap() const;

  virtual const OpenDDS::XTypes::TypeIdentifier& getCompleteTypeIdentifier() const;
  virtual const OpenDDS::XTypes::TypeMap& getCompleteTypeMap() const;

  ::DDS::ReturnCode_t encode_to_string(const flightAssign& in, CORBA::String_out out, OpenDDS::DCPS::RepresentationFormat* format);
  ::DDS::ReturnCode_t encode_to_bytes(const flightAssign& in, ::DDS::OctetSeq_out out, OpenDDS::DCPS::RepresentationFormat* format);
  ::DDS::ReturnCode_t decode_from_string(const char* in, flightAssign_out out, OpenDDS::DCPS::RepresentationFormat* format);
  ::DDS::ReturnCode_t decode_from_bytes(const ::DDS::OctetSeq& in, flightAssign_out out, OpenDDS::DCPS::RepresentationFormat* format);

  static flightAssignTypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};

}
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
UATM_Export
const MetaStruct& getMetaStruct< ::UATM::flightAssign>();
UATM_Export
bool gen_skip_over(Serializer& ser,  ::UATM::flightAssign*);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif // ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace XTypes {

#ifndef OPENDDS_SAFETY_PROFILE
template <>
UATM_Export DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::flightAssign,  ::UATM::flightAssign>(DDS::DynamicType_ptr type, const  ::UATM::flightAssign& value);

template <>
UATM_Export DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::flightAssign,  ::UATM::flightAssign>(DDS::DynamicType_ptr type,  ::UATM::flightAssign& value);

template <>
UATM_Export const  ::UATM::flightAssign* get_dynamic_data_adapter_value< ::UATM::flightAssign,  ::UATM::flightAssign>(DDS::DynamicData_ptr dd);

#endif // ifndef OPENDDS_SAFETY_PROFILE

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End STRUCT: flightAssign */

/* End MODULE: UATM */
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif /* OPENDDS_IDL_GENERATED_UATMTYPESUPPORTIMPL_H_V95XRT */
