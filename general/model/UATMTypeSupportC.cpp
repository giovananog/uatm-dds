// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.5.21
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_codegen.cpp:372


#include "UATMTypeSupportC.h"
#include "tao/CDR.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "UATMTypeSupportC.inl"
#endif /* !defined INLINE */
// TAO_IDL - Generated from
// C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_interface\interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for UATM::acceptableRouteTypeSupport.

UATM::acceptableRouteTypeSupport_ptr
TAO::Objref_Traits<UATM::acceptableRouteTypeSupport>::duplicate (
    UATM::acceptableRouteTypeSupport_ptr p)
{
  return UATM::acceptableRouteTypeSupport::_duplicate (p);
}

void
TAO::Objref_Traits<UATM::acceptableRouteTypeSupport>::release (
    UATM::acceptableRouteTypeSupport_ptr p)
{
  ::CORBA::release (p);
}

UATM::acceptableRouteTypeSupport_ptr
TAO::Objref_Traits<UATM::acceptableRouteTypeSupport>::nil (void)
{
  return UATM::acceptableRouteTypeSupport::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<UATM::acceptableRouteTypeSupport>::marshal (
    const UATM::acceptableRouteTypeSupport_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



UATM::acceptableRouteTypeSupport::acceptableRouteTypeSupport (void)
{}

UATM::acceptableRouteTypeSupport::~acceptableRouteTypeSupport (void)
{
}

UATM::acceptableRouteTypeSupport_ptr
UATM::acceptableRouteTypeSupport::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return acceptableRouteTypeSupport::_duplicate (
      dynamic_cast<acceptableRouteTypeSupport_ptr> (_tao_objref));
}

UATM::acceptableRouteTypeSupport_ptr
UATM::acceptableRouteTypeSupport::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return acceptableRouteTypeSupport::_duplicate (
      dynamic_cast<acceptableRouteTypeSupport_ptr> (_tao_objref));
}

UATM::acceptableRouteTypeSupport_ptr
UATM::acceptableRouteTypeSupport::_nil (void)
{
  return 0;
}

UATM::acceptableRouteTypeSupport_ptr
UATM::acceptableRouteTypeSupport::_duplicate (acceptableRouteTypeSupport_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
UATM::acceptableRouteTypeSupport::_tao_release (acceptableRouteTypeSupport_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
UATM::acceptableRouteTypeSupport::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/TypeSupport:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:OpenDDS/DCPS/TypeSupport:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:UATM/acceptableRouteTypeSupport:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* UATM::acceptableRouteTypeSupport::_interface_repository_id (void) const
{
  return "IDL:UATM/acceptableRouteTypeSupport:1.0";
}

::CORBA::Boolean
UATM::acceptableRouteTypeSupport::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_interface\interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for UATM::acceptableRouteDataWriter.

UATM::acceptableRouteDataWriter_ptr
TAO::Objref_Traits<UATM::acceptableRouteDataWriter>::duplicate (
    UATM::acceptableRouteDataWriter_ptr p)
{
  return UATM::acceptableRouteDataWriter::_duplicate (p);
}

void
TAO::Objref_Traits<UATM::acceptableRouteDataWriter>::release (
    UATM::acceptableRouteDataWriter_ptr p)
{
  ::CORBA::release (p);
}

UATM::acceptableRouteDataWriter_ptr
TAO::Objref_Traits<UATM::acceptableRouteDataWriter>::nil (void)
{
  return UATM::acceptableRouteDataWriter::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<UATM::acceptableRouteDataWriter>::marshal (
    const UATM::acceptableRouteDataWriter_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



UATM::acceptableRouteDataWriter::acceptableRouteDataWriter (void)
{}

UATM::acceptableRouteDataWriter::~acceptableRouteDataWriter (void)
{
}

UATM::acceptableRouteDataWriter_ptr
UATM::acceptableRouteDataWriter::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return acceptableRouteDataWriter::_duplicate (
      dynamic_cast<acceptableRouteDataWriter_ptr> (_tao_objref));
}

UATM::acceptableRouteDataWriter_ptr
UATM::acceptableRouteDataWriter::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return acceptableRouteDataWriter::_duplicate (
      dynamic_cast<acceptableRouteDataWriter_ptr> (_tao_objref));
}

UATM::acceptableRouteDataWriter_ptr
UATM::acceptableRouteDataWriter::_nil (void)
{
  return 0;
}

UATM::acceptableRouteDataWriter_ptr
UATM::acceptableRouteDataWriter::_duplicate (acceptableRouteDataWriter_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
UATM::acceptableRouteDataWriter::_tao_release (acceptableRouteDataWriter_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
UATM::acceptableRouteDataWriter::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/Entity:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:DDS/DataWriter:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:UATM/acceptableRouteDataWriter:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* UATM::acceptableRouteDataWriter::_interface_repository_id (void) const
{
  return "IDL:UATM/acceptableRouteDataWriter:1.0";
}

::CORBA::Boolean
UATM::acceptableRouteDataWriter::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_interface\interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for UATM::acceptableRouteDataReader.

UATM::acceptableRouteDataReader_ptr
TAO::Objref_Traits<UATM::acceptableRouteDataReader>::duplicate (
    UATM::acceptableRouteDataReader_ptr p)
{
  return UATM::acceptableRouteDataReader::_duplicate (p);
}

void
TAO::Objref_Traits<UATM::acceptableRouteDataReader>::release (
    UATM::acceptableRouteDataReader_ptr p)
{
  ::CORBA::release (p);
}

UATM::acceptableRouteDataReader_ptr
TAO::Objref_Traits<UATM::acceptableRouteDataReader>::nil (void)
{
  return UATM::acceptableRouteDataReader::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<UATM::acceptableRouteDataReader>::marshal (
    const UATM::acceptableRouteDataReader_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



UATM::acceptableRouteDataReader::acceptableRouteDataReader (void)
{}

UATM::acceptableRouteDataReader::~acceptableRouteDataReader (void)
{
}

UATM::acceptableRouteDataReader_ptr
UATM::acceptableRouteDataReader::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return acceptableRouteDataReader::_duplicate (
      dynamic_cast<acceptableRouteDataReader_ptr> (_tao_objref));
}

UATM::acceptableRouteDataReader_ptr
UATM::acceptableRouteDataReader::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return acceptableRouteDataReader::_duplicate (
      dynamic_cast<acceptableRouteDataReader_ptr> (_tao_objref));
}

UATM::acceptableRouteDataReader_ptr
UATM::acceptableRouteDataReader::_nil (void)
{
  return 0;
}

UATM::acceptableRouteDataReader_ptr
UATM::acceptableRouteDataReader::_duplicate (acceptableRouteDataReader_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
UATM::acceptableRouteDataReader::_tao_release (acceptableRouteDataReader_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
UATM::acceptableRouteDataReader::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/Entity:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:DDS/DataReader:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:OpenDDS/DCPS/DataReaderEx:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:UATM/acceptableRouteDataReader:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* UATM::acceptableRouteDataReader::_interface_repository_id (void) const
{
  return "IDL:UATM/acceptableRouteDataReader:1.0";
}

::CORBA::Boolean
UATM::acceptableRouteDataReader::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_interface\interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for UATM::airspaceRestrictionsTypeSupport.

UATM::airspaceRestrictionsTypeSupport_ptr
TAO::Objref_Traits<UATM::airspaceRestrictionsTypeSupport>::duplicate (
    UATM::airspaceRestrictionsTypeSupport_ptr p)
{
  return UATM::airspaceRestrictionsTypeSupport::_duplicate (p);
}

void
TAO::Objref_Traits<UATM::airspaceRestrictionsTypeSupport>::release (
    UATM::airspaceRestrictionsTypeSupport_ptr p)
{
  ::CORBA::release (p);
}

UATM::airspaceRestrictionsTypeSupport_ptr
TAO::Objref_Traits<UATM::airspaceRestrictionsTypeSupport>::nil (void)
{
  return UATM::airspaceRestrictionsTypeSupport::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<UATM::airspaceRestrictionsTypeSupport>::marshal (
    const UATM::airspaceRestrictionsTypeSupport_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



UATM::airspaceRestrictionsTypeSupport::airspaceRestrictionsTypeSupport (void)
{}

UATM::airspaceRestrictionsTypeSupport::~airspaceRestrictionsTypeSupport (void)
{
}

UATM::airspaceRestrictionsTypeSupport_ptr
UATM::airspaceRestrictionsTypeSupport::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return airspaceRestrictionsTypeSupport::_duplicate (
      dynamic_cast<airspaceRestrictionsTypeSupport_ptr> (_tao_objref));
}

UATM::airspaceRestrictionsTypeSupport_ptr
UATM::airspaceRestrictionsTypeSupport::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return airspaceRestrictionsTypeSupport::_duplicate (
      dynamic_cast<airspaceRestrictionsTypeSupport_ptr> (_tao_objref));
}

UATM::airspaceRestrictionsTypeSupport_ptr
UATM::airspaceRestrictionsTypeSupport::_nil (void)
{
  return 0;
}

UATM::airspaceRestrictionsTypeSupport_ptr
UATM::airspaceRestrictionsTypeSupport::_duplicate (airspaceRestrictionsTypeSupport_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
UATM::airspaceRestrictionsTypeSupport::_tao_release (airspaceRestrictionsTypeSupport_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
UATM::airspaceRestrictionsTypeSupport::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/TypeSupport:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:OpenDDS/DCPS/TypeSupport:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:UATM/airspaceRestrictionsTypeSupport:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* UATM::airspaceRestrictionsTypeSupport::_interface_repository_id (void) const
{
  return "IDL:UATM/airspaceRestrictionsTypeSupport:1.0";
}

::CORBA::Boolean
UATM::airspaceRestrictionsTypeSupport::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_interface\interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for UATM::airspaceRestrictionsDataWriter.

UATM::airspaceRestrictionsDataWriter_ptr
TAO::Objref_Traits<UATM::airspaceRestrictionsDataWriter>::duplicate (
    UATM::airspaceRestrictionsDataWriter_ptr p)
{
  return UATM::airspaceRestrictionsDataWriter::_duplicate (p);
}

void
TAO::Objref_Traits<UATM::airspaceRestrictionsDataWriter>::release (
    UATM::airspaceRestrictionsDataWriter_ptr p)
{
  ::CORBA::release (p);
}

UATM::airspaceRestrictionsDataWriter_ptr
TAO::Objref_Traits<UATM::airspaceRestrictionsDataWriter>::nil (void)
{
  return UATM::airspaceRestrictionsDataWriter::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<UATM::airspaceRestrictionsDataWriter>::marshal (
    const UATM::airspaceRestrictionsDataWriter_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



UATM::airspaceRestrictionsDataWriter::airspaceRestrictionsDataWriter (void)
{}

UATM::airspaceRestrictionsDataWriter::~airspaceRestrictionsDataWriter (void)
{
}

UATM::airspaceRestrictionsDataWriter_ptr
UATM::airspaceRestrictionsDataWriter::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return airspaceRestrictionsDataWriter::_duplicate (
      dynamic_cast<airspaceRestrictionsDataWriter_ptr> (_tao_objref));
}

UATM::airspaceRestrictionsDataWriter_ptr
UATM::airspaceRestrictionsDataWriter::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return airspaceRestrictionsDataWriter::_duplicate (
      dynamic_cast<airspaceRestrictionsDataWriter_ptr> (_tao_objref));
}

UATM::airspaceRestrictionsDataWriter_ptr
UATM::airspaceRestrictionsDataWriter::_nil (void)
{
  return 0;
}

UATM::airspaceRestrictionsDataWriter_ptr
UATM::airspaceRestrictionsDataWriter::_duplicate (airspaceRestrictionsDataWriter_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
UATM::airspaceRestrictionsDataWriter::_tao_release (airspaceRestrictionsDataWriter_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
UATM::airspaceRestrictionsDataWriter::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/Entity:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:DDS/DataWriter:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:UATM/airspaceRestrictionsDataWriter:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* UATM::airspaceRestrictionsDataWriter::_interface_repository_id (void) const
{
  return "IDL:UATM/airspaceRestrictionsDataWriter:1.0";
}

::CORBA::Boolean
UATM::airspaceRestrictionsDataWriter::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_interface\interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for UATM::airspaceRestrictionsDataReader.

UATM::airspaceRestrictionsDataReader_ptr
TAO::Objref_Traits<UATM::airspaceRestrictionsDataReader>::duplicate (
    UATM::airspaceRestrictionsDataReader_ptr p)
{
  return UATM::airspaceRestrictionsDataReader::_duplicate (p);
}

void
TAO::Objref_Traits<UATM::airspaceRestrictionsDataReader>::release (
    UATM::airspaceRestrictionsDataReader_ptr p)
{
  ::CORBA::release (p);
}

UATM::airspaceRestrictionsDataReader_ptr
TAO::Objref_Traits<UATM::airspaceRestrictionsDataReader>::nil (void)
{
  return UATM::airspaceRestrictionsDataReader::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<UATM::airspaceRestrictionsDataReader>::marshal (
    const UATM::airspaceRestrictionsDataReader_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



UATM::airspaceRestrictionsDataReader::airspaceRestrictionsDataReader (void)
{}

UATM::airspaceRestrictionsDataReader::~airspaceRestrictionsDataReader (void)
{
}

UATM::airspaceRestrictionsDataReader_ptr
UATM::airspaceRestrictionsDataReader::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return airspaceRestrictionsDataReader::_duplicate (
      dynamic_cast<airspaceRestrictionsDataReader_ptr> (_tao_objref));
}

UATM::airspaceRestrictionsDataReader_ptr
UATM::airspaceRestrictionsDataReader::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return airspaceRestrictionsDataReader::_duplicate (
      dynamic_cast<airspaceRestrictionsDataReader_ptr> (_tao_objref));
}

UATM::airspaceRestrictionsDataReader_ptr
UATM::airspaceRestrictionsDataReader::_nil (void)
{
  return 0;
}

UATM::airspaceRestrictionsDataReader_ptr
UATM::airspaceRestrictionsDataReader::_duplicate (airspaceRestrictionsDataReader_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
UATM::airspaceRestrictionsDataReader::_tao_release (airspaceRestrictionsDataReader_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
UATM::airspaceRestrictionsDataReader::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/Entity:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:DDS/DataReader:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:OpenDDS/DCPS/DataReaderEx:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:UATM/airspaceRestrictionsDataReader:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* UATM::airspaceRestrictionsDataReader::_interface_repository_id (void) const
{
  return "IDL:UATM/airspaceRestrictionsDataReader:1.0";
}

::CORBA::Boolean
UATM::airspaceRestrictionsDataReader::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_interface\interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for UATM::availabilityInfoTypeSupport.

UATM::availabilityInfoTypeSupport_ptr
TAO::Objref_Traits<UATM::availabilityInfoTypeSupport>::duplicate (
    UATM::availabilityInfoTypeSupport_ptr p)
{
  return UATM::availabilityInfoTypeSupport::_duplicate (p);
}

void
TAO::Objref_Traits<UATM::availabilityInfoTypeSupport>::release (
    UATM::availabilityInfoTypeSupport_ptr p)
{
  ::CORBA::release (p);
}

UATM::availabilityInfoTypeSupport_ptr
TAO::Objref_Traits<UATM::availabilityInfoTypeSupport>::nil (void)
{
  return UATM::availabilityInfoTypeSupport::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<UATM::availabilityInfoTypeSupport>::marshal (
    const UATM::availabilityInfoTypeSupport_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



UATM::availabilityInfoTypeSupport::availabilityInfoTypeSupport (void)
{}

UATM::availabilityInfoTypeSupport::~availabilityInfoTypeSupport (void)
{
}

UATM::availabilityInfoTypeSupport_ptr
UATM::availabilityInfoTypeSupport::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return availabilityInfoTypeSupport::_duplicate (
      dynamic_cast<availabilityInfoTypeSupport_ptr> (_tao_objref));
}

UATM::availabilityInfoTypeSupport_ptr
UATM::availabilityInfoTypeSupport::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return availabilityInfoTypeSupport::_duplicate (
      dynamic_cast<availabilityInfoTypeSupport_ptr> (_tao_objref));
}

UATM::availabilityInfoTypeSupport_ptr
UATM::availabilityInfoTypeSupport::_nil (void)
{
  return 0;
}

UATM::availabilityInfoTypeSupport_ptr
UATM::availabilityInfoTypeSupport::_duplicate (availabilityInfoTypeSupport_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
UATM::availabilityInfoTypeSupport::_tao_release (availabilityInfoTypeSupport_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
UATM::availabilityInfoTypeSupport::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/TypeSupport:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:OpenDDS/DCPS/TypeSupport:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:UATM/availabilityInfoTypeSupport:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* UATM::availabilityInfoTypeSupport::_interface_repository_id (void) const
{
  return "IDL:UATM/availabilityInfoTypeSupport:1.0";
}

::CORBA::Boolean
UATM::availabilityInfoTypeSupport::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_interface\interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for UATM::availabilityInfoDataWriter.

UATM::availabilityInfoDataWriter_ptr
TAO::Objref_Traits<UATM::availabilityInfoDataWriter>::duplicate (
    UATM::availabilityInfoDataWriter_ptr p)
{
  return UATM::availabilityInfoDataWriter::_duplicate (p);
}

void
TAO::Objref_Traits<UATM::availabilityInfoDataWriter>::release (
    UATM::availabilityInfoDataWriter_ptr p)
{
  ::CORBA::release (p);
}

UATM::availabilityInfoDataWriter_ptr
TAO::Objref_Traits<UATM::availabilityInfoDataWriter>::nil (void)
{
  return UATM::availabilityInfoDataWriter::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<UATM::availabilityInfoDataWriter>::marshal (
    const UATM::availabilityInfoDataWriter_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



UATM::availabilityInfoDataWriter::availabilityInfoDataWriter (void)
{}

UATM::availabilityInfoDataWriter::~availabilityInfoDataWriter (void)
{
}

UATM::availabilityInfoDataWriter_ptr
UATM::availabilityInfoDataWriter::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return availabilityInfoDataWriter::_duplicate (
      dynamic_cast<availabilityInfoDataWriter_ptr> (_tao_objref));
}

UATM::availabilityInfoDataWriter_ptr
UATM::availabilityInfoDataWriter::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return availabilityInfoDataWriter::_duplicate (
      dynamic_cast<availabilityInfoDataWriter_ptr> (_tao_objref));
}

UATM::availabilityInfoDataWriter_ptr
UATM::availabilityInfoDataWriter::_nil (void)
{
  return 0;
}

UATM::availabilityInfoDataWriter_ptr
UATM::availabilityInfoDataWriter::_duplicate (availabilityInfoDataWriter_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
UATM::availabilityInfoDataWriter::_tao_release (availabilityInfoDataWriter_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
UATM::availabilityInfoDataWriter::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/Entity:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:DDS/DataWriter:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:UATM/availabilityInfoDataWriter:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* UATM::availabilityInfoDataWriter::_interface_repository_id (void) const
{
  return "IDL:UATM/availabilityInfoDataWriter:1.0";
}

::CORBA::Boolean
UATM::availabilityInfoDataWriter::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_interface\interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for UATM::availabilityInfoDataReader.

UATM::availabilityInfoDataReader_ptr
TAO::Objref_Traits<UATM::availabilityInfoDataReader>::duplicate (
    UATM::availabilityInfoDataReader_ptr p)
{
  return UATM::availabilityInfoDataReader::_duplicate (p);
}

void
TAO::Objref_Traits<UATM::availabilityInfoDataReader>::release (
    UATM::availabilityInfoDataReader_ptr p)
{
  ::CORBA::release (p);
}

UATM::availabilityInfoDataReader_ptr
TAO::Objref_Traits<UATM::availabilityInfoDataReader>::nil (void)
{
  return UATM::availabilityInfoDataReader::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<UATM::availabilityInfoDataReader>::marshal (
    const UATM::availabilityInfoDataReader_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



UATM::availabilityInfoDataReader::availabilityInfoDataReader (void)
{}

UATM::availabilityInfoDataReader::~availabilityInfoDataReader (void)
{
}

UATM::availabilityInfoDataReader_ptr
UATM::availabilityInfoDataReader::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return availabilityInfoDataReader::_duplicate (
      dynamic_cast<availabilityInfoDataReader_ptr> (_tao_objref));
}

UATM::availabilityInfoDataReader_ptr
UATM::availabilityInfoDataReader::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return availabilityInfoDataReader::_duplicate (
      dynamic_cast<availabilityInfoDataReader_ptr> (_tao_objref));
}

UATM::availabilityInfoDataReader_ptr
UATM::availabilityInfoDataReader::_nil (void)
{
  return 0;
}

UATM::availabilityInfoDataReader_ptr
UATM::availabilityInfoDataReader::_duplicate (availabilityInfoDataReader_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
UATM::availabilityInfoDataReader::_tao_release (availabilityInfoDataReader_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
UATM::availabilityInfoDataReader::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/Entity:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:DDS/DataReader:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:OpenDDS/DCPS/DataReaderEx:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:UATM/availabilityInfoDataReader:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* UATM::availabilityInfoDataReader::_interface_repository_id (void) const
{
  return "IDL:UATM/availabilityInfoDataReader:1.0";
}

::CORBA::Boolean
UATM::availabilityInfoDataReader::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_interface\interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for UATM::bookingFlightRequestTypeSupport.

UATM::bookingFlightRequestTypeSupport_ptr
TAO::Objref_Traits<UATM::bookingFlightRequestTypeSupport>::duplicate (
    UATM::bookingFlightRequestTypeSupport_ptr p)
{
  return UATM::bookingFlightRequestTypeSupport::_duplicate (p);
}

void
TAO::Objref_Traits<UATM::bookingFlightRequestTypeSupport>::release (
    UATM::bookingFlightRequestTypeSupport_ptr p)
{
  ::CORBA::release (p);
}

UATM::bookingFlightRequestTypeSupport_ptr
TAO::Objref_Traits<UATM::bookingFlightRequestTypeSupport>::nil (void)
{
  return UATM::bookingFlightRequestTypeSupport::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<UATM::bookingFlightRequestTypeSupport>::marshal (
    const UATM::bookingFlightRequestTypeSupport_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



UATM::bookingFlightRequestTypeSupport::bookingFlightRequestTypeSupport (void)
{}

UATM::bookingFlightRequestTypeSupport::~bookingFlightRequestTypeSupport (void)
{
}

UATM::bookingFlightRequestTypeSupport_ptr
UATM::bookingFlightRequestTypeSupport::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return bookingFlightRequestTypeSupport::_duplicate (
      dynamic_cast<bookingFlightRequestTypeSupport_ptr> (_tao_objref));
}

UATM::bookingFlightRequestTypeSupport_ptr
UATM::bookingFlightRequestTypeSupport::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return bookingFlightRequestTypeSupport::_duplicate (
      dynamic_cast<bookingFlightRequestTypeSupport_ptr> (_tao_objref));
}

UATM::bookingFlightRequestTypeSupport_ptr
UATM::bookingFlightRequestTypeSupport::_nil (void)
{
  return 0;
}

UATM::bookingFlightRequestTypeSupport_ptr
UATM::bookingFlightRequestTypeSupport::_duplicate (bookingFlightRequestTypeSupport_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
UATM::bookingFlightRequestTypeSupport::_tao_release (bookingFlightRequestTypeSupport_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
UATM::bookingFlightRequestTypeSupport::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/TypeSupport:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:OpenDDS/DCPS/TypeSupport:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:UATM/bookingFlightRequestTypeSupport:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* UATM::bookingFlightRequestTypeSupport::_interface_repository_id (void) const
{
  return "IDL:UATM/bookingFlightRequestTypeSupport:1.0";
}

::CORBA::Boolean
UATM::bookingFlightRequestTypeSupport::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_interface\interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for UATM::bookingFlightRequestDataWriter.

UATM::bookingFlightRequestDataWriter_ptr
TAO::Objref_Traits<UATM::bookingFlightRequestDataWriter>::duplicate (
    UATM::bookingFlightRequestDataWriter_ptr p)
{
  return UATM::bookingFlightRequestDataWriter::_duplicate (p);
}

void
TAO::Objref_Traits<UATM::bookingFlightRequestDataWriter>::release (
    UATM::bookingFlightRequestDataWriter_ptr p)
{
  ::CORBA::release (p);
}

UATM::bookingFlightRequestDataWriter_ptr
TAO::Objref_Traits<UATM::bookingFlightRequestDataWriter>::nil (void)
{
  return UATM::bookingFlightRequestDataWriter::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<UATM::bookingFlightRequestDataWriter>::marshal (
    const UATM::bookingFlightRequestDataWriter_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



UATM::bookingFlightRequestDataWriter::bookingFlightRequestDataWriter (void)
{}

UATM::bookingFlightRequestDataWriter::~bookingFlightRequestDataWriter (void)
{
}

UATM::bookingFlightRequestDataWriter_ptr
UATM::bookingFlightRequestDataWriter::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return bookingFlightRequestDataWriter::_duplicate (
      dynamic_cast<bookingFlightRequestDataWriter_ptr> (_tao_objref));
}

UATM::bookingFlightRequestDataWriter_ptr
UATM::bookingFlightRequestDataWriter::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return bookingFlightRequestDataWriter::_duplicate (
      dynamic_cast<bookingFlightRequestDataWriter_ptr> (_tao_objref));
}

UATM::bookingFlightRequestDataWriter_ptr
UATM::bookingFlightRequestDataWriter::_nil (void)
{
  return 0;
}

UATM::bookingFlightRequestDataWriter_ptr
UATM::bookingFlightRequestDataWriter::_duplicate (bookingFlightRequestDataWriter_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
UATM::bookingFlightRequestDataWriter::_tao_release (bookingFlightRequestDataWriter_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
UATM::bookingFlightRequestDataWriter::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/Entity:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:DDS/DataWriter:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:UATM/bookingFlightRequestDataWriter:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* UATM::bookingFlightRequestDataWriter::_interface_repository_id (void) const
{
  return "IDL:UATM/bookingFlightRequestDataWriter:1.0";
}

::CORBA::Boolean
UATM::bookingFlightRequestDataWriter::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_interface\interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for UATM::bookingFlightRequestDataReader.

UATM::bookingFlightRequestDataReader_ptr
TAO::Objref_Traits<UATM::bookingFlightRequestDataReader>::duplicate (
    UATM::bookingFlightRequestDataReader_ptr p)
{
  return UATM::bookingFlightRequestDataReader::_duplicate (p);
}

void
TAO::Objref_Traits<UATM::bookingFlightRequestDataReader>::release (
    UATM::bookingFlightRequestDataReader_ptr p)
{
  ::CORBA::release (p);
}

UATM::bookingFlightRequestDataReader_ptr
TAO::Objref_Traits<UATM::bookingFlightRequestDataReader>::nil (void)
{
  return UATM::bookingFlightRequestDataReader::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<UATM::bookingFlightRequestDataReader>::marshal (
    const UATM::bookingFlightRequestDataReader_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



UATM::bookingFlightRequestDataReader::bookingFlightRequestDataReader (void)
{}

UATM::bookingFlightRequestDataReader::~bookingFlightRequestDataReader (void)
{
}

UATM::bookingFlightRequestDataReader_ptr
UATM::bookingFlightRequestDataReader::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return bookingFlightRequestDataReader::_duplicate (
      dynamic_cast<bookingFlightRequestDataReader_ptr> (_tao_objref));
}

UATM::bookingFlightRequestDataReader_ptr
UATM::bookingFlightRequestDataReader::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return bookingFlightRequestDataReader::_duplicate (
      dynamic_cast<bookingFlightRequestDataReader_ptr> (_tao_objref));
}

UATM::bookingFlightRequestDataReader_ptr
UATM::bookingFlightRequestDataReader::_nil (void)
{
  return 0;
}

UATM::bookingFlightRequestDataReader_ptr
UATM::bookingFlightRequestDataReader::_duplicate (bookingFlightRequestDataReader_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
UATM::bookingFlightRequestDataReader::_tao_release (bookingFlightRequestDataReader_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
UATM::bookingFlightRequestDataReader::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/Entity:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:DDS/DataReader:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:OpenDDS/DCPS/DataReaderEx:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:UATM/bookingFlightRequestDataReader:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* UATM::bookingFlightRequestDataReader::_interface_repository_id (void) const
{
  return "IDL:UATM/bookingFlightRequestDataReader:1.0";
}

::CORBA::Boolean
UATM::bookingFlightRequestDataReader::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_interface\interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for UATM::flightAuthorizationTypeSupport.

UATM::flightAuthorizationTypeSupport_ptr
TAO::Objref_Traits<UATM::flightAuthorizationTypeSupport>::duplicate (
    UATM::flightAuthorizationTypeSupport_ptr p)
{
  return UATM::flightAuthorizationTypeSupport::_duplicate (p);
}

void
TAO::Objref_Traits<UATM::flightAuthorizationTypeSupport>::release (
    UATM::flightAuthorizationTypeSupport_ptr p)
{
  ::CORBA::release (p);
}

UATM::flightAuthorizationTypeSupport_ptr
TAO::Objref_Traits<UATM::flightAuthorizationTypeSupport>::nil (void)
{
  return UATM::flightAuthorizationTypeSupport::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<UATM::flightAuthorizationTypeSupport>::marshal (
    const UATM::flightAuthorizationTypeSupport_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



UATM::flightAuthorizationTypeSupport::flightAuthorizationTypeSupport (void)
{}

UATM::flightAuthorizationTypeSupport::~flightAuthorizationTypeSupport (void)
{
}

UATM::flightAuthorizationTypeSupport_ptr
UATM::flightAuthorizationTypeSupport::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return flightAuthorizationTypeSupport::_duplicate (
      dynamic_cast<flightAuthorizationTypeSupport_ptr> (_tao_objref));
}

UATM::flightAuthorizationTypeSupport_ptr
UATM::flightAuthorizationTypeSupport::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return flightAuthorizationTypeSupport::_duplicate (
      dynamic_cast<flightAuthorizationTypeSupport_ptr> (_tao_objref));
}

UATM::flightAuthorizationTypeSupport_ptr
UATM::flightAuthorizationTypeSupport::_nil (void)
{
  return 0;
}

UATM::flightAuthorizationTypeSupport_ptr
UATM::flightAuthorizationTypeSupport::_duplicate (flightAuthorizationTypeSupport_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
UATM::flightAuthorizationTypeSupport::_tao_release (flightAuthorizationTypeSupport_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
UATM::flightAuthorizationTypeSupport::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/TypeSupport:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:OpenDDS/DCPS/TypeSupport:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:UATM/flightAuthorizationTypeSupport:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* UATM::flightAuthorizationTypeSupport::_interface_repository_id (void) const
{
  return "IDL:UATM/flightAuthorizationTypeSupport:1.0";
}

::CORBA::Boolean
UATM::flightAuthorizationTypeSupport::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_interface\interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for UATM::flightAuthorizationDataWriter.

UATM::flightAuthorizationDataWriter_ptr
TAO::Objref_Traits<UATM::flightAuthorizationDataWriter>::duplicate (
    UATM::flightAuthorizationDataWriter_ptr p)
{
  return UATM::flightAuthorizationDataWriter::_duplicate (p);
}

void
TAO::Objref_Traits<UATM::flightAuthorizationDataWriter>::release (
    UATM::flightAuthorizationDataWriter_ptr p)
{
  ::CORBA::release (p);
}

UATM::flightAuthorizationDataWriter_ptr
TAO::Objref_Traits<UATM::flightAuthorizationDataWriter>::nil (void)
{
  return UATM::flightAuthorizationDataWriter::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<UATM::flightAuthorizationDataWriter>::marshal (
    const UATM::flightAuthorizationDataWriter_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



UATM::flightAuthorizationDataWriter::flightAuthorizationDataWriter (void)
{}

UATM::flightAuthorizationDataWriter::~flightAuthorizationDataWriter (void)
{
}

UATM::flightAuthorizationDataWriter_ptr
UATM::flightAuthorizationDataWriter::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return flightAuthorizationDataWriter::_duplicate (
      dynamic_cast<flightAuthorizationDataWriter_ptr> (_tao_objref));
}

UATM::flightAuthorizationDataWriter_ptr
UATM::flightAuthorizationDataWriter::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return flightAuthorizationDataWriter::_duplicate (
      dynamic_cast<flightAuthorizationDataWriter_ptr> (_tao_objref));
}

UATM::flightAuthorizationDataWriter_ptr
UATM::flightAuthorizationDataWriter::_nil (void)
{
  return 0;
}

UATM::flightAuthorizationDataWriter_ptr
UATM::flightAuthorizationDataWriter::_duplicate (flightAuthorizationDataWriter_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
UATM::flightAuthorizationDataWriter::_tao_release (flightAuthorizationDataWriter_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
UATM::flightAuthorizationDataWriter::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/Entity:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:DDS/DataWriter:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:UATM/flightAuthorizationDataWriter:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* UATM::flightAuthorizationDataWriter::_interface_repository_id (void) const
{
  return "IDL:UATM/flightAuthorizationDataWriter:1.0";
}

::CORBA::Boolean
UATM::flightAuthorizationDataWriter::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_interface\interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for UATM::flightAuthorizationDataReader.

UATM::flightAuthorizationDataReader_ptr
TAO::Objref_Traits<UATM::flightAuthorizationDataReader>::duplicate (
    UATM::flightAuthorizationDataReader_ptr p)
{
  return UATM::flightAuthorizationDataReader::_duplicate (p);
}

void
TAO::Objref_Traits<UATM::flightAuthorizationDataReader>::release (
    UATM::flightAuthorizationDataReader_ptr p)
{
  ::CORBA::release (p);
}

UATM::flightAuthorizationDataReader_ptr
TAO::Objref_Traits<UATM::flightAuthorizationDataReader>::nil (void)
{
  return UATM::flightAuthorizationDataReader::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<UATM::flightAuthorizationDataReader>::marshal (
    const UATM::flightAuthorizationDataReader_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



UATM::flightAuthorizationDataReader::flightAuthorizationDataReader (void)
{}

UATM::flightAuthorizationDataReader::~flightAuthorizationDataReader (void)
{
}

UATM::flightAuthorizationDataReader_ptr
UATM::flightAuthorizationDataReader::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return flightAuthorizationDataReader::_duplicate (
      dynamic_cast<flightAuthorizationDataReader_ptr> (_tao_objref));
}

UATM::flightAuthorizationDataReader_ptr
UATM::flightAuthorizationDataReader::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return flightAuthorizationDataReader::_duplicate (
      dynamic_cast<flightAuthorizationDataReader_ptr> (_tao_objref));
}

UATM::flightAuthorizationDataReader_ptr
UATM::flightAuthorizationDataReader::_nil (void)
{
  return 0;
}

UATM::flightAuthorizationDataReader_ptr
UATM::flightAuthorizationDataReader::_duplicate (flightAuthorizationDataReader_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
UATM::flightAuthorizationDataReader::_tao_release (flightAuthorizationDataReader_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
UATM::flightAuthorizationDataReader::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/Entity:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:DDS/DataReader:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:OpenDDS/DCPS/DataReaderEx:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:UATM/flightAuthorizationDataReader:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* UATM::flightAuthorizationDataReader::_interface_repository_id (void) const
{
  return "IDL:UATM/flightAuthorizationDataReader:1.0";
}

::CORBA::Boolean
UATM::flightAuthorizationDataReader::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_interface\interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for UATM::flightChanceRecTypeSupport.

UATM::flightChanceRecTypeSupport_ptr
TAO::Objref_Traits<UATM::flightChanceRecTypeSupport>::duplicate (
    UATM::flightChanceRecTypeSupport_ptr p)
{
  return UATM::flightChanceRecTypeSupport::_duplicate (p);
}

void
TAO::Objref_Traits<UATM::flightChanceRecTypeSupport>::release (
    UATM::flightChanceRecTypeSupport_ptr p)
{
  ::CORBA::release (p);
}

UATM::flightChanceRecTypeSupport_ptr
TAO::Objref_Traits<UATM::flightChanceRecTypeSupport>::nil (void)
{
  return UATM::flightChanceRecTypeSupport::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<UATM::flightChanceRecTypeSupport>::marshal (
    const UATM::flightChanceRecTypeSupport_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



UATM::flightChanceRecTypeSupport::flightChanceRecTypeSupport (void)
{}

UATM::flightChanceRecTypeSupport::~flightChanceRecTypeSupport (void)
{
}

UATM::flightChanceRecTypeSupport_ptr
UATM::flightChanceRecTypeSupport::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return flightChanceRecTypeSupport::_duplicate (
      dynamic_cast<flightChanceRecTypeSupport_ptr> (_tao_objref));
}

UATM::flightChanceRecTypeSupport_ptr
UATM::flightChanceRecTypeSupport::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return flightChanceRecTypeSupport::_duplicate (
      dynamic_cast<flightChanceRecTypeSupport_ptr> (_tao_objref));
}

UATM::flightChanceRecTypeSupport_ptr
UATM::flightChanceRecTypeSupport::_nil (void)
{
  return 0;
}

UATM::flightChanceRecTypeSupport_ptr
UATM::flightChanceRecTypeSupport::_duplicate (flightChanceRecTypeSupport_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
UATM::flightChanceRecTypeSupport::_tao_release (flightChanceRecTypeSupport_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
UATM::flightChanceRecTypeSupport::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/TypeSupport:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:OpenDDS/DCPS/TypeSupport:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:UATM/flightChanceRecTypeSupport:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* UATM::flightChanceRecTypeSupport::_interface_repository_id (void) const
{
  return "IDL:UATM/flightChanceRecTypeSupport:1.0";
}

::CORBA::Boolean
UATM::flightChanceRecTypeSupport::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_interface\interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for UATM::flightChanceRecDataWriter.

UATM::flightChanceRecDataWriter_ptr
TAO::Objref_Traits<UATM::flightChanceRecDataWriter>::duplicate (
    UATM::flightChanceRecDataWriter_ptr p)
{
  return UATM::flightChanceRecDataWriter::_duplicate (p);
}

void
TAO::Objref_Traits<UATM::flightChanceRecDataWriter>::release (
    UATM::flightChanceRecDataWriter_ptr p)
{
  ::CORBA::release (p);
}

UATM::flightChanceRecDataWriter_ptr
TAO::Objref_Traits<UATM::flightChanceRecDataWriter>::nil (void)
{
  return UATM::flightChanceRecDataWriter::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<UATM::flightChanceRecDataWriter>::marshal (
    const UATM::flightChanceRecDataWriter_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



UATM::flightChanceRecDataWriter::flightChanceRecDataWriter (void)
{}

UATM::flightChanceRecDataWriter::~flightChanceRecDataWriter (void)
{
}

UATM::flightChanceRecDataWriter_ptr
UATM::flightChanceRecDataWriter::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return flightChanceRecDataWriter::_duplicate (
      dynamic_cast<flightChanceRecDataWriter_ptr> (_tao_objref));
}

UATM::flightChanceRecDataWriter_ptr
UATM::flightChanceRecDataWriter::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return flightChanceRecDataWriter::_duplicate (
      dynamic_cast<flightChanceRecDataWriter_ptr> (_tao_objref));
}

UATM::flightChanceRecDataWriter_ptr
UATM::flightChanceRecDataWriter::_nil (void)
{
  return 0;
}

UATM::flightChanceRecDataWriter_ptr
UATM::flightChanceRecDataWriter::_duplicate (flightChanceRecDataWriter_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
UATM::flightChanceRecDataWriter::_tao_release (flightChanceRecDataWriter_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
UATM::flightChanceRecDataWriter::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/Entity:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:DDS/DataWriter:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:UATM/flightChanceRecDataWriter:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* UATM::flightChanceRecDataWriter::_interface_repository_id (void) const
{
  return "IDL:UATM/flightChanceRecDataWriter:1.0";
}

::CORBA::Boolean
UATM::flightChanceRecDataWriter::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_interface\interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for UATM::flightChanceRecDataReader.

UATM::flightChanceRecDataReader_ptr
TAO::Objref_Traits<UATM::flightChanceRecDataReader>::duplicate (
    UATM::flightChanceRecDataReader_ptr p)
{
  return UATM::flightChanceRecDataReader::_duplicate (p);
}

void
TAO::Objref_Traits<UATM::flightChanceRecDataReader>::release (
    UATM::flightChanceRecDataReader_ptr p)
{
  ::CORBA::release (p);
}

UATM::flightChanceRecDataReader_ptr
TAO::Objref_Traits<UATM::flightChanceRecDataReader>::nil (void)
{
  return UATM::flightChanceRecDataReader::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<UATM::flightChanceRecDataReader>::marshal (
    const UATM::flightChanceRecDataReader_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



UATM::flightChanceRecDataReader::flightChanceRecDataReader (void)
{}

UATM::flightChanceRecDataReader::~flightChanceRecDataReader (void)
{
}

UATM::flightChanceRecDataReader_ptr
UATM::flightChanceRecDataReader::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return flightChanceRecDataReader::_duplicate (
      dynamic_cast<flightChanceRecDataReader_ptr> (_tao_objref));
}

UATM::flightChanceRecDataReader_ptr
UATM::flightChanceRecDataReader::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return flightChanceRecDataReader::_duplicate (
      dynamic_cast<flightChanceRecDataReader_ptr> (_tao_objref));
}

UATM::flightChanceRecDataReader_ptr
UATM::flightChanceRecDataReader::_nil (void)
{
  return 0;
}

UATM::flightChanceRecDataReader_ptr
UATM::flightChanceRecDataReader::_duplicate (flightChanceRecDataReader_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
UATM::flightChanceRecDataReader::_tao_release (flightChanceRecDataReader_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
UATM::flightChanceRecDataReader::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/Entity:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:DDS/DataReader:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:OpenDDS/DCPS/DataReaderEx:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:UATM/flightChanceRecDataReader:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* UATM::flightChanceRecDataReader::_interface_repository_id (void) const
{
  return "IDL:UATM/flightChanceRecDataReader:1.0";
}

::CORBA::Boolean
UATM::flightChanceRecDataReader::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_interface\interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for UATM::flightCoordinationTypeSupport.

UATM::flightCoordinationTypeSupport_ptr
TAO::Objref_Traits<UATM::flightCoordinationTypeSupport>::duplicate (
    UATM::flightCoordinationTypeSupport_ptr p)
{
  return UATM::flightCoordinationTypeSupport::_duplicate (p);
}

void
TAO::Objref_Traits<UATM::flightCoordinationTypeSupport>::release (
    UATM::flightCoordinationTypeSupport_ptr p)
{
  ::CORBA::release (p);
}

UATM::flightCoordinationTypeSupport_ptr
TAO::Objref_Traits<UATM::flightCoordinationTypeSupport>::nil (void)
{
  return UATM::flightCoordinationTypeSupport::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<UATM::flightCoordinationTypeSupport>::marshal (
    const UATM::flightCoordinationTypeSupport_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



UATM::flightCoordinationTypeSupport::flightCoordinationTypeSupport (void)
{}

UATM::flightCoordinationTypeSupport::~flightCoordinationTypeSupport (void)
{
}

UATM::flightCoordinationTypeSupport_ptr
UATM::flightCoordinationTypeSupport::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return flightCoordinationTypeSupport::_duplicate (
      dynamic_cast<flightCoordinationTypeSupport_ptr> (_tao_objref));
}

UATM::flightCoordinationTypeSupport_ptr
UATM::flightCoordinationTypeSupport::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return flightCoordinationTypeSupport::_duplicate (
      dynamic_cast<flightCoordinationTypeSupport_ptr> (_tao_objref));
}

UATM::flightCoordinationTypeSupport_ptr
UATM::flightCoordinationTypeSupport::_nil (void)
{
  return 0;
}

UATM::flightCoordinationTypeSupport_ptr
UATM::flightCoordinationTypeSupport::_duplicate (flightCoordinationTypeSupport_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
UATM::flightCoordinationTypeSupport::_tao_release (flightCoordinationTypeSupport_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
UATM::flightCoordinationTypeSupport::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/TypeSupport:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:OpenDDS/DCPS/TypeSupport:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:UATM/flightCoordinationTypeSupport:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* UATM::flightCoordinationTypeSupport::_interface_repository_id (void) const
{
  return "IDL:UATM/flightCoordinationTypeSupport:1.0";
}

::CORBA::Boolean
UATM::flightCoordinationTypeSupport::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_interface\interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for UATM::flightCoordinationDataWriter.

UATM::flightCoordinationDataWriter_ptr
TAO::Objref_Traits<UATM::flightCoordinationDataWriter>::duplicate (
    UATM::flightCoordinationDataWriter_ptr p)
{
  return UATM::flightCoordinationDataWriter::_duplicate (p);
}

void
TAO::Objref_Traits<UATM::flightCoordinationDataWriter>::release (
    UATM::flightCoordinationDataWriter_ptr p)
{
  ::CORBA::release (p);
}

UATM::flightCoordinationDataWriter_ptr
TAO::Objref_Traits<UATM::flightCoordinationDataWriter>::nil (void)
{
  return UATM::flightCoordinationDataWriter::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<UATM::flightCoordinationDataWriter>::marshal (
    const UATM::flightCoordinationDataWriter_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



UATM::flightCoordinationDataWriter::flightCoordinationDataWriter (void)
{}

UATM::flightCoordinationDataWriter::~flightCoordinationDataWriter (void)
{
}

UATM::flightCoordinationDataWriter_ptr
UATM::flightCoordinationDataWriter::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return flightCoordinationDataWriter::_duplicate (
      dynamic_cast<flightCoordinationDataWriter_ptr> (_tao_objref));
}

UATM::flightCoordinationDataWriter_ptr
UATM::flightCoordinationDataWriter::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return flightCoordinationDataWriter::_duplicate (
      dynamic_cast<flightCoordinationDataWriter_ptr> (_tao_objref));
}

UATM::flightCoordinationDataWriter_ptr
UATM::flightCoordinationDataWriter::_nil (void)
{
  return 0;
}

UATM::flightCoordinationDataWriter_ptr
UATM::flightCoordinationDataWriter::_duplicate (flightCoordinationDataWriter_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
UATM::flightCoordinationDataWriter::_tao_release (flightCoordinationDataWriter_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
UATM::flightCoordinationDataWriter::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/Entity:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:DDS/DataWriter:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:UATM/flightCoordinationDataWriter:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* UATM::flightCoordinationDataWriter::_interface_repository_id (void) const
{
  return "IDL:UATM/flightCoordinationDataWriter:1.0";
}

::CORBA::Boolean
UATM::flightCoordinationDataWriter::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_interface\interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for UATM::flightCoordinationDataReader.

UATM::flightCoordinationDataReader_ptr
TAO::Objref_Traits<UATM::flightCoordinationDataReader>::duplicate (
    UATM::flightCoordinationDataReader_ptr p)
{
  return UATM::flightCoordinationDataReader::_duplicate (p);
}

void
TAO::Objref_Traits<UATM::flightCoordinationDataReader>::release (
    UATM::flightCoordinationDataReader_ptr p)
{
  ::CORBA::release (p);
}

UATM::flightCoordinationDataReader_ptr
TAO::Objref_Traits<UATM::flightCoordinationDataReader>::nil (void)
{
  return UATM::flightCoordinationDataReader::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<UATM::flightCoordinationDataReader>::marshal (
    const UATM::flightCoordinationDataReader_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



UATM::flightCoordinationDataReader::flightCoordinationDataReader (void)
{}

UATM::flightCoordinationDataReader::~flightCoordinationDataReader (void)
{
}

UATM::flightCoordinationDataReader_ptr
UATM::flightCoordinationDataReader::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return flightCoordinationDataReader::_duplicate (
      dynamic_cast<flightCoordinationDataReader_ptr> (_tao_objref));
}

UATM::flightCoordinationDataReader_ptr
UATM::flightCoordinationDataReader::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return flightCoordinationDataReader::_duplicate (
      dynamic_cast<flightCoordinationDataReader_ptr> (_tao_objref));
}

UATM::flightCoordinationDataReader_ptr
UATM::flightCoordinationDataReader::_nil (void)
{
  return 0;
}

UATM::flightCoordinationDataReader_ptr
UATM::flightCoordinationDataReader::_duplicate (flightCoordinationDataReader_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
UATM::flightCoordinationDataReader::_tao_release (flightCoordinationDataReader_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
UATM::flightCoordinationDataReader::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/Entity:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:DDS/DataReader:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:OpenDDS/DCPS/DataReaderEx:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:UATM/flightCoordinationDataReader:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* UATM::flightCoordinationDataReader::_interface_repository_id (void) const
{
  return "IDL:UATM/flightCoordinationDataReader:1.0";
}

::CORBA::Boolean
UATM::flightCoordinationDataReader::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_interface\interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for UATM::flightRequestInfoTypeSupport.

UATM::flightRequestInfoTypeSupport_ptr
TAO::Objref_Traits<UATM::flightRequestInfoTypeSupport>::duplicate (
    UATM::flightRequestInfoTypeSupport_ptr p)
{
  return UATM::flightRequestInfoTypeSupport::_duplicate (p);
}

void
TAO::Objref_Traits<UATM::flightRequestInfoTypeSupport>::release (
    UATM::flightRequestInfoTypeSupport_ptr p)
{
  ::CORBA::release (p);
}

UATM::flightRequestInfoTypeSupport_ptr
TAO::Objref_Traits<UATM::flightRequestInfoTypeSupport>::nil (void)
{
  return UATM::flightRequestInfoTypeSupport::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<UATM::flightRequestInfoTypeSupport>::marshal (
    const UATM::flightRequestInfoTypeSupport_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



UATM::flightRequestInfoTypeSupport::flightRequestInfoTypeSupport (void)
{}

UATM::flightRequestInfoTypeSupport::~flightRequestInfoTypeSupport (void)
{
}

UATM::flightRequestInfoTypeSupport_ptr
UATM::flightRequestInfoTypeSupport::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return flightRequestInfoTypeSupport::_duplicate (
      dynamic_cast<flightRequestInfoTypeSupport_ptr> (_tao_objref));
}

UATM::flightRequestInfoTypeSupport_ptr
UATM::flightRequestInfoTypeSupport::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return flightRequestInfoTypeSupport::_duplicate (
      dynamic_cast<flightRequestInfoTypeSupport_ptr> (_tao_objref));
}

UATM::flightRequestInfoTypeSupport_ptr
UATM::flightRequestInfoTypeSupport::_nil (void)
{
  return 0;
}

UATM::flightRequestInfoTypeSupport_ptr
UATM::flightRequestInfoTypeSupport::_duplicate (flightRequestInfoTypeSupport_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
UATM::flightRequestInfoTypeSupport::_tao_release (flightRequestInfoTypeSupport_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
UATM::flightRequestInfoTypeSupport::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/TypeSupport:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:OpenDDS/DCPS/TypeSupport:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:UATM/flightRequestInfoTypeSupport:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* UATM::flightRequestInfoTypeSupport::_interface_repository_id (void) const
{
  return "IDL:UATM/flightRequestInfoTypeSupport:1.0";
}

::CORBA::Boolean
UATM::flightRequestInfoTypeSupport::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_interface\interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for UATM::flightRequestInfoDataWriter.

UATM::flightRequestInfoDataWriter_ptr
TAO::Objref_Traits<UATM::flightRequestInfoDataWriter>::duplicate (
    UATM::flightRequestInfoDataWriter_ptr p)
{
  return UATM::flightRequestInfoDataWriter::_duplicate (p);
}

void
TAO::Objref_Traits<UATM::flightRequestInfoDataWriter>::release (
    UATM::flightRequestInfoDataWriter_ptr p)
{
  ::CORBA::release (p);
}

UATM::flightRequestInfoDataWriter_ptr
TAO::Objref_Traits<UATM::flightRequestInfoDataWriter>::nil (void)
{
  return UATM::flightRequestInfoDataWriter::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<UATM::flightRequestInfoDataWriter>::marshal (
    const UATM::flightRequestInfoDataWriter_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



UATM::flightRequestInfoDataWriter::flightRequestInfoDataWriter (void)
{}

UATM::flightRequestInfoDataWriter::~flightRequestInfoDataWriter (void)
{
}

UATM::flightRequestInfoDataWriter_ptr
UATM::flightRequestInfoDataWriter::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return flightRequestInfoDataWriter::_duplicate (
      dynamic_cast<flightRequestInfoDataWriter_ptr> (_tao_objref));
}

UATM::flightRequestInfoDataWriter_ptr
UATM::flightRequestInfoDataWriter::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return flightRequestInfoDataWriter::_duplicate (
      dynamic_cast<flightRequestInfoDataWriter_ptr> (_tao_objref));
}

UATM::flightRequestInfoDataWriter_ptr
UATM::flightRequestInfoDataWriter::_nil (void)
{
  return 0;
}

UATM::flightRequestInfoDataWriter_ptr
UATM::flightRequestInfoDataWriter::_duplicate (flightRequestInfoDataWriter_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
UATM::flightRequestInfoDataWriter::_tao_release (flightRequestInfoDataWriter_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
UATM::flightRequestInfoDataWriter::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/Entity:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:DDS/DataWriter:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:UATM/flightRequestInfoDataWriter:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* UATM::flightRequestInfoDataWriter::_interface_repository_id (void) const
{
  return "IDL:UATM/flightRequestInfoDataWriter:1.0";
}

::CORBA::Boolean
UATM::flightRequestInfoDataWriter::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_interface\interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for UATM::flightRequestInfoDataReader.

UATM::flightRequestInfoDataReader_ptr
TAO::Objref_Traits<UATM::flightRequestInfoDataReader>::duplicate (
    UATM::flightRequestInfoDataReader_ptr p)
{
  return UATM::flightRequestInfoDataReader::_duplicate (p);
}

void
TAO::Objref_Traits<UATM::flightRequestInfoDataReader>::release (
    UATM::flightRequestInfoDataReader_ptr p)
{
  ::CORBA::release (p);
}

UATM::flightRequestInfoDataReader_ptr
TAO::Objref_Traits<UATM::flightRequestInfoDataReader>::nil (void)
{
  return UATM::flightRequestInfoDataReader::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<UATM::flightRequestInfoDataReader>::marshal (
    const UATM::flightRequestInfoDataReader_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



UATM::flightRequestInfoDataReader::flightRequestInfoDataReader (void)
{}

UATM::flightRequestInfoDataReader::~flightRequestInfoDataReader (void)
{
}

UATM::flightRequestInfoDataReader_ptr
UATM::flightRequestInfoDataReader::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return flightRequestInfoDataReader::_duplicate (
      dynamic_cast<flightRequestInfoDataReader_ptr> (_tao_objref));
}

UATM::flightRequestInfoDataReader_ptr
UATM::flightRequestInfoDataReader::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return flightRequestInfoDataReader::_duplicate (
      dynamic_cast<flightRequestInfoDataReader_ptr> (_tao_objref));
}

UATM::flightRequestInfoDataReader_ptr
UATM::flightRequestInfoDataReader::_nil (void)
{
  return 0;
}

UATM::flightRequestInfoDataReader_ptr
UATM::flightRequestInfoDataReader::_duplicate (flightRequestInfoDataReader_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
UATM::flightRequestInfoDataReader::_tao_release (flightRequestInfoDataReader_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
UATM::flightRequestInfoDataReader::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/Entity:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:DDS/DataReader:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:OpenDDS/DCPS/DataReaderEx:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:UATM/flightRequestInfoDataReader:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* UATM::flightRequestInfoDataReader::_interface_repository_id (void) const
{
  return "IDL:UATM/flightRequestInfoDataReader:1.0";
}

::CORBA::Boolean
UATM::flightRequestInfoDataReader::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_interface\interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for UATM::flightRoutesInfoTypeSupport.

UATM::flightRoutesInfoTypeSupport_ptr
TAO::Objref_Traits<UATM::flightRoutesInfoTypeSupport>::duplicate (
    UATM::flightRoutesInfoTypeSupport_ptr p)
{
  return UATM::flightRoutesInfoTypeSupport::_duplicate (p);
}

void
TAO::Objref_Traits<UATM::flightRoutesInfoTypeSupport>::release (
    UATM::flightRoutesInfoTypeSupport_ptr p)
{
  ::CORBA::release (p);
}

UATM::flightRoutesInfoTypeSupport_ptr
TAO::Objref_Traits<UATM::flightRoutesInfoTypeSupport>::nil (void)
{
  return UATM::flightRoutesInfoTypeSupport::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<UATM::flightRoutesInfoTypeSupport>::marshal (
    const UATM::flightRoutesInfoTypeSupport_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



UATM::flightRoutesInfoTypeSupport::flightRoutesInfoTypeSupport (void)
{}

UATM::flightRoutesInfoTypeSupport::~flightRoutesInfoTypeSupport (void)
{
}

UATM::flightRoutesInfoTypeSupport_ptr
UATM::flightRoutesInfoTypeSupport::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return flightRoutesInfoTypeSupport::_duplicate (
      dynamic_cast<flightRoutesInfoTypeSupport_ptr> (_tao_objref));
}

UATM::flightRoutesInfoTypeSupport_ptr
UATM::flightRoutesInfoTypeSupport::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return flightRoutesInfoTypeSupport::_duplicate (
      dynamic_cast<flightRoutesInfoTypeSupport_ptr> (_tao_objref));
}

UATM::flightRoutesInfoTypeSupport_ptr
UATM::flightRoutesInfoTypeSupport::_nil (void)
{
  return 0;
}

UATM::flightRoutesInfoTypeSupport_ptr
UATM::flightRoutesInfoTypeSupport::_duplicate (flightRoutesInfoTypeSupport_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
UATM::flightRoutesInfoTypeSupport::_tao_release (flightRoutesInfoTypeSupport_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
UATM::flightRoutesInfoTypeSupport::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/TypeSupport:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:OpenDDS/DCPS/TypeSupport:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:UATM/flightRoutesInfoTypeSupport:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* UATM::flightRoutesInfoTypeSupport::_interface_repository_id (void) const
{
  return "IDL:UATM/flightRoutesInfoTypeSupport:1.0";
}

::CORBA::Boolean
UATM::flightRoutesInfoTypeSupport::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_interface\interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for UATM::flightRoutesInfoDataWriter.

UATM::flightRoutesInfoDataWriter_ptr
TAO::Objref_Traits<UATM::flightRoutesInfoDataWriter>::duplicate (
    UATM::flightRoutesInfoDataWriter_ptr p)
{
  return UATM::flightRoutesInfoDataWriter::_duplicate (p);
}

void
TAO::Objref_Traits<UATM::flightRoutesInfoDataWriter>::release (
    UATM::flightRoutesInfoDataWriter_ptr p)
{
  ::CORBA::release (p);
}

UATM::flightRoutesInfoDataWriter_ptr
TAO::Objref_Traits<UATM::flightRoutesInfoDataWriter>::nil (void)
{
  return UATM::flightRoutesInfoDataWriter::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<UATM::flightRoutesInfoDataWriter>::marshal (
    const UATM::flightRoutesInfoDataWriter_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



UATM::flightRoutesInfoDataWriter::flightRoutesInfoDataWriter (void)
{}

UATM::flightRoutesInfoDataWriter::~flightRoutesInfoDataWriter (void)
{
}

UATM::flightRoutesInfoDataWriter_ptr
UATM::flightRoutesInfoDataWriter::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return flightRoutesInfoDataWriter::_duplicate (
      dynamic_cast<flightRoutesInfoDataWriter_ptr> (_tao_objref));
}

UATM::flightRoutesInfoDataWriter_ptr
UATM::flightRoutesInfoDataWriter::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return flightRoutesInfoDataWriter::_duplicate (
      dynamic_cast<flightRoutesInfoDataWriter_ptr> (_tao_objref));
}

UATM::flightRoutesInfoDataWriter_ptr
UATM::flightRoutesInfoDataWriter::_nil (void)
{
  return 0;
}

UATM::flightRoutesInfoDataWriter_ptr
UATM::flightRoutesInfoDataWriter::_duplicate (flightRoutesInfoDataWriter_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
UATM::flightRoutesInfoDataWriter::_tao_release (flightRoutesInfoDataWriter_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
UATM::flightRoutesInfoDataWriter::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/Entity:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:DDS/DataWriter:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:UATM/flightRoutesInfoDataWriter:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* UATM::flightRoutesInfoDataWriter::_interface_repository_id (void) const
{
  return "IDL:UATM/flightRoutesInfoDataWriter:1.0";
}

::CORBA::Boolean
UATM::flightRoutesInfoDataWriter::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_interface\interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for UATM::flightRoutesInfoDataReader.

UATM::flightRoutesInfoDataReader_ptr
TAO::Objref_Traits<UATM::flightRoutesInfoDataReader>::duplicate (
    UATM::flightRoutesInfoDataReader_ptr p)
{
  return UATM::flightRoutesInfoDataReader::_duplicate (p);
}

void
TAO::Objref_Traits<UATM::flightRoutesInfoDataReader>::release (
    UATM::flightRoutesInfoDataReader_ptr p)
{
  ::CORBA::release (p);
}

UATM::flightRoutesInfoDataReader_ptr
TAO::Objref_Traits<UATM::flightRoutesInfoDataReader>::nil (void)
{
  return UATM::flightRoutesInfoDataReader::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<UATM::flightRoutesInfoDataReader>::marshal (
    const UATM::flightRoutesInfoDataReader_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



UATM::flightRoutesInfoDataReader::flightRoutesInfoDataReader (void)
{}

UATM::flightRoutesInfoDataReader::~flightRoutesInfoDataReader (void)
{
}

UATM::flightRoutesInfoDataReader_ptr
UATM::flightRoutesInfoDataReader::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return flightRoutesInfoDataReader::_duplicate (
      dynamic_cast<flightRoutesInfoDataReader_ptr> (_tao_objref));
}

UATM::flightRoutesInfoDataReader_ptr
UATM::flightRoutesInfoDataReader::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return flightRoutesInfoDataReader::_duplicate (
      dynamic_cast<flightRoutesInfoDataReader_ptr> (_tao_objref));
}

UATM::flightRoutesInfoDataReader_ptr
UATM::flightRoutesInfoDataReader::_nil (void)
{
  return 0;
}

UATM::flightRoutesInfoDataReader_ptr
UATM::flightRoutesInfoDataReader::_duplicate (flightRoutesInfoDataReader_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
UATM::flightRoutesInfoDataReader::_tao_release (flightRoutesInfoDataReader_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
UATM::flightRoutesInfoDataReader::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/Entity:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:DDS/DataReader:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:OpenDDS/DCPS/DataReaderEx:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:UATM/flightRoutesInfoDataReader:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* UATM::flightRoutesInfoDataReader::_interface_repository_id (void) const
{
  return "IDL:UATM/flightRoutesInfoDataReader:1.0";
}

::CORBA::Boolean
UATM::flightRoutesInfoDataReader::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_interface\interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for UATM::tolPadRequestTypeSupport.

UATM::tolPadRequestTypeSupport_ptr
TAO::Objref_Traits<UATM::tolPadRequestTypeSupport>::duplicate (
    UATM::tolPadRequestTypeSupport_ptr p)
{
  return UATM::tolPadRequestTypeSupport::_duplicate (p);
}

void
TAO::Objref_Traits<UATM::tolPadRequestTypeSupport>::release (
    UATM::tolPadRequestTypeSupport_ptr p)
{
  ::CORBA::release (p);
}

UATM::tolPadRequestTypeSupport_ptr
TAO::Objref_Traits<UATM::tolPadRequestTypeSupport>::nil (void)
{
  return UATM::tolPadRequestTypeSupport::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<UATM::tolPadRequestTypeSupport>::marshal (
    const UATM::tolPadRequestTypeSupport_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



UATM::tolPadRequestTypeSupport::tolPadRequestTypeSupport (void)
{}

UATM::tolPadRequestTypeSupport::~tolPadRequestTypeSupport (void)
{
}

UATM::tolPadRequestTypeSupport_ptr
UATM::tolPadRequestTypeSupport::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return tolPadRequestTypeSupport::_duplicate (
      dynamic_cast<tolPadRequestTypeSupport_ptr> (_tao_objref));
}

UATM::tolPadRequestTypeSupport_ptr
UATM::tolPadRequestTypeSupport::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return tolPadRequestTypeSupport::_duplicate (
      dynamic_cast<tolPadRequestTypeSupport_ptr> (_tao_objref));
}

UATM::tolPadRequestTypeSupport_ptr
UATM::tolPadRequestTypeSupport::_nil (void)
{
  return 0;
}

UATM::tolPadRequestTypeSupport_ptr
UATM::tolPadRequestTypeSupport::_duplicate (tolPadRequestTypeSupport_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
UATM::tolPadRequestTypeSupport::_tao_release (tolPadRequestTypeSupport_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
UATM::tolPadRequestTypeSupport::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/TypeSupport:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:OpenDDS/DCPS/TypeSupport:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:UATM/tolPadRequestTypeSupport:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* UATM::tolPadRequestTypeSupport::_interface_repository_id (void) const
{
  return "IDL:UATM/tolPadRequestTypeSupport:1.0";
}

::CORBA::Boolean
UATM::tolPadRequestTypeSupport::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_interface\interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for UATM::tolPadRequestDataWriter.

UATM::tolPadRequestDataWriter_ptr
TAO::Objref_Traits<UATM::tolPadRequestDataWriter>::duplicate (
    UATM::tolPadRequestDataWriter_ptr p)
{
  return UATM::tolPadRequestDataWriter::_duplicate (p);
}

void
TAO::Objref_Traits<UATM::tolPadRequestDataWriter>::release (
    UATM::tolPadRequestDataWriter_ptr p)
{
  ::CORBA::release (p);
}

UATM::tolPadRequestDataWriter_ptr
TAO::Objref_Traits<UATM::tolPadRequestDataWriter>::nil (void)
{
  return UATM::tolPadRequestDataWriter::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<UATM::tolPadRequestDataWriter>::marshal (
    const UATM::tolPadRequestDataWriter_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



UATM::tolPadRequestDataWriter::tolPadRequestDataWriter (void)
{}

UATM::tolPadRequestDataWriter::~tolPadRequestDataWriter (void)
{
}

UATM::tolPadRequestDataWriter_ptr
UATM::tolPadRequestDataWriter::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return tolPadRequestDataWriter::_duplicate (
      dynamic_cast<tolPadRequestDataWriter_ptr> (_tao_objref));
}

UATM::tolPadRequestDataWriter_ptr
UATM::tolPadRequestDataWriter::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return tolPadRequestDataWriter::_duplicate (
      dynamic_cast<tolPadRequestDataWriter_ptr> (_tao_objref));
}

UATM::tolPadRequestDataWriter_ptr
UATM::tolPadRequestDataWriter::_nil (void)
{
  return 0;
}

UATM::tolPadRequestDataWriter_ptr
UATM::tolPadRequestDataWriter::_duplicate (tolPadRequestDataWriter_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
UATM::tolPadRequestDataWriter::_tao_release (tolPadRequestDataWriter_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
UATM::tolPadRequestDataWriter::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/Entity:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:DDS/DataWriter:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:UATM/tolPadRequestDataWriter:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* UATM::tolPadRequestDataWriter::_interface_repository_id (void) const
{
  return "IDL:UATM/tolPadRequestDataWriter:1.0";
}

::CORBA::Boolean
UATM::tolPadRequestDataWriter::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_interface\interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for UATM::tolPadRequestDataReader.

UATM::tolPadRequestDataReader_ptr
TAO::Objref_Traits<UATM::tolPadRequestDataReader>::duplicate (
    UATM::tolPadRequestDataReader_ptr p)
{
  return UATM::tolPadRequestDataReader::_duplicate (p);
}

void
TAO::Objref_Traits<UATM::tolPadRequestDataReader>::release (
    UATM::tolPadRequestDataReader_ptr p)
{
  ::CORBA::release (p);
}

UATM::tolPadRequestDataReader_ptr
TAO::Objref_Traits<UATM::tolPadRequestDataReader>::nil (void)
{
  return UATM::tolPadRequestDataReader::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<UATM::tolPadRequestDataReader>::marshal (
    const UATM::tolPadRequestDataReader_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



UATM::tolPadRequestDataReader::tolPadRequestDataReader (void)
{}

UATM::tolPadRequestDataReader::~tolPadRequestDataReader (void)
{
}

UATM::tolPadRequestDataReader_ptr
UATM::tolPadRequestDataReader::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return tolPadRequestDataReader::_duplicate (
      dynamic_cast<tolPadRequestDataReader_ptr> (_tao_objref));
}

UATM::tolPadRequestDataReader_ptr
UATM::tolPadRequestDataReader::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return tolPadRequestDataReader::_duplicate (
      dynamic_cast<tolPadRequestDataReader_ptr> (_tao_objref));
}

UATM::tolPadRequestDataReader_ptr
UATM::tolPadRequestDataReader::_nil (void)
{
  return 0;
}

UATM::tolPadRequestDataReader_ptr
UATM::tolPadRequestDataReader::_duplicate (tolPadRequestDataReader_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
UATM::tolPadRequestDataReader::_tao_release (tolPadRequestDataReader_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
UATM::tolPadRequestDataReader::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/Entity:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:DDS/DataReader:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:OpenDDS/DCPS/DataReaderEx:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:UATM/tolPadRequestDataReader:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* UATM::tolPadRequestDataReader::_interface_repository_id (void) const
{
  return "IDL:UATM/tolPadRequestDataReader:1.0";
}

::CORBA::Boolean
UATM::tolPadRequestDataReader::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_interface\interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for UATM::trafficFlowsInfoTypeSupport.

UATM::trafficFlowsInfoTypeSupport_ptr
TAO::Objref_Traits<UATM::trafficFlowsInfoTypeSupport>::duplicate (
    UATM::trafficFlowsInfoTypeSupport_ptr p)
{
  return UATM::trafficFlowsInfoTypeSupport::_duplicate (p);
}

void
TAO::Objref_Traits<UATM::trafficFlowsInfoTypeSupport>::release (
    UATM::trafficFlowsInfoTypeSupport_ptr p)
{
  ::CORBA::release (p);
}

UATM::trafficFlowsInfoTypeSupport_ptr
TAO::Objref_Traits<UATM::trafficFlowsInfoTypeSupport>::nil (void)
{
  return UATM::trafficFlowsInfoTypeSupport::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<UATM::trafficFlowsInfoTypeSupport>::marshal (
    const UATM::trafficFlowsInfoTypeSupport_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



UATM::trafficFlowsInfoTypeSupport::trafficFlowsInfoTypeSupport (void)
{}

UATM::trafficFlowsInfoTypeSupport::~trafficFlowsInfoTypeSupport (void)
{
}

UATM::trafficFlowsInfoTypeSupport_ptr
UATM::trafficFlowsInfoTypeSupport::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return trafficFlowsInfoTypeSupport::_duplicate (
      dynamic_cast<trafficFlowsInfoTypeSupport_ptr> (_tao_objref));
}

UATM::trafficFlowsInfoTypeSupport_ptr
UATM::trafficFlowsInfoTypeSupport::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return trafficFlowsInfoTypeSupport::_duplicate (
      dynamic_cast<trafficFlowsInfoTypeSupport_ptr> (_tao_objref));
}

UATM::trafficFlowsInfoTypeSupport_ptr
UATM::trafficFlowsInfoTypeSupport::_nil (void)
{
  return 0;
}

UATM::trafficFlowsInfoTypeSupport_ptr
UATM::trafficFlowsInfoTypeSupport::_duplicate (trafficFlowsInfoTypeSupport_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
UATM::trafficFlowsInfoTypeSupport::_tao_release (trafficFlowsInfoTypeSupport_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
UATM::trafficFlowsInfoTypeSupport::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/TypeSupport:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:OpenDDS/DCPS/TypeSupport:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:UATM/trafficFlowsInfoTypeSupport:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* UATM::trafficFlowsInfoTypeSupport::_interface_repository_id (void) const
{
  return "IDL:UATM/trafficFlowsInfoTypeSupport:1.0";
}

::CORBA::Boolean
UATM::trafficFlowsInfoTypeSupport::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_interface\interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for UATM::trafficFlowsInfoDataWriter.

UATM::trafficFlowsInfoDataWriter_ptr
TAO::Objref_Traits<UATM::trafficFlowsInfoDataWriter>::duplicate (
    UATM::trafficFlowsInfoDataWriter_ptr p)
{
  return UATM::trafficFlowsInfoDataWriter::_duplicate (p);
}

void
TAO::Objref_Traits<UATM::trafficFlowsInfoDataWriter>::release (
    UATM::trafficFlowsInfoDataWriter_ptr p)
{
  ::CORBA::release (p);
}

UATM::trafficFlowsInfoDataWriter_ptr
TAO::Objref_Traits<UATM::trafficFlowsInfoDataWriter>::nil (void)
{
  return UATM::trafficFlowsInfoDataWriter::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<UATM::trafficFlowsInfoDataWriter>::marshal (
    const UATM::trafficFlowsInfoDataWriter_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



UATM::trafficFlowsInfoDataWriter::trafficFlowsInfoDataWriter (void)
{}

UATM::trafficFlowsInfoDataWriter::~trafficFlowsInfoDataWriter (void)
{
}

UATM::trafficFlowsInfoDataWriter_ptr
UATM::trafficFlowsInfoDataWriter::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return trafficFlowsInfoDataWriter::_duplicate (
      dynamic_cast<trafficFlowsInfoDataWriter_ptr> (_tao_objref));
}

UATM::trafficFlowsInfoDataWriter_ptr
UATM::trafficFlowsInfoDataWriter::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return trafficFlowsInfoDataWriter::_duplicate (
      dynamic_cast<trafficFlowsInfoDataWriter_ptr> (_tao_objref));
}

UATM::trafficFlowsInfoDataWriter_ptr
UATM::trafficFlowsInfoDataWriter::_nil (void)
{
  return 0;
}

UATM::trafficFlowsInfoDataWriter_ptr
UATM::trafficFlowsInfoDataWriter::_duplicate (trafficFlowsInfoDataWriter_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
UATM::trafficFlowsInfoDataWriter::_tao_release (trafficFlowsInfoDataWriter_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
UATM::trafficFlowsInfoDataWriter::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/Entity:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:DDS/DataWriter:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:UATM/trafficFlowsInfoDataWriter:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* UATM::trafficFlowsInfoDataWriter::_interface_repository_id (void) const
{
  return "IDL:UATM/trafficFlowsInfoDataWriter:1.0";
}

::CORBA::Boolean
UATM::trafficFlowsInfoDataWriter::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_interface\interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for UATM::trafficFlowsInfoDataReader.

UATM::trafficFlowsInfoDataReader_ptr
TAO::Objref_Traits<UATM::trafficFlowsInfoDataReader>::duplicate (
    UATM::trafficFlowsInfoDataReader_ptr p)
{
  return UATM::trafficFlowsInfoDataReader::_duplicate (p);
}

void
TAO::Objref_Traits<UATM::trafficFlowsInfoDataReader>::release (
    UATM::trafficFlowsInfoDataReader_ptr p)
{
  ::CORBA::release (p);
}

UATM::trafficFlowsInfoDataReader_ptr
TAO::Objref_Traits<UATM::trafficFlowsInfoDataReader>::nil (void)
{
  return UATM::trafficFlowsInfoDataReader::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<UATM::trafficFlowsInfoDataReader>::marshal (
    const UATM::trafficFlowsInfoDataReader_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



UATM::trafficFlowsInfoDataReader::trafficFlowsInfoDataReader (void)
{}

UATM::trafficFlowsInfoDataReader::~trafficFlowsInfoDataReader (void)
{
}

UATM::trafficFlowsInfoDataReader_ptr
UATM::trafficFlowsInfoDataReader::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return trafficFlowsInfoDataReader::_duplicate (
      dynamic_cast<trafficFlowsInfoDataReader_ptr> (_tao_objref));
}

UATM::trafficFlowsInfoDataReader_ptr
UATM::trafficFlowsInfoDataReader::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return trafficFlowsInfoDataReader::_duplicate (
      dynamic_cast<trafficFlowsInfoDataReader_ptr> (_tao_objref));
}

UATM::trafficFlowsInfoDataReader_ptr
UATM::trafficFlowsInfoDataReader::_nil (void)
{
  return 0;
}

UATM::trafficFlowsInfoDataReader_ptr
UATM::trafficFlowsInfoDataReader::_duplicate (trafficFlowsInfoDataReader_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
UATM::trafficFlowsInfoDataReader::_tao_release (trafficFlowsInfoDataReader_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
UATM::trafficFlowsInfoDataReader::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/Entity:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:DDS/DataReader:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:OpenDDS/DCPS/DataReaderEx:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:UATM/trafficFlowsInfoDataReader:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* UATM::trafficFlowsInfoDataReader::_interface_repository_id (void) const
{
  return "IDL:UATM/trafficFlowsInfoDataReader:1.0";
}

::CORBA::Boolean
UATM::trafficFlowsInfoDataReader::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_interface\interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for UATM::flightAuthorizationRequestTypeSupport.

UATM::flightAuthorizationRequestTypeSupport_ptr
TAO::Objref_Traits<UATM::flightAuthorizationRequestTypeSupport>::duplicate (
    UATM::flightAuthorizationRequestTypeSupport_ptr p)
{
  return UATM::flightAuthorizationRequestTypeSupport::_duplicate (p);
}

void
TAO::Objref_Traits<UATM::flightAuthorizationRequestTypeSupport>::release (
    UATM::flightAuthorizationRequestTypeSupport_ptr p)
{
  ::CORBA::release (p);
}

UATM::flightAuthorizationRequestTypeSupport_ptr
TAO::Objref_Traits<UATM::flightAuthorizationRequestTypeSupport>::nil (void)
{
  return UATM::flightAuthorizationRequestTypeSupport::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<UATM::flightAuthorizationRequestTypeSupport>::marshal (
    const UATM::flightAuthorizationRequestTypeSupport_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



UATM::flightAuthorizationRequestTypeSupport::flightAuthorizationRequestTypeSupport (void)
{}

UATM::flightAuthorizationRequestTypeSupport::~flightAuthorizationRequestTypeSupport (void)
{
}

UATM::flightAuthorizationRequestTypeSupport_ptr
UATM::flightAuthorizationRequestTypeSupport::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return flightAuthorizationRequestTypeSupport::_duplicate (
      dynamic_cast<flightAuthorizationRequestTypeSupport_ptr> (_tao_objref));
}

UATM::flightAuthorizationRequestTypeSupport_ptr
UATM::flightAuthorizationRequestTypeSupport::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return flightAuthorizationRequestTypeSupport::_duplicate (
      dynamic_cast<flightAuthorizationRequestTypeSupport_ptr> (_tao_objref));
}

UATM::flightAuthorizationRequestTypeSupport_ptr
UATM::flightAuthorizationRequestTypeSupport::_nil (void)
{
  return 0;
}

UATM::flightAuthorizationRequestTypeSupport_ptr
UATM::flightAuthorizationRequestTypeSupport::_duplicate (flightAuthorizationRequestTypeSupport_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
UATM::flightAuthorizationRequestTypeSupport::_tao_release (flightAuthorizationRequestTypeSupport_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
UATM::flightAuthorizationRequestTypeSupport::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/TypeSupport:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:OpenDDS/DCPS/TypeSupport:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:UATM/flightAuthorizationRequestTypeSupport:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* UATM::flightAuthorizationRequestTypeSupport::_interface_repository_id (void) const
{
  return "IDL:UATM/flightAuthorizationRequestTypeSupport:1.0";
}

::CORBA::Boolean
UATM::flightAuthorizationRequestTypeSupport::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_interface\interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for UATM::flightAuthorizationRequestDataWriter.

UATM::flightAuthorizationRequestDataWriter_ptr
TAO::Objref_Traits<UATM::flightAuthorizationRequestDataWriter>::duplicate (
    UATM::flightAuthorizationRequestDataWriter_ptr p)
{
  return UATM::flightAuthorizationRequestDataWriter::_duplicate (p);
}

void
TAO::Objref_Traits<UATM::flightAuthorizationRequestDataWriter>::release (
    UATM::flightAuthorizationRequestDataWriter_ptr p)
{
  ::CORBA::release (p);
}

UATM::flightAuthorizationRequestDataWriter_ptr
TAO::Objref_Traits<UATM::flightAuthorizationRequestDataWriter>::nil (void)
{
  return UATM::flightAuthorizationRequestDataWriter::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<UATM::flightAuthorizationRequestDataWriter>::marshal (
    const UATM::flightAuthorizationRequestDataWriter_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



UATM::flightAuthorizationRequestDataWriter::flightAuthorizationRequestDataWriter (void)
{}

UATM::flightAuthorizationRequestDataWriter::~flightAuthorizationRequestDataWriter (void)
{
}

UATM::flightAuthorizationRequestDataWriter_ptr
UATM::flightAuthorizationRequestDataWriter::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return flightAuthorizationRequestDataWriter::_duplicate (
      dynamic_cast<flightAuthorizationRequestDataWriter_ptr> (_tao_objref));
}

UATM::flightAuthorizationRequestDataWriter_ptr
UATM::flightAuthorizationRequestDataWriter::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return flightAuthorizationRequestDataWriter::_duplicate (
      dynamic_cast<flightAuthorizationRequestDataWriter_ptr> (_tao_objref));
}

UATM::flightAuthorizationRequestDataWriter_ptr
UATM::flightAuthorizationRequestDataWriter::_nil (void)
{
  return 0;
}

UATM::flightAuthorizationRequestDataWriter_ptr
UATM::flightAuthorizationRequestDataWriter::_duplicate (flightAuthorizationRequestDataWriter_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
UATM::flightAuthorizationRequestDataWriter::_tao_release (flightAuthorizationRequestDataWriter_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
UATM::flightAuthorizationRequestDataWriter::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/Entity:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:DDS/DataWriter:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:UATM/flightAuthorizationRequestDataWriter:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* UATM::flightAuthorizationRequestDataWriter::_interface_repository_id (void) const
{
  return "IDL:UATM/flightAuthorizationRequestDataWriter:1.0";
}

::CORBA::Boolean
UATM::flightAuthorizationRequestDataWriter::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_interface\interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for UATM::flightAuthorizationRequestDataReader.

UATM::flightAuthorizationRequestDataReader_ptr
TAO::Objref_Traits<UATM::flightAuthorizationRequestDataReader>::duplicate (
    UATM::flightAuthorizationRequestDataReader_ptr p)
{
  return UATM::flightAuthorizationRequestDataReader::_duplicate (p);
}

void
TAO::Objref_Traits<UATM::flightAuthorizationRequestDataReader>::release (
    UATM::flightAuthorizationRequestDataReader_ptr p)
{
  ::CORBA::release (p);
}

UATM::flightAuthorizationRequestDataReader_ptr
TAO::Objref_Traits<UATM::flightAuthorizationRequestDataReader>::nil (void)
{
  return UATM::flightAuthorizationRequestDataReader::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<UATM::flightAuthorizationRequestDataReader>::marshal (
    const UATM::flightAuthorizationRequestDataReader_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



UATM::flightAuthorizationRequestDataReader::flightAuthorizationRequestDataReader (void)
{}

UATM::flightAuthorizationRequestDataReader::~flightAuthorizationRequestDataReader (void)
{
}

UATM::flightAuthorizationRequestDataReader_ptr
UATM::flightAuthorizationRequestDataReader::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return flightAuthorizationRequestDataReader::_duplicate (
      dynamic_cast<flightAuthorizationRequestDataReader_ptr> (_tao_objref));
}

UATM::flightAuthorizationRequestDataReader_ptr
UATM::flightAuthorizationRequestDataReader::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return flightAuthorizationRequestDataReader::_duplicate (
      dynamic_cast<flightAuthorizationRequestDataReader_ptr> (_tao_objref));
}

UATM::flightAuthorizationRequestDataReader_ptr
UATM::flightAuthorizationRequestDataReader::_nil (void)
{
  return 0;
}

UATM::flightAuthorizationRequestDataReader_ptr
UATM::flightAuthorizationRequestDataReader::_duplicate (flightAuthorizationRequestDataReader_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
UATM::flightAuthorizationRequestDataReader::_tao_release (flightAuthorizationRequestDataReader_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
UATM::flightAuthorizationRequestDataReader::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/Entity:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:DDS/DataReader:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:OpenDDS/DCPS/DataReaderEx:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:UATM/flightAuthorizationRequestDataReader:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* UATM::flightAuthorizationRequestDataReader::_interface_repository_id (void) const
{
  return "IDL:UATM/flightAuthorizationRequestDataReader:1.0";
}

::CORBA::Boolean
UATM::flightAuthorizationRequestDataReader::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_interface\interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for UATM::weatherInfoTypeSupport.

UATM::weatherInfoTypeSupport_ptr
TAO::Objref_Traits<UATM::weatherInfoTypeSupport>::duplicate (
    UATM::weatherInfoTypeSupport_ptr p)
{
  return UATM::weatherInfoTypeSupport::_duplicate (p);
}

void
TAO::Objref_Traits<UATM::weatherInfoTypeSupport>::release (
    UATM::weatherInfoTypeSupport_ptr p)
{
  ::CORBA::release (p);
}

UATM::weatherInfoTypeSupport_ptr
TAO::Objref_Traits<UATM::weatherInfoTypeSupport>::nil (void)
{
  return UATM::weatherInfoTypeSupport::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<UATM::weatherInfoTypeSupport>::marshal (
    const UATM::weatherInfoTypeSupport_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



UATM::weatherInfoTypeSupport::weatherInfoTypeSupport (void)
{}

UATM::weatherInfoTypeSupport::~weatherInfoTypeSupport (void)
{
}

UATM::weatherInfoTypeSupport_ptr
UATM::weatherInfoTypeSupport::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return weatherInfoTypeSupport::_duplicate (
      dynamic_cast<weatherInfoTypeSupport_ptr> (_tao_objref));
}

UATM::weatherInfoTypeSupport_ptr
UATM::weatherInfoTypeSupport::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return weatherInfoTypeSupport::_duplicate (
      dynamic_cast<weatherInfoTypeSupport_ptr> (_tao_objref));
}

UATM::weatherInfoTypeSupport_ptr
UATM::weatherInfoTypeSupport::_nil (void)
{
  return 0;
}

UATM::weatherInfoTypeSupport_ptr
UATM::weatherInfoTypeSupport::_duplicate (weatherInfoTypeSupport_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
UATM::weatherInfoTypeSupport::_tao_release (weatherInfoTypeSupport_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
UATM::weatherInfoTypeSupport::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/TypeSupport:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:OpenDDS/DCPS/TypeSupport:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:UATM/weatherInfoTypeSupport:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* UATM::weatherInfoTypeSupport::_interface_repository_id (void) const
{
  return "IDL:UATM/weatherInfoTypeSupport:1.0";
}

::CORBA::Boolean
UATM::weatherInfoTypeSupport::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_interface\interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for UATM::weatherInfoDataWriter.

UATM::weatherInfoDataWriter_ptr
TAO::Objref_Traits<UATM::weatherInfoDataWriter>::duplicate (
    UATM::weatherInfoDataWriter_ptr p)
{
  return UATM::weatherInfoDataWriter::_duplicate (p);
}

void
TAO::Objref_Traits<UATM::weatherInfoDataWriter>::release (
    UATM::weatherInfoDataWriter_ptr p)
{
  ::CORBA::release (p);
}

UATM::weatherInfoDataWriter_ptr
TAO::Objref_Traits<UATM::weatherInfoDataWriter>::nil (void)
{
  return UATM::weatherInfoDataWriter::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<UATM::weatherInfoDataWriter>::marshal (
    const UATM::weatherInfoDataWriter_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



UATM::weatherInfoDataWriter::weatherInfoDataWriter (void)
{}

UATM::weatherInfoDataWriter::~weatherInfoDataWriter (void)
{
}

UATM::weatherInfoDataWriter_ptr
UATM::weatherInfoDataWriter::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return weatherInfoDataWriter::_duplicate (
      dynamic_cast<weatherInfoDataWriter_ptr> (_tao_objref));
}

UATM::weatherInfoDataWriter_ptr
UATM::weatherInfoDataWriter::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return weatherInfoDataWriter::_duplicate (
      dynamic_cast<weatherInfoDataWriter_ptr> (_tao_objref));
}

UATM::weatherInfoDataWriter_ptr
UATM::weatherInfoDataWriter::_nil (void)
{
  return 0;
}

UATM::weatherInfoDataWriter_ptr
UATM::weatherInfoDataWriter::_duplicate (weatherInfoDataWriter_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
UATM::weatherInfoDataWriter::_tao_release (weatherInfoDataWriter_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
UATM::weatherInfoDataWriter::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/Entity:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:DDS/DataWriter:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:UATM/weatherInfoDataWriter:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* UATM::weatherInfoDataWriter::_interface_repository_id (void) const
{
  return "IDL:UATM/weatherInfoDataWriter:1.0";
}

::CORBA::Boolean
UATM::weatherInfoDataWriter::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_interface\interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for UATM::weatherInfoDataReader.

UATM::weatherInfoDataReader_ptr
TAO::Objref_Traits<UATM::weatherInfoDataReader>::duplicate (
    UATM::weatherInfoDataReader_ptr p)
{
  return UATM::weatherInfoDataReader::_duplicate (p);
}

void
TAO::Objref_Traits<UATM::weatherInfoDataReader>::release (
    UATM::weatherInfoDataReader_ptr p)
{
  ::CORBA::release (p);
}

UATM::weatherInfoDataReader_ptr
TAO::Objref_Traits<UATM::weatherInfoDataReader>::nil (void)
{
  return UATM::weatherInfoDataReader::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<UATM::weatherInfoDataReader>::marshal (
    const UATM::weatherInfoDataReader_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



UATM::weatherInfoDataReader::weatherInfoDataReader (void)
{}

UATM::weatherInfoDataReader::~weatherInfoDataReader (void)
{
}

UATM::weatherInfoDataReader_ptr
UATM::weatherInfoDataReader::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return weatherInfoDataReader::_duplicate (
      dynamic_cast<weatherInfoDataReader_ptr> (_tao_objref));
}

UATM::weatherInfoDataReader_ptr
UATM::weatherInfoDataReader::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return weatherInfoDataReader::_duplicate (
      dynamic_cast<weatherInfoDataReader_ptr> (_tao_objref));
}

UATM::weatherInfoDataReader_ptr
UATM::weatherInfoDataReader::_nil (void)
{
  return 0;
}

UATM::weatherInfoDataReader_ptr
UATM::weatherInfoDataReader::_duplicate (weatherInfoDataReader_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
UATM::weatherInfoDataReader::_tao_release (weatherInfoDataReader_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
UATM::weatherInfoDataReader::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/Entity:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:DDS/DataReader:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:OpenDDS/DCPS/DataReaderEx:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:UATM/weatherInfoDataReader:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* UATM::weatherInfoDataReader::_interface_repository_id (void) const
{
  return "IDL:UATM/weatherInfoDataReader:1.0";
}

::CORBA::Boolean
UATM::weatherInfoDataReader::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_interface\interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for UATM::flightAssignTypeSupport.

UATM::flightAssignTypeSupport_ptr
TAO::Objref_Traits<UATM::flightAssignTypeSupport>::duplicate (
    UATM::flightAssignTypeSupport_ptr p)
{
  return UATM::flightAssignTypeSupport::_duplicate (p);
}

void
TAO::Objref_Traits<UATM::flightAssignTypeSupport>::release (
    UATM::flightAssignTypeSupport_ptr p)
{
  ::CORBA::release (p);
}

UATM::flightAssignTypeSupport_ptr
TAO::Objref_Traits<UATM::flightAssignTypeSupport>::nil (void)
{
  return UATM::flightAssignTypeSupport::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<UATM::flightAssignTypeSupport>::marshal (
    const UATM::flightAssignTypeSupport_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



UATM::flightAssignTypeSupport::flightAssignTypeSupport (void)
{}

UATM::flightAssignTypeSupport::~flightAssignTypeSupport (void)
{
}

UATM::flightAssignTypeSupport_ptr
UATM::flightAssignTypeSupport::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return flightAssignTypeSupport::_duplicate (
      dynamic_cast<flightAssignTypeSupport_ptr> (_tao_objref));
}

UATM::flightAssignTypeSupport_ptr
UATM::flightAssignTypeSupport::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return flightAssignTypeSupport::_duplicate (
      dynamic_cast<flightAssignTypeSupport_ptr> (_tao_objref));
}

UATM::flightAssignTypeSupport_ptr
UATM::flightAssignTypeSupport::_nil (void)
{
  return 0;
}

UATM::flightAssignTypeSupport_ptr
UATM::flightAssignTypeSupport::_duplicate (flightAssignTypeSupport_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
UATM::flightAssignTypeSupport::_tao_release (flightAssignTypeSupport_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
UATM::flightAssignTypeSupport::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/TypeSupport:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:OpenDDS/DCPS/TypeSupport:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:UATM/flightAssignTypeSupport:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* UATM::flightAssignTypeSupport::_interface_repository_id (void) const
{
  return "IDL:UATM/flightAssignTypeSupport:1.0";
}

::CORBA::Boolean
UATM::flightAssignTypeSupport::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_interface\interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for UATM::flightAssignDataWriter.

UATM::flightAssignDataWriter_ptr
TAO::Objref_Traits<UATM::flightAssignDataWriter>::duplicate (
    UATM::flightAssignDataWriter_ptr p)
{
  return UATM::flightAssignDataWriter::_duplicate (p);
}

void
TAO::Objref_Traits<UATM::flightAssignDataWriter>::release (
    UATM::flightAssignDataWriter_ptr p)
{
  ::CORBA::release (p);
}

UATM::flightAssignDataWriter_ptr
TAO::Objref_Traits<UATM::flightAssignDataWriter>::nil (void)
{
  return UATM::flightAssignDataWriter::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<UATM::flightAssignDataWriter>::marshal (
    const UATM::flightAssignDataWriter_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



UATM::flightAssignDataWriter::flightAssignDataWriter (void)
{}

UATM::flightAssignDataWriter::~flightAssignDataWriter (void)
{
}

UATM::flightAssignDataWriter_ptr
UATM::flightAssignDataWriter::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return flightAssignDataWriter::_duplicate (
      dynamic_cast<flightAssignDataWriter_ptr> (_tao_objref));
}

UATM::flightAssignDataWriter_ptr
UATM::flightAssignDataWriter::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return flightAssignDataWriter::_duplicate (
      dynamic_cast<flightAssignDataWriter_ptr> (_tao_objref));
}

UATM::flightAssignDataWriter_ptr
UATM::flightAssignDataWriter::_nil (void)
{
  return 0;
}

UATM::flightAssignDataWriter_ptr
UATM::flightAssignDataWriter::_duplicate (flightAssignDataWriter_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
UATM::flightAssignDataWriter::_tao_release (flightAssignDataWriter_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
UATM::flightAssignDataWriter::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/Entity:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:DDS/DataWriter:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:UATM/flightAssignDataWriter:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* UATM::flightAssignDataWriter::_interface_repository_id (void) const
{
  return "IDL:UATM/flightAssignDataWriter:1.0";
}

::CORBA::Boolean
UATM::flightAssignDataWriter::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_interface\interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for UATM::flightAssignDataReader.

UATM::flightAssignDataReader_ptr
TAO::Objref_Traits<UATM::flightAssignDataReader>::duplicate (
    UATM::flightAssignDataReader_ptr p)
{
  return UATM::flightAssignDataReader::_duplicate (p);
}

void
TAO::Objref_Traits<UATM::flightAssignDataReader>::release (
    UATM::flightAssignDataReader_ptr p)
{
  ::CORBA::release (p);
}

UATM::flightAssignDataReader_ptr
TAO::Objref_Traits<UATM::flightAssignDataReader>::nil (void)
{
  return UATM::flightAssignDataReader::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<UATM::flightAssignDataReader>::marshal (
    const UATM::flightAssignDataReader_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



UATM::flightAssignDataReader::flightAssignDataReader (void)
{}

UATM::flightAssignDataReader::~flightAssignDataReader (void)
{
}

UATM::flightAssignDataReader_ptr
UATM::flightAssignDataReader::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return flightAssignDataReader::_duplicate (
      dynamic_cast<flightAssignDataReader_ptr> (_tao_objref));
}

UATM::flightAssignDataReader_ptr
UATM::flightAssignDataReader::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return flightAssignDataReader::_duplicate (
      dynamic_cast<flightAssignDataReader_ptr> (_tao_objref));
}

UATM::flightAssignDataReader_ptr
UATM::flightAssignDataReader::_nil (void)
{
  return 0;
}

UATM::flightAssignDataReader_ptr
UATM::flightAssignDataReader::_duplicate (flightAssignDataReader_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
UATM::flightAssignDataReader::_tao_release (flightAssignDataReader_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
UATM::flightAssignDataReader::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/Entity:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:DDS/DataReader:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:OpenDDS/DCPS/DataReaderEx:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:UATM/flightAssignDataReader:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* UATM::flightAssignDataReader::_interface_repository_id (void) const
{
  return "IDL:UATM/flightAssignDataReader:1.0";
}

::CORBA::Boolean
UATM::flightAssignDataReader::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}

