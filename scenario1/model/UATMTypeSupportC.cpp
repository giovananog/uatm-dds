// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.5.21
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_codegen.cpp:372


#include "UATMTypeSupportC.h"
#include "tao/CDR.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "UATMTypeSupportC.inl"
#endif /* !defined INLINE */
// TAO_IDL - Generated from
// C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_interface\interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for UATM::availabilityInfoTypeSupport.

UATM::availabilityInfoTypeSupport_ptr
TAO::Objref_Traits<UATM::availabilityInfoTypeSupport>::duplicate (
    UATM::availabilityInfoTypeSupport_ptr p)
{
  return UATM::availabilityInfoTypeSupport::_duplicate (p);
}

void
TAO::Objref_Traits<UATM::availabilityInfoTypeSupport>::release (
    UATM::availabilityInfoTypeSupport_ptr p)
{
  ::CORBA::release (p);
}

UATM::availabilityInfoTypeSupport_ptr
TAO::Objref_Traits<UATM::availabilityInfoTypeSupport>::nil (void)
{
  return UATM::availabilityInfoTypeSupport::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<UATM::availabilityInfoTypeSupport>::marshal (
    const UATM::availabilityInfoTypeSupport_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



UATM::availabilityInfoTypeSupport::availabilityInfoTypeSupport (void)
{}

UATM::availabilityInfoTypeSupport::~availabilityInfoTypeSupport (void)
{
}

UATM::availabilityInfoTypeSupport_ptr
UATM::availabilityInfoTypeSupport::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return availabilityInfoTypeSupport::_duplicate (
      dynamic_cast<availabilityInfoTypeSupport_ptr> (_tao_objref));
}

UATM::availabilityInfoTypeSupport_ptr
UATM::availabilityInfoTypeSupport::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return availabilityInfoTypeSupport::_duplicate (
      dynamic_cast<availabilityInfoTypeSupport_ptr> (_tao_objref));
}

UATM::availabilityInfoTypeSupport_ptr
UATM::availabilityInfoTypeSupport::_nil (void)
{
  return 0;
}

UATM::availabilityInfoTypeSupport_ptr
UATM::availabilityInfoTypeSupport::_duplicate (availabilityInfoTypeSupport_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
UATM::availabilityInfoTypeSupport::_tao_release (availabilityInfoTypeSupport_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
UATM::availabilityInfoTypeSupport::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/TypeSupport:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:OpenDDS/DCPS/TypeSupport:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:UATM/availabilityInfoTypeSupport:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* UATM::availabilityInfoTypeSupport::_interface_repository_id (void) const
{
  return "IDL:UATM/availabilityInfoTypeSupport:1.0";
}

::CORBA::Boolean
UATM::availabilityInfoTypeSupport::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_interface\interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for UATM::availabilityInfoDataWriter.

UATM::availabilityInfoDataWriter_ptr
TAO::Objref_Traits<UATM::availabilityInfoDataWriter>::duplicate (
    UATM::availabilityInfoDataWriter_ptr p)
{
  return UATM::availabilityInfoDataWriter::_duplicate (p);
}

void
TAO::Objref_Traits<UATM::availabilityInfoDataWriter>::release (
    UATM::availabilityInfoDataWriter_ptr p)
{
  ::CORBA::release (p);
}

UATM::availabilityInfoDataWriter_ptr
TAO::Objref_Traits<UATM::availabilityInfoDataWriter>::nil (void)
{
  return UATM::availabilityInfoDataWriter::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<UATM::availabilityInfoDataWriter>::marshal (
    const UATM::availabilityInfoDataWriter_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



UATM::availabilityInfoDataWriter::availabilityInfoDataWriter (void)
{}

UATM::availabilityInfoDataWriter::~availabilityInfoDataWriter (void)
{
}

UATM::availabilityInfoDataWriter_ptr
UATM::availabilityInfoDataWriter::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return availabilityInfoDataWriter::_duplicate (
      dynamic_cast<availabilityInfoDataWriter_ptr> (_tao_objref));
}

UATM::availabilityInfoDataWriter_ptr
UATM::availabilityInfoDataWriter::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return availabilityInfoDataWriter::_duplicate (
      dynamic_cast<availabilityInfoDataWriter_ptr> (_tao_objref));
}

UATM::availabilityInfoDataWriter_ptr
UATM::availabilityInfoDataWriter::_nil (void)
{
  return 0;
}

UATM::availabilityInfoDataWriter_ptr
UATM::availabilityInfoDataWriter::_duplicate (availabilityInfoDataWriter_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
UATM::availabilityInfoDataWriter::_tao_release (availabilityInfoDataWriter_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
UATM::availabilityInfoDataWriter::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/Entity:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:DDS/DataWriter:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:UATM/availabilityInfoDataWriter:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* UATM::availabilityInfoDataWriter::_interface_repository_id (void) const
{
  return "IDL:UATM/availabilityInfoDataWriter:1.0";
}

::CORBA::Boolean
UATM::availabilityInfoDataWriter::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_interface\interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for UATM::availabilityInfoDataReader.

UATM::availabilityInfoDataReader_ptr
TAO::Objref_Traits<UATM::availabilityInfoDataReader>::duplicate (
    UATM::availabilityInfoDataReader_ptr p)
{
  return UATM::availabilityInfoDataReader::_duplicate (p);
}

void
TAO::Objref_Traits<UATM::availabilityInfoDataReader>::release (
    UATM::availabilityInfoDataReader_ptr p)
{
  ::CORBA::release (p);
}

UATM::availabilityInfoDataReader_ptr
TAO::Objref_Traits<UATM::availabilityInfoDataReader>::nil (void)
{
  return UATM::availabilityInfoDataReader::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<UATM::availabilityInfoDataReader>::marshal (
    const UATM::availabilityInfoDataReader_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



UATM::availabilityInfoDataReader::availabilityInfoDataReader (void)
{}

UATM::availabilityInfoDataReader::~availabilityInfoDataReader (void)
{
}

UATM::availabilityInfoDataReader_ptr
UATM::availabilityInfoDataReader::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return availabilityInfoDataReader::_duplicate (
      dynamic_cast<availabilityInfoDataReader_ptr> (_tao_objref));
}

UATM::availabilityInfoDataReader_ptr
UATM::availabilityInfoDataReader::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return availabilityInfoDataReader::_duplicate (
      dynamic_cast<availabilityInfoDataReader_ptr> (_tao_objref));
}

UATM::availabilityInfoDataReader_ptr
UATM::availabilityInfoDataReader::_nil (void)
{
  return 0;
}

UATM::availabilityInfoDataReader_ptr
UATM::availabilityInfoDataReader::_duplicate (availabilityInfoDataReader_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
UATM::availabilityInfoDataReader::_tao_release (availabilityInfoDataReader_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
UATM::availabilityInfoDataReader::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/Entity:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:DDS/DataReader:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:OpenDDS/DCPS/DataReaderEx:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:UATM/availabilityInfoDataReader:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* UATM::availabilityInfoDataReader::_interface_repository_id (void) const
{
  return "IDL:UATM/availabilityInfoDataReader:1.0";
}

::CORBA::Boolean
UATM::availabilityInfoDataReader::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_interface\interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for UATM::bookingFlightRequestTypeSupport.

UATM::bookingFlightRequestTypeSupport_ptr
TAO::Objref_Traits<UATM::bookingFlightRequestTypeSupport>::duplicate (
    UATM::bookingFlightRequestTypeSupport_ptr p)
{
  return UATM::bookingFlightRequestTypeSupport::_duplicate (p);
}

void
TAO::Objref_Traits<UATM::bookingFlightRequestTypeSupport>::release (
    UATM::bookingFlightRequestTypeSupport_ptr p)
{
  ::CORBA::release (p);
}

UATM::bookingFlightRequestTypeSupport_ptr
TAO::Objref_Traits<UATM::bookingFlightRequestTypeSupport>::nil (void)
{
  return UATM::bookingFlightRequestTypeSupport::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<UATM::bookingFlightRequestTypeSupport>::marshal (
    const UATM::bookingFlightRequestTypeSupport_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



UATM::bookingFlightRequestTypeSupport::bookingFlightRequestTypeSupport (void)
{}

UATM::bookingFlightRequestTypeSupport::~bookingFlightRequestTypeSupport (void)
{
}

UATM::bookingFlightRequestTypeSupport_ptr
UATM::bookingFlightRequestTypeSupport::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return bookingFlightRequestTypeSupport::_duplicate (
      dynamic_cast<bookingFlightRequestTypeSupport_ptr> (_tao_objref));
}

UATM::bookingFlightRequestTypeSupport_ptr
UATM::bookingFlightRequestTypeSupport::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return bookingFlightRequestTypeSupport::_duplicate (
      dynamic_cast<bookingFlightRequestTypeSupport_ptr> (_tao_objref));
}

UATM::bookingFlightRequestTypeSupport_ptr
UATM::bookingFlightRequestTypeSupport::_nil (void)
{
  return 0;
}

UATM::bookingFlightRequestTypeSupport_ptr
UATM::bookingFlightRequestTypeSupport::_duplicate (bookingFlightRequestTypeSupport_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
UATM::bookingFlightRequestTypeSupport::_tao_release (bookingFlightRequestTypeSupport_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
UATM::bookingFlightRequestTypeSupport::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/TypeSupport:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:OpenDDS/DCPS/TypeSupport:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:UATM/bookingFlightRequestTypeSupport:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* UATM::bookingFlightRequestTypeSupport::_interface_repository_id (void) const
{
  return "IDL:UATM/bookingFlightRequestTypeSupport:1.0";
}

::CORBA::Boolean
UATM::bookingFlightRequestTypeSupport::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_interface\interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for UATM::bookingFlightRequestDataWriter.

UATM::bookingFlightRequestDataWriter_ptr
TAO::Objref_Traits<UATM::bookingFlightRequestDataWriter>::duplicate (
    UATM::bookingFlightRequestDataWriter_ptr p)
{
  return UATM::bookingFlightRequestDataWriter::_duplicate (p);
}

void
TAO::Objref_Traits<UATM::bookingFlightRequestDataWriter>::release (
    UATM::bookingFlightRequestDataWriter_ptr p)
{
  ::CORBA::release (p);
}

UATM::bookingFlightRequestDataWriter_ptr
TAO::Objref_Traits<UATM::bookingFlightRequestDataWriter>::nil (void)
{
  return UATM::bookingFlightRequestDataWriter::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<UATM::bookingFlightRequestDataWriter>::marshal (
    const UATM::bookingFlightRequestDataWriter_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



UATM::bookingFlightRequestDataWriter::bookingFlightRequestDataWriter (void)
{}

UATM::bookingFlightRequestDataWriter::~bookingFlightRequestDataWriter (void)
{
}

UATM::bookingFlightRequestDataWriter_ptr
UATM::bookingFlightRequestDataWriter::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return bookingFlightRequestDataWriter::_duplicate (
      dynamic_cast<bookingFlightRequestDataWriter_ptr> (_tao_objref));
}

UATM::bookingFlightRequestDataWriter_ptr
UATM::bookingFlightRequestDataWriter::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return bookingFlightRequestDataWriter::_duplicate (
      dynamic_cast<bookingFlightRequestDataWriter_ptr> (_tao_objref));
}

UATM::bookingFlightRequestDataWriter_ptr
UATM::bookingFlightRequestDataWriter::_nil (void)
{
  return 0;
}

UATM::bookingFlightRequestDataWriter_ptr
UATM::bookingFlightRequestDataWriter::_duplicate (bookingFlightRequestDataWriter_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
UATM::bookingFlightRequestDataWriter::_tao_release (bookingFlightRequestDataWriter_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
UATM::bookingFlightRequestDataWriter::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/Entity:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:DDS/DataWriter:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:UATM/bookingFlightRequestDataWriter:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* UATM::bookingFlightRequestDataWriter::_interface_repository_id (void) const
{
  return "IDL:UATM/bookingFlightRequestDataWriter:1.0";
}

::CORBA::Boolean
UATM::bookingFlightRequestDataWriter::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_interface\interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for UATM::bookingFlightRequestDataReader.

UATM::bookingFlightRequestDataReader_ptr
TAO::Objref_Traits<UATM::bookingFlightRequestDataReader>::duplicate (
    UATM::bookingFlightRequestDataReader_ptr p)
{
  return UATM::bookingFlightRequestDataReader::_duplicate (p);
}

void
TAO::Objref_Traits<UATM::bookingFlightRequestDataReader>::release (
    UATM::bookingFlightRequestDataReader_ptr p)
{
  ::CORBA::release (p);
}

UATM::bookingFlightRequestDataReader_ptr
TAO::Objref_Traits<UATM::bookingFlightRequestDataReader>::nil (void)
{
  return UATM::bookingFlightRequestDataReader::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<UATM::bookingFlightRequestDataReader>::marshal (
    const UATM::bookingFlightRequestDataReader_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



UATM::bookingFlightRequestDataReader::bookingFlightRequestDataReader (void)
{}

UATM::bookingFlightRequestDataReader::~bookingFlightRequestDataReader (void)
{
}

UATM::bookingFlightRequestDataReader_ptr
UATM::bookingFlightRequestDataReader::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return bookingFlightRequestDataReader::_duplicate (
      dynamic_cast<bookingFlightRequestDataReader_ptr> (_tao_objref));
}

UATM::bookingFlightRequestDataReader_ptr
UATM::bookingFlightRequestDataReader::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return bookingFlightRequestDataReader::_duplicate (
      dynamic_cast<bookingFlightRequestDataReader_ptr> (_tao_objref));
}

UATM::bookingFlightRequestDataReader_ptr
UATM::bookingFlightRequestDataReader::_nil (void)
{
  return 0;
}

UATM::bookingFlightRequestDataReader_ptr
UATM::bookingFlightRequestDataReader::_duplicate (bookingFlightRequestDataReader_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
UATM::bookingFlightRequestDataReader::_tao_release (bookingFlightRequestDataReader_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
UATM::bookingFlightRequestDataReader::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/Entity:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:DDS/DataReader:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:OpenDDS/DCPS/DataReaderEx:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:UATM/bookingFlightRequestDataReader:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* UATM::bookingFlightRequestDataReader::_interface_repository_id (void) const
{
  return "IDL:UATM/bookingFlightRequestDataReader:1.0";
}

::CORBA::Boolean
UATM::bookingFlightRequestDataReader::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}

