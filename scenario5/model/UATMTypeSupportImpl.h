/* -*- C++ -*- */
/* Generated by C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\bin\opendds_idl version 3.29.1 (ACE version 6.5.21) running on input file UATM.idl */
#ifndef OPENDDS_IDL_GENERATED_UATMTYPESUPPORTIMPL_H_I1O8JY
#define OPENDDS_IDL_GENERATED_UATMTYPESUPPORTIMPL_H_I1O8JY

#include <dds/Version.h>
#if !OPENDDS_VERSION_EXACTLY(3, 29, 1)
#  error "This file should be regenerated with opendds_idl"
#endif
#include <dds/DCPS/Definitions.h>

#include <dds/DdsDcpsC.h>

#include "UATMC.h"
#include "UATMTypeSupportC.h"
#include "dds/DCPS/Serializer.h"
#include "dds/DCPS/Service_Participant.h"
#include "dds/DCPS/TypeSupportImpl.h"
#include "dds/DCPS/TypeSupportImpl_T.h"
#include "dds/DCPS/Util.h"
#include "dds/DCPS/ValueDispatcher.h"
#include "dds/DCPS/ValueReader.h"
#include "dds/DCPS/ValueWriter.h"
#include "dds/DCPS/XTypes/DynamicDataAdapter.h"
#include "dds/DCPS/XTypes/TypeObject.h"


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: UATM */



/* Begin STRUCT-FWD: weatherInfo */


/* End STRUCT-FWD: weatherInfo */


/* Begin STRUCT-FWD: trafficFlowsInfo */


/* End STRUCT-FWD: trafficFlowsInfo */


/* Begin STRUCT-FWD: asirspaceRestrictions */


/* End STRUCT-FWD: asirspaceRestrictions */


/* Begin STRUCT-FWD: acceptableRoute */


/* End STRUCT-FWD: acceptableRoute */

/* End MODULE: UATM */


/* Begin MODULE: UATM */



/* Begin TYPEDEF: ArrayString */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

struct UATM_ArrayString_xtag {};
template<> UATM_Export
const XTypes::TypeIdentifier& getMinimalTypeIdentifier<UATM_ArrayString_xtag>();

template<> UATM_Export
const XTypes::TypeMap& getMinimalTypeMap<UATM_ArrayString_xtag>();

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> UATM_Export
void set_default( ::UATM::ArrayString_forany& arr);

UATM_Export
void serialized_size(const Encoding& encoding, size_t& size, const  ::UATM::ArrayString_forany& arr);

UATM_Export
bool operator<<(Serializer& strm, const  ::UATM::ArrayString_forany& arr);

UATM_Export
bool operator>>(Serializer& strm,  ::UATM::ArrayString_forany& arr);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

UATM_Export
bool gen_skip_over(Serializer& ser,  ::UATM::ArrayString_forany*);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif // ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace XTypes {

#ifndef OPENDDS_SAFETY_PROFILE
struct UATM_ArrayString_dda_tag {};

template <>
UATM_Export DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::ArrayString, UATM_ArrayString_dda_tag>(DDS::DynamicType_ptr type, const  ::UATM::ArrayString& value);

template <>
UATM_Export DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::ArrayString, UATM_ArrayString_dda_tag>(DDS::DynamicType_ptr type,  ::UATM::ArrayString& value);

template <>
UATM_Export const  ::UATM::ArrayString* get_dynamic_data_adapter_value< ::UATM::ArrayString, UATM_ArrayString_dda_tag>(DDS::DynamicData_ptr dd);

#endif // ifndef OPENDDS_SAFETY_PROFILE

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End TYPEDEF: ArrayString */

/* End MODULE: UATM */


/* Begin MODULE: UATM */



/* Begin STRUCT: weatherInfo */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

struct UATM_weatherInfo_xtag {};
template<> UATM_Export
const XTypes::TypeIdentifier& getMinimalTypeIdentifier<UATM_weatherInfo_xtag>();

template<> UATM_Export
const XTypes::TypeMap& getMinimalTypeMap<UATM_weatherInfo_xtag>();

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

UATM_Export
bool vread(OpenDDS::DCPS::ValueReader& value_reader,  ::UATM::weatherInfo& value);

UATM_Export
bool vread(OpenDDS::DCPS::ValueReader& value_reader, const NestedKeyOnly< ::UATM::weatherInfo>& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

UATM_Export
bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const  ::UATM::weatherInfo& value);

UATM_Export
bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const NestedKeyOnly<const  ::UATM::weatherInfo>& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> UATM_Export
void set_default( ::UATM::weatherInfo& stru);

UATM_Export
void serialized_size(const Encoding& encoding, size_t& size, const ::UATM::weatherInfo& stru);

UATM_Export
bool operator<<(Serializer& strm, const ::UATM::weatherInfo& stru);

UATM_Export
bool operator>>(Serializer& strm,  ::UATM::weatherInfo& stru);

UATM_Export
void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const ::UATM::weatherInfo>& stru);

UATM_Export
bool operator<<(Serializer& strm, const NestedKeyOnly<const ::UATM::weatherInfo>& stru);

UATM_Export
bool operator>>(Serializer& strm, const NestedKeyOnly< ::UATM::weatherInfo>& stru);

template <>
struct MarshalTraits< ::UATM::weatherInfo> {
  static void representations_allowed_by_type(DDS::DataRepresentationIdSeq& seq)
  {
    seq.length(4);
    seq[0] = DDS::XCDR_DATA_REPRESENTATION;
    seq[1] = DDS::XCDR2_DATA_REPRESENTATION;
    seq[2] = DDS::XML_DATA_REPRESENTATION;
    seq[3] = OpenDDS::DCPS::UNALIGNED_CDR_DATA_REPRESENTATION;
  }

  static SerializedSizeBound serialized_size_bound(const Encoding& encoding)
  {
    switch (encoding.kind()) {
    case Encoding::KIND_XCDR1:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR2:
      return SerializedSizeBound();
    case Encoding::KIND_UNALIGNED_CDR:
      return SerializedSizeBound(87);
    default:
      OPENDDS_ASSERT(false);
      return SerializedSizeBound();
    }
  }

  static SerializedSizeBound key_only_serialized_size_bound(const Encoding& encoding)
  {
    switch (encoding.kind()) {
    case Encoding::KIND_XCDR1:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR2:
      return SerializedSizeBound();
    case Encoding::KIND_UNALIGNED_CDR:
      return SerializedSizeBound(4);
    default:
      OPENDDS_ASSERT(false);
      return SerializedSizeBound();
    }
  }

  static bool to_message_block(ACE_Message_Block&, const  ::UATM::weatherInfo&) { return false; }
  static bool from_message_block( ::UATM::weatherInfo&, const ACE_Message_Block&) { return false; }
  static Extensibility extensibility() { return APPENDABLE; }
  static Extensibility max_extensibility_level() { return APPENDABLE; }
};
UATM_Export
void serialized_size(const Encoding& encoding, size_t& size, const KeyOnly<const  ::UATM::weatherInfo> stru);

UATM_Export
bool operator<<(Serializer& strm, KeyOnly<const  ::UATM::weatherInfo> stru);

UATM_Export
bool operator>>(Serializer& strm, KeyOnly< ::UATM::weatherInfo> stru);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace UATM {
/// This structure supports use of std::map with one or more keys.
struct UATM_Export weatherInfo_OpenDDS_KeyLessThan {
  bool operator()(const  ::UATM::weatherInfo& v1, const  ::UATM::weatherInfo& v2) const
  {
    using ::operator<; // TAO::String_Manager's operator< is in global NS
    if (v1.weather_id < v2.weather_id) return true;
    if (v2.weather_id < v1.weather_id) return false;
    return false;
  }
};
}

namespace UATM {
class weatherInfoTypeSupportImpl;
}
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace DCPS {
template <>
struct DDSTraits< ::UATM::weatherInfo> {
  typedef  ::UATM::weatherInfo MessageType;
  typedef  ::UATM::weatherInfoSeq MessageSequenceType;
  typedef  ::UATM::weatherInfoSeq::PrivateMemberAccess MessageSequenceAdapterType;
  typedef  ::UATM::weatherInfoTypeSupport TypeSupportType;
  typedef  ::UATM::weatherInfoTypeSupportImpl TypeSupportImplType;
  typedef  ::UATM::weatherInfoDataWriter DataWriterType;
  typedef  ::UATM::weatherInfoDataReader DataReaderType;
  typedef  ::UATM::weatherInfo_OpenDDS_KeyLessThan LessThanType;
  typedef OpenDDS::DCPS::KeyOnly<const  ::UATM::weatherInfo> KeyOnlyType;
  typedef OpenDDS::DCPS::UATM_weatherInfo_xtag XtagType;

  static const char* type_name() { return "UATM::weatherInfo"; }
  static size_t key_count() { return 1; }
  static bool is_key(const char*);
};
} // namespace DCPS
} // namespace OpenDDS
OPENDDS_END_VERSIONED_NAMESPACE_DECL

namespace UATM {
class UATM_Export weatherInfoTypeSupportImpl
  : public virtual OpenDDS::DCPS::TypeSupportImpl_T<weatherInfo>
  , public virtual OpenDDS::DCPS::ValueDispatcher_T<weatherInfo>
{
public:
  typedef weatherInfoTypeSupport TypeSupportType;
  typedef weatherInfoTypeSupport::_var_type _var_type;
  typedef weatherInfoTypeSupport::_ptr_type _ptr_type;

  weatherInfoTypeSupportImpl() {}
  virtual ~weatherInfoTypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_SAFETY_PROFILE
  weatherInfo* create_sample(::DDS::DynamicData_ptr src);
#endif
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType() const;
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */

  virtual const OpenDDS::XTypes::TypeIdentifier& getMinimalTypeIdentifier() const;
  virtual const OpenDDS::XTypes::TypeMap& getMinimalTypeMap() const;

  virtual const OpenDDS::XTypes::TypeIdentifier& getCompleteTypeIdentifier() const;
  virtual const OpenDDS::XTypes::TypeMap& getCompleteTypeMap() const;

  ::DDS::ReturnCode_t encode_to_string(const weatherInfo& in, CORBA::String_out out, OpenDDS::DCPS::RepresentationFormat* format);
  ::DDS::ReturnCode_t encode_to_bytes(const weatherInfo& in, ::DDS::OctetSeq_out out, OpenDDS::DCPS::RepresentationFormat* format);
  ::DDS::ReturnCode_t decode_from_string(const char* in, weatherInfo_out out, OpenDDS::DCPS::RepresentationFormat* format);
  ::DDS::ReturnCode_t decode_from_bytes(const ::DDS::OctetSeq& in, weatherInfo_out out, OpenDDS::DCPS::RepresentationFormat* format);

  static weatherInfoTypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};

}
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

class MetaStruct;

template<typename T>
const MetaStruct& getMetaStruct();

template<>
UATM_Export
const MetaStruct& getMetaStruct< ::UATM::weatherInfo>();
UATM_Export
bool gen_skip_over(Serializer& ser,  ::UATM::weatherInfo*);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif // ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace XTypes {

#ifndef OPENDDS_SAFETY_PROFILE
template <>
UATM_Export DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::weatherInfo,  ::UATM::weatherInfo>(DDS::DynamicType_ptr type, const  ::UATM::weatherInfo& value);

template <>
UATM_Export DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::weatherInfo,  ::UATM::weatherInfo>(DDS::DynamicType_ptr type,  ::UATM::weatherInfo& value);

template <>
UATM_Export const  ::UATM::weatherInfo* get_dynamic_data_adapter_value< ::UATM::weatherInfo,  ::UATM::weatherInfo>(DDS::DynamicData_ptr dd);

#endif // ifndef OPENDDS_SAFETY_PROFILE

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End STRUCT: weatherInfo */

/* End MODULE: UATM */


/* Begin MODULE: UATM */



/* Begin STRUCT: trafficFlowsInfo */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

struct UATM_trafficFlowsInfo_xtag {};
template<> UATM_Export
const XTypes::TypeIdentifier& getMinimalTypeIdentifier<UATM_trafficFlowsInfo_xtag>();

template<> UATM_Export
const XTypes::TypeMap& getMinimalTypeMap<UATM_trafficFlowsInfo_xtag>();

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

UATM_Export
bool vread(OpenDDS::DCPS::ValueReader& value_reader,  ::UATM::trafficFlowsInfo& value);

UATM_Export
bool vread(OpenDDS::DCPS::ValueReader& value_reader, const NestedKeyOnly< ::UATM::trafficFlowsInfo>& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

UATM_Export
bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const  ::UATM::trafficFlowsInfo& value);

UATM_Export
bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const NestedKeyOnly<const  ::UATM::trafficFlowsInfo>& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> UATM_Export
void set_default( ::UATM::trafficFlowsInfo& stru);

UATM_Export
void serialized_size(const Encoding& encoding, size_t& size, const ::UATM::trafficFlowsInfo& stru);

UATM_Export
bool operator<<(Serializer& strm, const ::UATM::trafficFlowsInfo& stru);

UATM_Export
bool operator>>(Serializer& strm,  ::UATM::trafficFlowsInfo& stru);

UATM_Export
void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const ::UATM::trafficFlowsInfo>& stru);

UATM_Export
bool operator<<(Serializer& strm, const NestedKeyOnly<const ::UATM::trafficFlowsInfo>& stru);

UATM_Export
bool operator>>(Serializer& strm, const NestedKeyOnly< ::UATM::trafficFlowsInfo>& stru);

template <>
struct MarshalTraits< ::UATM::trafficFlowsInfo> {
  static void representations_allowed_by_type(DDS::DataRepresentationIdSeq& seq)
  {
    seq.length(4);
    seq[0] = DDS::XCDR_DATA_REPRESENTATION;
    seq[1] = DDS::XCDR2_DATA_REPRESENTATION;
    seq[2] = DDS::XML_DATA_REPRESENTATION;
    seq[3] = OpenDDS::DCPS::UNALIGNED_CDR_DATA_REPRESENTATION;
  }

  static SerializedSizeBound serialized_size_bound(const Encoding& encoding)
  {
    switch (encoding.kind()) {
    case Encoding::KIND_XCDR1:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR2:
      return SerializedSizeBound();
    case Encoding::KIND_UNALIGNED_CDR:
      return SerializedSizeBound(94);
    default:
      OPENDDS_ASSERT(false);
      return SerializedSizeBound();
    }
  }

  static SerializedSizeBound key_only_serialized_size_bound(const Encoding& encoding)
  {
    switch (encoding.kind()) {
    case Encoding::KIND_XCDR1:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR2:
      return SerializedSizeBound();
    case Encoding::KIND_UNALIGNED_CDR:
      return SerializedSizeBound(4);
    default:
      OPENDDS_ASSERT(false);
      return SerializedSizeBound();
    }
  }

  static bool to_message_block(ACE_Message_Block&, const  ::UATM::trafficFlowsInfo&) { return false; }
  static bool from_message_block( ::UATM::trafficFlowsInfo&, const ACE_Message_Block&) { return false; }
  static Extensibility extensibility() { return APPENDABLE; }
  static Extensibility max_extensibility_level() { return APPENDABLE; }
};
UATM_Export
void serialized_size(const Encoding& encoding, size_t& size, const KeyOnly<const  ::UATM::trafficFlowsInfo> stru);

UATM_Export
bool operator<<(Serializer& strm, KeyOnly<const  ::UATM::trafficFlowsInfo> stru);

UATM_Export
bool operator>>(Serializer& strm, KeyOnly< ::UATM::trafficFlowsInfo> stru);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace UATM {
/// This structure supports use of std::map with one or more keys.
struct UATM_Export trafficFlowsInfo_OpenDDS_KeyLessThan {
  bool operator()(const  ::UATM::trafficFlowsInfo& v1, const  ::UATM::trafficFlowsInfo& v2) const
  {
    using ::operator<; // TAO::String_Manager's operator< is in global NS
    if (v1.flows_id < v2.flows_id) return true;
    if (v2.flows_id < v1.flows_id) return false;
    return false;
  }
};
}

namespace UATM {
class trafficFlowsInfoTypeSupportImpl;
}
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace DCPS {
template <>
struct DDSTraits< ::UATM::trafficFlowsInfo> {
  typedef  ::UATM::trafficFlowsInfo MessageType;
  typedef  ::UATM::trafficFlowsInfoSeq MessageSequenceType;
  typedef  ::UATM::trafficFlowsInfoSeq::PrivateMemberAccess MessageSequenceAdapterType;
  typedef  ::UATM::trafficFlowsInfoTypeSupport TypeSupportType;
  typedef  ::UATM::trafficFlowsInfoTypeSupportImpl TypeSupportImplType;
  typedef  ::UATM::trafficFlowsInfoDataWriter DataWriterType;
  typedef  ::UATM::trafficFlowsInfoDataReader DataReaderType;
  typedef  ::UATM::trafficFlowsInfo_OpenDDS_KeyLessThan LessThanType;
  typedef OpenDDS::DCPS::KeyOnly<const  ::UATM::trafficFlowsInfo> KeyOnlyType;
  typedef OpenDDS::DCPS::UATM_trafficFlowsInfo_xtag XtagType;

  static const char* type_name() { return "UATM::trafficFlowsInfo"; }
  static size_t key_count() { return 1; }
  static bool is_key(const char*);
};
} // namespace DCPS
} // namespace OpenDDS
OPENDDS_END_VERSIONED_NAMESPACE_DECL

namespace UATM {
class UATM_Export trafficFlowsInfoTypeSupportImpl
  : public virtual OpenDDS::DCPS::TypeSupportImpl_T<trafficFlowsInfo>
  , public virtual OpenDDS::DCPS::ValueDispatcher_T<trafficFlowsInfo>
{
public:
  typedef trafficFlowsInfoTypeSupport TypeSupportType;
  typedef trafficFlowsInfoTypeSupport::_var_type _var_type;
  typedef trafficFlowsInfoTypeSupport::_ptr_type _ptr_type;

  trafficFlowsInfoTypeSupportImpl() {}
  virtual ~trafficFlowsInfoTypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_SAFETY_PROFILE
  trafficFlowsInfo* create_sample(::DDS::DynamicData_ptr src);
#endif
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType() const;
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */

  virtual const OpenDDS::XTypes::TypeIdentifier& getMinimalTypeIdentifier() const;
  virtual const OpenDDS::XTypes::TypeMap& getMinimalTypeMap() const;

  virtual const OpenDDS::XTypes::TypeIdentifier& getCompleteTypeIdentifier() const;
  virtual const OpenDDS::XTypes::TypeMap& getCompleteTypeMap() const;

  ::DDS::ReturnCode_t encode_to_string(const trafficFlowsInfo& in, CORBA::String_out out, OpenDDS::DCPS::RepresentationFormat* format);
  ::DDS::ReturnCode_t encode_to_bytes(const trafficFlowsInfo& in, ::DDS::OctetSeq_out out, OpenDDS::DCPS::RepresentationFormat* format);
  ::DDS::ReturnCode_t decode_from_string(const char* in, trafficFlowsInfo_out out, OpenDDS::DCPS::RepresentationFormat* format);
  ::DDS::ReturnCode_t decode_from_bytes(const ::DDS::OctetSeq& in, trafficFlowsInfo_out out, OpenDDS::DCPS::RepresentationFormat* format);

  static trafficFlowsInfoTypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};

}
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
UATM_Export
const MetaStruct& getMetaStruct< ::UATM::trafficFlowsInfo>();
UATM_Export
bool gen_skip_over(Serializer& ser,  ::UATM::trafficFlowsInfo*);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif // ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace XTypes {

#ifndef OPENDDS_SAFETY_PROFILE
template <>
UATM_Export DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::trafficFlowsInfo,  ::UATM::trafficFlowsInfo>(DDS::DynamicType_ptr type, const  ::UATM::trafficFlowsInfo& value);

template <>
UATM_Export DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::trafficFlowsInfo,  ::UATM::trafficFlowsInfo>(DDS::DynamicType_ptr type,  ::UATM::trafficFlowsInfo& value);

template <>
UATM_Export const  ::UATM::trafficFlowsInfo* get_dynamic_data_adapter_value< ::UATM::trafficFlowsInfo,  ::UATM::trafficFlowsInfo>(DDS::DynamicData_ptr dd);

#endif // ifndef OPENDDS_SAFETY_PROFILE

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End STRUCT: trafficFlowsInfo */

/* End MODULE: UATM */


/* Begin MODULE: UATM */



/* Begin STRUCT: asirspaceRestrictions */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

struct UATM_asirspaceRestrictions_xtag {};
template<> UATM_Export
const XTypes::TypeIdentifier& getMinimalTypeIdentifier<UATM_asirspaceRestrictions_xtag>();

template<> UATM_Export
const XTypes::TypeMap& getMinimalTypeMap<UATM_asirspaceRestrictions_xtag>();

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

UATM_Export
bool vread(OpenDDS::DCPS::ValueReader& value_reader,  ::UATM::asirspaceRestrictions& value);

UATM_Export
bool vread(OpenDDS::DCPS::ValueReader& value_reader, const NestedKeyOnly< ::UATM::asirspaceRestrictions>& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

UATM_Export
bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const  ::UATM::asirspaceRestrictions& value);

UATM_Export
bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const NestedKeyOnly<const  ::UATM::asirspaceRestrictions>& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> UATM_Export
void set_default( ::UATM::asirspaceRestrictions& stru);

UATM_Export
void serialized_size(const Encoding& encoding, size_t& size, const ::UATM::asirspaceRestrictions& stru);

UATM_Export
bool operator<<(Serializer& strm, const ::UATM::asirspaceRestrictions& stru);

UATM_Export
bool operator>>(Serializer& strm,  ::UATM::asirspaceRestrictions& stru);

UATM_Export
void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const ::UATM::asirspaceRestrictions>& stru);

UATM_Export
bool operator<<(Serializer& strm, const NestedKeyOnly<const ::UATM::asirspaceRestrictions>& stru);

UATM_Export
bool operator>>(Serializer& strm, const NestedKeyOnly< ::UATM::asirspaceRestrictions>& stru);

template <>
struct MarshalTraits< ::UATM::asirspaceRestrictions> {
  static void representations_allowed_by_type(DDS::DataRepresentationIdSeq& seq)
  {
    seq.length(4);
    seq[0] = DDS::XCDR_DATA_REPRESENTATION;
    seq[1] = DDS::XCDR2_DATA_REPRESENTATION;
    seq[2] = DDS::XML_DATA_REPRESENTATION;
    seq[3] = OpenDDS::DCPS::UNALIGNED_CDR_DATA_REPRESENTATION;
  }

  static SerializedSizeBound serialized_size_bound(const Encoding& encoding)
  {
    switch (encoding.kind()) {
    case Encoding::KIND_XCDR1:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR2:
      return SerializedSizeBound();
    case Encoding::KIND_UNALIGNED_CDR:
      return SerializedSizeBound(129);
    default:
      OPENDDS_ASSERT(false);
      return SerializedSizeBound();
    }
  }

  static SerializedSizeBound key_only_serialized_size_bound(const Encoding& encoding)
  {
    switch (encoding.kind()) {
    case Encoding::KIND_XCDR1:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR2:
      return SerializedSizeBound();
    case Encoding::KIND_UNALIGNED_CDR:
      return SerializedSizeBound(4);
    default:
      OPENDDS_ASSERT(false);
      return SerializedSizeBound();
    }
  }

  static bool to_message_block(ACE_Message_Block&, const  ::UATM::asirspaceRestrictions&) { return false; }
  static bool from_message_block( ::UATM::asirspaceRestrictions&, const ACE_Message_Block&) { return false; }
  static Extensibility extensibility() { return APPENDABLE; }
  static Extensibility max_extensibility_level() { return APPENDABLE; }
};
UATM_Export
void serialized_size(const Encoding& encoding, size_t& size, const KeyOnly<const  ::UATM::asirspaceRestrictions> stru);

UATM_Export
bool operator<<(Serializer& strm, KeyOnly<const  ::UATM::asirspaceRestrictions> stru);

UATM_Export
bool operator>>(Serializer& strm, KeyOnly< ::UATM::asirspaceRestrictions> stru);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace UATM {
/// This structure supports use of std::map with one or more keys.
struct UATM_Export asirspaceRestrictions_OpenDDS_KeyLessThan {
  bool operator()(const  ::UATM::asirspaceRestrictions& v1, const  ::UATM::asirspaceRestrictions& v2) const
  {
    using ::operator<; // TAO::String_Manager's operator< is in global NS
    if (v1.restriction_id < v2.restriction_id) return true;
    if (v2.restriction_id < v1.restriction_id) return false;
    return false;
  }
};
}

namespace UATM {
class asirspaceRestrictionsTypeSupportImpl;
}
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace DCPS {
template <>
struct DDSTraits< ::UATM::asirspaceRestrictions> {
  typedef  ::UATM::asirspaceRestrictions MessageType;
  typedef  ::UATM::asirspaceRestrictionsSeq MessageSequenceType;
  typedef  ::UATM::asirspaceRestrictionsSeq::PrivateMemberAccess MessageSequenceAdapterType;
  typedef  ::UATM::asirspaceRestrictionsTypeSupport TypeSupportType;
  typedef  ::UATM::asirspaceRestrictionsTypeSupportImpl TypeSupportImplType;
  typedef  ::UATM::asirspaceRestrictionsDataWriter DataWriterType;
  typedef  ::UATM::asirspaceRestrictionsDataReader DataReaderType;
  typedef  ::UATM::asirspaceRestrictions_OpenDDS_KeyLessThan LessThanType;
  typedef OpenDDS::DCPS::KeyOnly<const  ::UATM::asirspaceRestrictions> KeyOnlyType;
  typedef OpenDDS::DCPS::UATM_asirspaceRestrictions_xtag XtagType;

  static const char* type_name() { return "UATM::asirspaceRestrictions"; }
  static size_t key_count() { return 1; }
  static bool is_key(const char*);
};
} // namespace DCPS
} // namespace OpenDDS
OPENDDS_END_VERSIONED_NAMESPACE_DECL

namespace UATM {
class UATM_Export asirspaceRestrictionsTypeSupportImpl
  : public virtual OpenDDS::DCPS::TypeSupportImpl_T<asirspaceRestrictions>
  , public virtual OpenDDS::DCPS::ValueDispatcher_T<asirspaceRestrictions>
{
public:
  typedef asirspaceRestrictionsTypeSupport TypeSupportType;
  typedef asirspaceRestrictionsTypeSupport::_var_type _var_type;
  typedef asirspaceRestrictionsTypeSupport::_ptr_type _ptr_type;

  asirspaceRestrictionsTypeSupportImpl() {}
  virtual ~asirspaceRestrictionsTypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_SAFETY_PROFILE
  asirspaceRestrictions* create_sample(::DDS::DynamicData_ptr src);
#endif
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType() const;
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */

  virtual const OpenDDS::XTypes::TypeIdentifier& getMinimalTypeIdentifier() const;
  virtual const OpenDDS::XTypes::TypeMap& getMinimalTypeMap() const;

  virtual const OpenDDS::XTypes::TypeIdentifier& getCompleteTypeIdentifier() const;
  virtual const OpenDDS::XTypes::TypeMap& getCompleteTypeMap() const;

  ::DDS::ReturnCode_t encode_to_string(const asirspaceRestrictions& in, CORBA::String_out out, OpenDDS::DCPS::RepresentationFormat* format);
  ::DDS::ReturnCode_t encode_to_bytes(const asirspaceRestrictions& in, ::DDS::OctetSeq_out out, OpenDDS::DCPS::RepresentationFormat* format);
  ::DDS::ReturnCode_t decode_from_string(const char* in, asirspaceRestrictions_out out, OpenDDS::DCPS::RepresentationFormat* format);
  ::DDS::ReturnCode_t decode_from_bytes(const ::DDS::OctetSeq& in, asirspaceRestrictions_out out, OpenDDS::DCPS::RepresentationFormat* format);

  static asirspaceRestrictionsTypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};

}
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
UATM_Export
const MetaStruct& getMetaStruct< ::UATM::asirspaceRestrictions>();
UATM_Export
bool gen_skip_over(Serializer& ser,  ::UATM::asirspaceRestrictions*);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif // ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace XTypes {

#ifndef OPENDDS_SAFETY_PROFILE
template <>
UATM_Export DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::asirspaceRestrictions,  ::UATM::asirspaceRestrictions>(DDS::DynamicType_ptr type, const  ::UATM::asirspaceRestrictions& value);

template <>
UATM_Export DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::asirspaceRestrictions,  ::UATM::asirspaceRestrictions>(DDS::DynamicType_ptr type,  ::UATM::asirspaceRestrictions& value);

template <>
UATM_Export const  ::UATM::asirspaceRestrictions* get_dynamic_data_adapter_value< ::UATM::asirspaceRestrictions,  ::UATM::asirspaceRestrictions>(DDS::DynamicData_ptr dd);

#endif // ifndef OPENDDS_SAFETY_PROFILE

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End STRUCT: asirspaceRestrictions */

/* End MODULE: UATM */


/* Begin MODULE: UATM */



/* Begin STRUCT: acceptableRoute */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

struct UATM_acceptableRoute_xtag {};
template<> UATM_Export
const XTypes::TypeIdentifier& getMinimalTypeIdentifier<UATM_acceptableRoute_xtag>();

template<> UATM_Export
const XTypes::TypeMap& getMinimalTypeMap<UATM_acceptableRoute_xtag>();

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

UATM_Export
bool vread(OpenDDS::DCPS::ValueReader& value_reader,  ::UATM::acceptableRoute& value);

UATM_Export
bool vread(OpenDDS::DCPS::ValueReader& value_reader, const NestedKeyOnly< ::UATM::acceptableRoute>& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

UATM_Export
bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const  ::UATM::acceptableRoute& value);

UATM_Export
bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const NestedKeyOnly<const  ::UATM::acceptableRoute>& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> UATM_Export
void set_default( ::UATM::acceptableRoute& stru);

UATM_Export
void serialized_size(const Encoding& encoding, size_t& size, const ::UATM::acceptableRoute& stru);

UATM_Export
bool operator<<(Serializer& strm, const ::UATM::acceptableRoute& stru);

UATM_Export
bool operator>>(Serializer& strm,  ::UATM::acceptableRoute& stru);

UATM_Export
void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const ::UATM::acceptableRoute>& stru);

UATM_Export
bool operator<<(Serializer& strm, const NestedKeyOnly<const ::UATM::acceptableRoute>& stru);

UATM_Export
bool operator>>(Serializer& strm, const NestedKeyOnly< ::UATM::acceptableRoute>& stru);

template <>
struct MarshalTraits< ::UATM::acceptableRoute> {
  static void representations_allowed_by_type(DDS::DataRepresentationIdSeq& seq)
  {
    seq.length(4);
    seq[0] = DDS::XCDR_DATA_REPRESENTATION;
    seq[1] = DDS::XCDR2_DATA_REPRESENTATION;
    seq[2] = DDS::XML_DATA_REPRESENTATION;
    seq[3] = OpenDDS::DCPS::UNALIGNED_CDR_DATA_REPRESENTATION;
  }

  static SerializedSizeBound serialized_size_bound(const Encoding& encoding)
  {
    switch (encoding.kind()) {
    case Encoding::KIND_XCDR1:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR2:
      return SerializedSizeBound();
    case Encoding::KIND_UNALIGNED_CDR:
      return SerializedSizeBound(129);
    default:
      OPENDDS_ASSERT(false);
      return SerializedSizeBound();
    }
  }

  static SerializedSizeBound key_only_serialized_size_bound(const Encoding& encoding)
  {
    switch (encoding.kind()) {
    case Encoding::KIND_XCDR1:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR2:
      return SerializedSizeBound();
    case Encoding::KIND_UNALIGNED_CDR:
      return SerializedSizeBound(0);
    default:
      OPENDDS_ASSERT(false);
      return SerializedSizeBound();
    }
  }

  static bool to_message_block(ACE_Message_Block&, const  ::UATM::acceptableRoute&) { return false; }
  static bool from_message_block( ::UATM::acceptableRoute&, const ACE_Message_Block&) { return false; }
  static Extensibility extensibility() { return APPENDABLE; }
  static Extensibility max_extensibility_level() { return APPENDABLE; }
};
UATM_Export
void serialized_size(const Encoding& encoding, size_t& size, const KeyOnly<const  ::UATM::acceptableRoute> stru);

UATM_Export
bool operator<<(Serializer& strm, KeyOnly<const  ::UATM::acceptableRoute> stru);

UATM_Export
bool operator>>(Serializer& strm, KeyOnly< ::UATM::acceptableRoute> stru);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace UATM {
/// This structure supports use of std::map with one or more keys.
struct UATM_Export acceptableRoute_OpenDDS_KeyLessThan {
  bool operator()(const  ::UATM::acceptableRoute&, const  ::UATM::acceptableRoute&) const
  {
    // With no keys, return false to allow use of
    // map with just one entry
    return false;
  }
};
}

namespace UATM {
class acceptableRouteTypeSupportImpl;
}
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace DCPS {
template <>
struct DDSTraits< ::UATM::acceptableRoute> {
  typedef  ::UATM::acceptableRoute MessageType;
  typedef  ::UATM::acceptableRouteSeq MessageSequenceType;
  typedef  ::UATM::acceptableRouteSeq::PrivateMemberAccess MessageSequenceAdapterType;
  typedef  ::UATM::acceptableRouteTypeSupport TypeSupportType;
  typedef  ::UATM::acceptableRouteTypeSupportImpl TypeSupportImplType;
  typedef  ::UATM::acceptableRouteDataWriter DataWriterType;
  typedef  ::UATM::acceptableRouteDataReader DataReaderType;
  typedef  ::UATM::acceptableRoute_OpenDDS_KeyLessThan LessThanType;
  typedef OpenDDS::DCPS::KeyOnly<const  ::UATM::acceptableRoute> KeyOnlyType;
  typedef OpenDDS::DCPS::UATM_acceptableRoute_xtag XtagType;

  static const char* type_name() { return "UATM::acceptableRoute"; }
  static size_t key_count() { return 0; }
  static bool is_key(const char*);
};
} // namespace DCPS
} // namespace OpenDDS
OPENDDS_END_VERSIONED_NAMESPACE_DECL

namespace UATM {
class UATM_Export acceptableRouteTypeSupportImpl
  : public virtual OpenDDS::DCPS::TypeSupportImpl_T<acceptableRoute>
  , public virtual OpenDDS::DCPS::ValueDispatcher_T<acceptableRoute>
{
public:
  typedef acceptableRouteTypeSupport TypeSupportType;
  typedef acceptableRouteTypeSupport::_var_type _var_type;
  typedef acceptableRouteTypeSupport::_ptr_type _ptr_type;

  acceptableRouteTypeSupportImpl() {}
  virtual ~acceptableRouteTypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_SAFETY_PROFILE
  acceptableRoute* create_sample(::DDS::DynamicData_ptr src);
#endif
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType() const;
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */

  virtual const OpenDDS::XTypes::TypeIdentifier& getMinimalTypeIdentifier() const;
  virtual const OpenDDS::XTypes::TypeMap& getMinimalTypeMap() const;

  virtual const OpenDDS::XTypes::TypeIdentifier& getCompleteTypeIdentifier() const;
  virtual const OpenDDS::XTypes::TypeMap& getCompleteTypeMap() const;

  ::DDS::ReturnCode_t encode_to_string(const acceptableRoute& in, CORBA::String_out out, OpenDDS::DCPS::RepresentationFormat* format);
  ::DDS::ReturnCode_t encode_to_bytes(const acceptableRoute& in, ::DDS::OctetSeq_out out, OpenDDS::DCPS::RepresentationFormat* format);
  ::DDS::ReturnCode_t decode_from_string(const char* in, acceptableRoute_out out, OpenDDS::DCPS::RepresentationFormat* format);
  ::DDS::ReturnCode_t decode_from_bytes(const ::DDS::OctetSeq& in, acceptableRoute_out out, OpenDDS::DCPS::RepresentationFormat* format);

  static acceptableRouteTypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};

}
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
UATM_Export
const MetaStruct& getMetaStruct< ::UATM::acceptableRoute>();
UATM_Export
bool gen_skip_over(Serializer& ser,  ::UATM::acceptableRoute*);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif // ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace XTypes {

#ifndef OPENDDS_SAFETY_PROFILE
template <>
UATM_Export DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::acceptableRoute,  ::UATM::acceptableRoute>(DDS::DynamicType_ptr type, const  ::UATM::acceptableRoute& value);

template <>
UATM_Export DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::acceptableRoute,  ::UATM::acceptableRoute>(DDS::DynamicType_ptr type,  ::UATM::acceptableRoute& value);

template <>
UATM_Export const  ::UATM::acceptableRoute* get_dynamic_data_adapter_value< ::UATM::acceptableRoute,  ::UATM::acceptableRoute>(DDS::DynamicData_ptr dd);

#endif // ifndef OPENDDS_SAFETY_PROFILE

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End STRUCT: acceptableRoute */

/* End MODULE: UATM */
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif /* OPENDDS_IDL_GENERATED_UATMTYPESUPPORTIMPL_H_I1O8JY */
