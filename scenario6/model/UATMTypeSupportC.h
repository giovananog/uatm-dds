// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.5.21
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_codegen.cpp:148

#ifndef _TAO_IDL_UATMTYPESUPPORTC_QGPIZ4_H_
#define _TAO_IDL_UATMTYPESUPPORTC_QGPIZ4_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include /**/ "UATM_export.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/Basic_Types_IDLv4.h"
TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  using namespace IDLv4;
}

TAO_END_VERSIONED_NAMESPACE_DECL

#include "tao/ORB_Constants.h"
#include "dds/DCPS/ZeroCopyInfoSeq_T.h"
#include "dds/DCPS/ZeroCopySeq_T.h"
#include "tao/Object.h"
#include "tao/String_Manager_T.h"
#include "tao/Sequence_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/Seq_Var_T.h"
#include "tao/Seq_Out_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include "tao/UB_String_Arguments.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#include "UATMC.h"
#include "dds/DdsDcpsInfrastructureC.h"
#include "dds/DdsDcpsPublicationC.h"
#include "dds/DdsDcpsSubscriptionExtC.h"
#include "dds/DdsDcpsTopicC.h"
#include "dds/DdsDcpsTypeSupportExtC.h"
#include "dds/DdsDynamicDataC.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 5 || TAO_MICRO_VERSION != 21
#error This file should be regenerated with TAO_IDL
#endif
// TAO_IDL - Generated from
// C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_module\module_ch.cpp:34

namespace UATM
{

  
  // TAO_IDL - Generated from
  // C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_sequence\sequence_ch.cpp:98

  

  typedef ::TAO::DCPS::ZeroCopyDataSeq< UATM::flightAuthorization, DCPS_ZERO_COPY_SEQ_DEFAULT_SIZE> flightAuthorizationSeq;
  
  // TAO_IDL - Generated from
  // C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_interface.cpp:747

  

#if !defined (_UATM_FLIGHTAUTHORIZATIONTYPESUPPORT__VAR_OUT_CH_)
#define _UATM_FLIGHTAUTHORIZATIONTYPESUPPORT__VAR_OUT_CH_

  class flightAuthorizationTypeSupport;
  typedef flightAuthorizationTypeSupport *flightAuthorizationTypeSupport_ptr;
  typedef TAO_Objref_Var_T<flightAuthorizationTypeSupport> flightAuthorizationTypeSupport_var;
  typedef TAO_Objref_Out_T<flightAuthorizationTypeSupport> flightAuthorizationTypeSupport_out;
  

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_interface\interface_ch.cpp:39

  

  class UATM_Export flightAuthorizationTypeSupport
    : public virtual ::OpenDDS::DCPS::TypeSupport
  
  {
  public:
    // TAO_IDL - Generated from
    // C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_type.cpp:302

    typedef flightAuthorizationTypeSupport_ptr _ptr_type;
    typedef flightAuthorizationTypeSupport_var _var_type;
    typedef flightAuthorizationTypeSupport_out _out_type;

    // The static operations.
    static flightAuthorizationTypeSupport_ptr _duplicate (flightAuthorizationTypeSupport_ptr obj);

    static void _tao_release (flightAuthorizationTypeSupport_ptr obj);

    static flightAuthorizationTypeSupport_ptr _narrow (::CORBA::Object_ptr obj);
    static flightAuthorizationTypeSupport_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static flightAuthorizationTypeSupport_ptr _nil (void);

    virtual ::DDS::ReturnCode_t create_sample_rc (
      ::UATM::flightAuthorization & dst,
      ::DDS::DynamicData_ptr src) = 0;

    virtual ::UATM::flightAuthorization * create_sample (
      ::DDS::DynamicData_ptr src) = 0;

    virtual ::DDS::ReturnCode_t create_dynamic_sample_rc (
      ::DDS::DynamicData_ptr & dst,
      const ::UATM::flightAuthorization & src) = 0;

    virtual ::DDS::DynamicData_ptr create_dynamic_sample (
      const ::UATM::flightAuthorization & src) = 0;

    virtual ::DDS::ReturnCode_t encode_to_string (
      const ::UATM::flightAuthorization & sample,
      ::CORBA::String_out encoded,
      ::OpenDDS::DCPS::RepresentationFormat_ptr format) = 0;

    virtual ::DDS::ReturnCode_t encode_to_bytes (
      const ::UATM::flightAuthorization & sample,
      ::DDS::OctetSeq_out encoded,
      ::OpenDDS::DCPS::RepresentationFormat_ptr format) = 0;

    virtual ::DDS::ReturnCode_t decode_from_string (
      const char * encoded,
      ::UATM::flightAuthorization_out sample,
      ::OpenDDS::DCPS::RepresentationFormat_ptr format) = 0;

    virtual ::DDS::ReturnCode_t decode_from_bytes (
      const ::DDS::OctetSeq & encoded,
      ::UATM::flightAuthorization_out sample,
      ::OpenDDS::DCPS::RepresentationFormat_ptr format) = 0;

    
    // TAO_IDL - Generated from
    // C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_interface\interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    flightAuthorizationTypeSupport (void);

    

    virtual ~flightAuthorizationTypeSupport (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    ACE_UNIMPLEMENTED_FUNC (flightAuthorizationTypeSupport (const flightAuthorizationTypeSupport &))
#if defined (ACE_HAS_CPP11)
    ACE_UNIMPLEMENTED_FUNC (flightAuthorizationTypeSupport (flightAuthorizationTypeSupport &&))
#endif /* ACE_HAS_CPP11 */
    ACE_UNIMPLEMENTED_FUNC (flightAuthorizationTypeSupport &operator= (const flightAuthorizationTypeSupport &))
#if defined (ACE_HAS_CPP11)
    ACE_UNIMPLEMENTED_FUNC (flightAuthorizationTypeSupport &operator= (flightAuthorizationTypeSupport &&))
#endif /* ACE_HAS_CPP11 */
  };
  // TAO_IDL - Generated from
  // C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_interface.cpp:747

  

#if !defined (_UATM_FLIGHTAUTHORIZATIONDATAWRITER__VAR_OUT_CH_)
#define _UATM_FLIGHTAUTHORIZATIONDATAWRITER__VAR_OUT_CH_

  class flightAuthorizationDataWriter;
  typedef flightAuthorizationDataWriter *flightAuthorizationDataWriter_ptr;
  typedef TAO_Objref_Var_T<flightAuthorizationDataWriter> flightAuthorizationDataWriter_var;
  typedef TAO_Objref_Out_T<flightAuthorizationDataWriter> flightAuthorizationDataWriter_out;
  

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_interface\interface_ch.cpp:39

  

  class UATM_Export flightAuthorizationDataWriter
    : public virtual ::DDS::DataWriter
  
  {
  public:
    // TAO_IDL - Generated from
    // C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_type.cpp:302

    typedef flightAuthorizationDataWriter_ptr _ptr_type;
    typedef flightAuthorizationDataWriter_var _var_type;
    typedef flightAuthorizationDataWriter_out _out_type;

    // The static operations.
    static flightAuthorizationDataWriter_ptr _duplicate (flightAuthorizationDataWriter_ptr obj);

    static void _tao_release (flightAuthorizationDataWriter_ptr obj);

    static flightAuthorizationDataWriter_ptr _narrow (::CORBA::Object_ptr obj);
    static flightAuthorizationDataWriter_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static flightAuthorizationDataWriter_ptr _nil (void);

    virtual ::DDS::InstanceHandle_t register_instance (
      const ::UATM::flightAuthorization & instance) = 0;

    virtual ::DDS::InstanceHandle_t register_instance_w_timestamp (
      const ::UATM::flightAuthorization & instance,
      const ::DDS::Time_t & timestamp) = 0;

    virtual ::DDS::ReturnCode_t unregister_instance (
      const ::UATM::flightAuthorization & instance,
      ::DDS::InstanceHandle_t handle) = 0;

    virtual ::DDS::ReturnCode_t unregister_instance_w_timestamp (
      const ::UATM::flightAuthorization & instance,
      ::DDS::InstanceHandle_t handle,
      const ::DDS::Time_t & timestamp) = 0;

    virtual ::DDS::ReturnCode_t write (
      const ::UATM::flightAuthorization & instance_data,
      ::DDS::InstanceHandle_t handle) = 0;

    virtual ::DDS::ReturnCode_t write_w_timestamp (
      const ::UATM::flightAuthorization & instance_data,
      ::DDS::InstanceHandle_t handle,
      const ::DDS::Time_t & source_timestamp) = 0;

    virtual ::DDS::ReturnCode_t dispose (
      const ::UATM::flightAuthorization & instance_data,
      ::DDS::InstanceHandle_t instance_handle) = 0;

    virtual ::DDS::ReturnCode_t dispose_w_timestamp (
      const ::UATM::flightAuthorization & instance_data,
      ::DDS::InstanceHandle_t instance_handle,
      const ::DDS::Time_t & source_timestamp) = 0;

    virtual ::DDS::ReturnCode_t get_key_value (
      ::UATM::flightAuthorization & key_holder,
      ::DDS::InstanceHandle_t handle) = 0;

    virtual ::DDS::InstanceHandle_t lookup_instance (
      const ::UATM::flightAuthorization & instance_data) = 0;

    
    // TAO_IDL - Generated from
    // C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_interface\interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    flightAuthorizationDataWriter (void);

    

    virtual ~flightAuthorizationDataWriter (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    ACE_UNIMPLEMENTED_FUNC (flightAuthorizationDataWriter (const flightAuthorizationDataWriter &))
#if defined (ACE_HAS_CPP11)
    ACE_UNIMPLEMENTED_FUNC (flightAuthorizationDataWriter (flightAuthorizationDataWriter &&))
#endif /* ACE_HAS_CPP11 */
    ACE_UNIMPLEMENTED_FUNC (flightAuthorizationDataWriter &operator= (const flightAuthorizationDataWriter &))
#if defined (ACE_HAS_CPP11)
    ACE_UNIMPLEMENTED_FUNC (flightAuthorizationDataWriter &operator= (flightAuthorizationDataWriter &&))
#endif /* ACE_HAS_CPP11 */
  };
  // TAO_IDL - Generated from
  // C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_interface.cpp:747

  

#if !defined (_UATM_FLIGHTAUTHORIZATIONDATAREADER__VAR_OUT_CH_)
#define _UATM_FLIGHTAUTHORIZATIONDATAREADER__VAR_OUT_CH_

  class flightAuthorizationDataReader;
  typedef flightAuthorizationDataReader *flightAuthorizationDataReader_ptr;
  typedef TAO_Objref_Var_T<flightAuthorizationDataReader> flightAuthorizationDataReader_var;
  typedef TAO_Objref_Out_T<flightAuthorizationDataReader> flightAuthorizationDataReader_out;
  

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_interface\interface_ch.cpp:39

  

  class UATM_Export flightAuthorizationDataReader
    : public virtual ::OpenDDS::DCPS::DataReaderEx
  
  {
  public:
    // TAO_IDL - Generated from
    // C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_type.cpp:302

    typedef flightAuthorizationDataReader_ptr _ptr_type;
    typedef flightAuthorizationDataReader_var _var_type;
    typedef flightAuthorizationDataReader_out _out_type;

    // The static operations.
    static flightAuthorizationDataReader_ptr _duplicate (flightAuthorizationDataReader_ptr obj);

    static void _tao_release (flightAuthorizationDataReader_ptr obj);

    static flightAuthorizationDataReader_ptr _narrow (::CORBA::Object_ptr obj);
    static flightAuthorizationDataReader_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static flightAuthorizationDataReader_ptr _nil (void);

    virtual ::DDS::ReturnCode_t read (
      ::UATM::flightAuthorizationSeq & received_data,
      ::DDS::SampleInfoSeq & info_seq,
      ::CORBA::Long max_samples,
      ::DDS::SampleStateMask sample_states,
      ::DDS::ViewStateMask view_states,
      ::DDS::InstanceStateMask instance_states) = 0;

    virtual ::DDS::ReturnCode_t take (
      ::UATM::flightAuthorizationSeq & received_data,
      ::DDS::SampleInfoSeq & info_seq,
      ::CORBA::Long max_samples,
      ::DDS::SampleStateMask sample_states,
      ::DDS::ViewStateMask view_states,
      ::DDS::InstanceStateMask instance_states) = 0;

    virtual ::DDS::ReturnCode_t read_w_condition (
      ::UATM::flightAuthorizationSeq & data_values,
      ::DDS::SampleInfoSeq & sample_infos,
      ::CORBA::Long max_samples,
      ::DDS::ReadCondition_ptr a_condition) = 0;

    virtual ::DDS::ReturnCode_t take_w_condition (
      ::UATM::flightAuthorizationSeq & data_values,
      ::DDS::SampleInfoSeq & sample_infos,
      ::CORBA::Long max_samples,
      ::DDS::ReadCondition_ptr a_condition) = 0;

    virtual ::DDS::ReturnCode_t read_next_sample (
      ::UATM::flightAuthorization & received_data,
      ::DDS::SampleInfo & sample_info) = 0;

    virtual ::DDS::ReturnCode_t take_next_sample (
      ::UATM::flightAuthorization & received_data,
      ::DDS::SampleInfo & sample_info) = 0;

    virtual ::DDS::ReturnCode_t read_instance (
      ::UATM::flightAuthorizationSeq & received_data,
      ::DDS::SampleInfoSeq & info_seq,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t a_handle,
      ::DDS::SampleStateMask sample_states,
      ::DDS::ViewStateMask view_states,
      ::DDS::InstanceStateMask instance_states) = 0;

    virtual ::DDS::ReturnCode_t take_instance (
      ::UATM::flightAuthorizationSeq & received_data,
      ::DDS::SampleInfoSeq & info_seq,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t a_handle,
      ::DDS::SampleStateMask sample_states,
      ::DDS::ViewStateMask view_states,
      ::DDS::InstanceStateMask instance_states) = 0;

    virtual ::DDS::ReturnCode_t read_instance_w_condition (
      ::UATM::flightAuthorizationSeq & received_data,
      ::DDS::SampleInfoSeq & sample_infos,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t a_handle,
      ::DDS::ReadCondition_ptr a_condition) = 0;

    virtual ::DDS::ReturnCode_t take_instance_w_condition (
      ::UATM::flightAuthorizationSeq & received_data,
      ::DDS::SampleInfoSeq & sample_infos,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t a_handle,
      ::DDS::ReadCondition_ptr a_condition) = 0;

    virtual ::DDS::ReturnCode_t read_next_instance (
      ::UATM::flightAuthorizationSeq & received_data,
      ::DDS::SampleInfoSeq & info_seq,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t a_handle,
      ::DDS::SampleStateMask sample_states,
      ::DDS::ViewStateMask view_states,
      ::DDS::InstanceStateMask instance_states) = 0;

    virtual ::DDS::ReturnCode_t take_next_instance (
      ::UATM::flightAuthorizationSeq & received_data,
      ::DDS::SampleInfoSeq & info_seq,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t a_handle,
      ::DDS::SampleStateMask sample_states,
      ::DDS::ViewStateMask view_states,
      ::DDS::InstanceStateMask instance_states) = 0;

    virtual ::DDS::ReturnCode_t read_next_instance_w_condition (
      ::UATM::flightAuthorizationSeq & data_values,
      ::DDS::SampleInfoSeq & sample_infos,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t previous_handle,
      ::DDS::ReadCondition_ptr a_condition) = 0;

    virtual ::DDS::ReturnCode_t take_next_instance_w_condition (
      ::UATM::flightAuthorizationSeq & data_values,
      ::DDS::SampleInfoSeq & sample_infos,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t previous_handle,
      ::DDS::ReadCondition_ptr a_condition) = 0;

    virtual ::DDS::ReturnCode_t return_loan (
      ::UATM::flightAuthorizationSeq & received_data,
      ::DDS::SampleInfoSeq & info_seq) = 0;

    virtual ::DDS::ReturnCode_t get_key_value (
      ::UATM::flightAuthorization & key_holder,
      ::DDS::InstanceHandle_t handle) = 0;

    virtual ::DDS::InstanceHandle_t lookup_instance (
      const ::UATM::flightAuthorization & instance_data) = 0;

    
    // TAO_IDL - Generated from
    // C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_interface\interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    flightAuthorizationDataReader (void);

    

    virtual ~flightAuthorizationDataReader (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    ACE_UNIMPLEMENTED_FUNC (flightAuthorizationDataReader (const flightAuthorizationDataReader &))
#if defined (ACE_HAS_CPP11)
    ACE_UNIMPLEMENTED_FUNC (flightAuthorizationDataReader (flightAuthorizationDataReader &&))
#endif /* ACE_HAS_CPP11 */
    ACE_UNIMPLEMENTED_FUNC (flightAuthorizationDataReader &operator= (const flightAuthorizationDataReader &))
#if defined (ACE_HAS_CPP11)
    ACE_UNIMPLEMENTED_FUNC (flightAuthorizationDataReader &operator= (flightAuthorizationDataReader &&))
#endif /* ACE_HAS_CPP11 */
  };


// TAO_IDL - Generated from
// C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_module\module_ch.cpp:62


} // module UATM
// TAO_IDL - Generated from
// C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_module\module_ch.cpp:34

namespace UATM
{

  
  // TAO_IDL - Generated from
  // C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_sequence\sequence_ch.cpp:98

  

  typedef ::TAO::DCPS::ZeroCopyDataSeq< UATM::flightChangeRec, DCPS_ZERO_COPY_SEQ_DEFAULT_SIZE> flightChangeRecSeq;
  
  // TAO_IDL - Generated from
  // C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_interface.cpp:747

  

#if !defined (_UATM_FLIGHTCHANGERECTYPESUPPORT__VAR_OUT_CH_)
#define _UATM_FLIGHTCHANGERECTYPESUPPORT__VAR_OUT_CH_

  class flightChangeRecTypeSupport;
  typedef flightChangeRecTypeSupport *flightChangeRecTypeSupport_ptr;
  typedef TAO_Objref_Var_T<flightChangeRecTypeSupport> flightChangeRecTypeSupport_var;
  typedef TAO_Objref_Out_T<flightChangeRecTypeSupport> flightChangeRecTypeSupport_out;
  

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_interface\interface_ch.cpp:39

  

  class UATM_Export flightChangeRecTypeSupport
    : public virtual ::OpenDDS::DCPS::TypeSupport
  
  {
  public:
    // TAO_IDL - Generated from
    // C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_type.cpp:302

    typedef flightChangeRecTypeSupport_ptr _ptr_type;
    typedef flightChangeRecTypeSupport_var _var_type;
    typedef flightChangeRecTypeSupport_out _out_type;

    // The static operations.
    static flightChangeRecTypeSupport_ptr _duplicate (flightChangeRecTypeSupport_ptr obj);

    static void _tao_release (flightChangeRecTypeSupport_ptr obj);

    static flightChangeRecTypeSupport_ptr _narrow (::CORBA::Object_ptr obj);
    static flightChangeRecTypeSupport_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static flightChangeRecTypeSupport_ptr _nil (void);

    virtual ::DDS::ReturnCode_t create_sample_rc (
      ::UATM::flightChangeRec & dst,
      ::DDS::DynamicData_ptr src) = 0;

    virtual ::UATM::flightChangeRec * create_sample (
      ::DDS::DynamicData_ptr src) = 0;

    virtual ::DDS::ReturnCode_t create_dynamic_sample_rc (
      ::DDS::DynamicData_ptr & dst,
      const ::UATM::flightChangeRec & src) = 0;

    virtual ::DDS::DynamicData_ptr create_dynamic_sample (
      const ::UATM::flightChangeRec & src) = 0;

    virtual ::DDS::ReturnCode_t encode_to_string (
      const ::UATM::flightChangeRec & sample,
      ::CORBA::String_out encoded,
      ::OpenDDS::DCPS::RepresentationFormat_ptr format) = 0;

    virtual ::DDS::ReturnCode_t encode_to_bytes (
      const ::UATM::flightChangeRec & sample,
      ::DDS::OctetSeq_out encoded,
      ::OpenDDS::DCPS::RepresentationFormat_ptr format) = 0;

    virtual ::DDS::ReturnCode_t decode_from_string (
      const char * encoded,
      ::UATM::flightChangeRec_out sample,
      ::OpenDDS::DCPS::RepresentationFormat_ptr format) = 0;

    virtual ::DDS::ReturnCode_t decode_from_bytes (
      const ::DDS::OctetSeq & encoded,
      ::UATM::flightChangeRec_out sample,
      ::OpenDDS::DCPS::RepresentationFormat_ptr format) = 0;

    
    // TAO_IDL - Generated from
    // C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_interface\interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    flightChangeRecTypeSupport (void);

    

    virtual ~flightChangeRecTypeSupport (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    ACE_UNIMPLEMENTED_FUNC (flightChangeRecTypeSupport (const flightChangeRecTypeSupport &))
#if defined (ACE_HAS_CPP11)
    ACE_UNIMPLEMENTED_FUNC (flightChangeRecTypeSupport (flightChangeRecTypeSupport &&))
#endif /* ACE_HAS_CPP11 */
    ACE_UNIMPLEMENTED_FUNC (flightChangeRecTypeSupport &operator= (const flightChangeRecTypeSupport &))
#if defined (ACE_HAS_CPP11)
    ACE_UNIMPLEMENTED_FUNC (flightChangeRecTypeSupport &operator= (flightChangeRecTypeSupport &&))
#endif /* ACE_HAS_CPP11 */
  };
  // TAO_IDL - Generated from
  // C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_interface.cpp:747

  

#if !defined (_UATM_FLIGHTCHANGERECDATAWRITER__VAR_OUT_CH_)
#define _UATM_FLIGHTCHANGERECDATAWRITER__VAR_OUT_CH_

  class flightChangeRecDataWriter;
  typedef flightChangeRecDataWriter *flightChangeRecDataWriter_ptr;
  typedef TAO_Objref_Var_T<flightChangeRecDataWriter> flightChangeRecDataWriter_var;
  typedef TAO_Objref_Out_T<flightChangeRecDataWriter> flightChangeRecDataWriter_out;
  

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_interface\interface_ch.cpp:39

  

  class UATM_Export flightChangeRecDataWriter
    : public virtual ::DDS::DataWriter
  
  {
  public:
    // TAO_IDL - Generated from
    // C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_type.cpp:302

    typedef flightChangeRecDataWriter_ptr _ptr_type;
    typedef flightChangeRecDataWriter_var _var_type;
    typedef flightChangeRecDataWriter_out _out_type;

    // The static operations.
    static flightChangeRecDataWriter_ptr _duplicate (flightChangeRecDataWriter_ptr obj);

    static void _tao_release (flightChangeRecDataWriter_ptr obj);

    static flightChangeRecDataWriter_ptr _narrow (::CORBA::Object_ptr obj);
    static flightChangeRecDataWriter_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static flightChangeRecDataWriter_ptr _nil (void);

    virtual ::DDS::InstanceHandle_t register_instance (
      const ::UATM::flightChangeRec & instance) = 0;

    virtual ::DDS::InstanceHandle_t register_instance_w_timestamp (
      const ::UATM::flightChangeRec & instance,
      const ::DDS::Time_t & timestamp) = 0;

    virtual ::DDS::ReturnCode_t unregister_instance (
      const ::UATM::flightChangeRec & instance,
      ::DDS::InstanceHandle_t handle) = 0;

    virtual ::DDS::ReturnCode_t unregister_instance_w_timestamp (
      const ::UATM::flightChangeRec & instance,
      ::DDS::InstanceHandle_t handle,
      const ::DDS::Time_t & timestamp) = 0;

    virtual ::DDS::ReturnCode_t write (
      const ::UATM::flightChangeRec & instance_data,
      ::DDS::InstanceHandle_t handle) = 0;

    virtual ::DDS::ReturnCode_t write_w_timestamp (
      const ::UATM::flightChangeRec & instance_data,
      ::DDS::InstanceHandle_t handle,
      const ::DDS::Time_t & source_timestamp) = 0;

    virtual ::DDS::ReturnCode_t dispose (
      const ::UATM::flightChangeRec & instance_data,
      ::DDS::InstanceHandle_t instance_handle) = 0;

    virtual ::DDS::ReturnCode_t dispose_w_timestamp (
      const ::UATM::flightChangeRec & instance_data,
      ::DDS::InstanceHandle_t instance_handle,
      const ::DDS::Time_t & source_timestamp) = 0;

    virtual ::DDS::ReturnCode_t get_key_value (
      ::UATM::flightChangeRec & key_holder,
      ::DDS::InstanceHandle_t handle) = 0;

    virtual ::DDS::InstanceHandle_t lookup_instance (
      const ::UATM::flightChangeRec & instance_data) = 0;

    
    // TAO_IDL - Generated from
    // C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_interface\interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    flightChangeRecDataWriter (void);

    

    virtual ~flightChangeRecDataWriter (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    ACE_UNIMPLEMENTED_FUNC (flightChangeRecDataWriter (const flightChangeRecDataWriter &))
#if defined (ACE_HAS_CPP11)
    ACE_UNIMPLEMENTED_FUNC (flightChangeRecDataWriter (flightChangeRecDataWriter &&))
#endif /* ACE_HAS_CPP11 */
    ACE_UNIMPLEMENTED_FUNC (flightChangeRecDataWriter &operator= (const flightChangeRecDataWriter &))
#if defined (ACE_HAS_CPP11)
    ACE_UNIMPLEMENTED_FUNC (flightChangeRecDataWriter &operator= (flightChangeRecDataWriter &&))
#endif /* ACE_HAS_CPP11 */
  };
  // TAO_IDL - Generated from
  // C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_interface.cpp:747

  

#if !defined (_UATM_FLIGHTCHANGERECDATAREADER__VAR_OUT_CH_)
#define _UATM_FLIGHTCHANGERECDATAREADER__VAR_OUT_CH_

  class flightChangeRecDataReader;
  typedef flightChangeRecDataReader *flightChangeRecDataReader_ptr;
  typedef TAO_Objref_Var_T<flightChangeRecDataReader> flightChangeRecDataReader_var;
  typedef TAO_Objref_Out_T<flightChangeRecDataReader> flightChangeRecDataReader_out;
  

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_interface\interface_ch.cpp:39

  

  class UATM_Export flightChangeRecDataReader
    : public virtual ::OpenDDS::DCPS::DataReaderEx
  
  {
  public:
    // TAO_IDL - Generated from
    // C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_type.cpp:302

    typedef flightChangeRecDataReader_ptr _ptr_type;
    typedef flightChangeRecDataReader_var _var_type;
    typedef flightChangeRecDataReader_out _out_type;

    // The static operations.
    static flightChangeRecDataReader_ptr _duplicate (flightChangeRecDataReader_ptr obj);

    static void _tao_release (flightChangeRecDataReader_ptr obj);

    static flightChangeRecDataReader_ptr _narrow (::CORBA::Object_ptr obj);
    static flightChangeRecDataReader_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static flightChangeRecDataReader_ptr _nil (void);

    virtual ::DDS::ReturnCode_t read (
      ::UATM::flightChangeRecSeq & received_data,
      ::DDS::SampleInfoSeq & info_seq,
      ::CORBA::Long max_samples,
      ::DDS::SampleStateMask sample_states,
      ::DDS::ViewStateMask view_states,
      ::DDS::InstanceStateMask instance_states) = 0;

    virtual ::DDS::ReturnCode_t take (
      ::UATM::flightChangeRecSeq & received_data,
      ::DDS::SampleInfoSeq & info_seq,
      ::CORBA::Long max_samples,
      ::DDS::SampleStateMask sample_states,
      ::DDS::ViewStateMask view_states,
      ::DDS::InstanceStateMask instance_states) = 0;

    virtual ::DDS::ReturnCode_t read_w_condition (
      ::UATM::flightChangeRecSeq & data_values,
      ::DDS::SampleInfoSeq & sample_infos,
      ::CORBA::Long max_samples,
      ::DDS::ReadCondition_ptr a_condition) = 0;

    virtual ::DDS::ReturnCode_t take_w_condition (
      ::UATM::flightChangeRecSeq & data_values,
      ::DDS::SampleInfoSeq & sample_infos,
      ::CORBA::Long max_samples,
      ::DDS::ReadCondition_ptr a_condition) = 0;

    virtual ::DDS::ReturnCode_t read_next_sample (
      ::UATM::flightChangeRec & received_data,
      ::DDS::SampleInfo & sample_info) = 0;

    virtual ::DDS::ReturnCode_t take_next_sample (
      ::UATM::flightChangeRec & received_data,
      ::DDS::SampleInfo & sample_info) = 0;

    virtual ::DDS::ReturnCode_t read_instance (
      ::UATM::flightChangeRecSeq & received_data,
      ::DDS::SampleInfoSeq & info_seq,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t a_handle,
      ::DDS::SampleStateMask sample_states,
      ::DDS::ViewStateMask view_states,
      ::DDS::InstanceStateMask instance_states) = 0;

    virtual ::DDS::ReturnCode_t take_instance (
      ::UATM::flightChangeRecSeq & received_data,
      ::DDS::SampleInfoSeq & info_seq,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t a_handle,
      ::DDS::SampleStateMask sample_states,
      ::DDS::ViewStateMask view_states,
      ::DDS::InstanceStateMask instance_states) = 0;

    virtual ::DDS::ReturnCode_t read_instance_w_condition (
      ::UATM::flightChangeRecSeq & received_data,
      ::DDS::SampleInfoSeq & sample_infos,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t a_handle,
      ::DDS::ReadCondition_ptr a_condition) = 0;

    virtual ::DDS::ReturnCode_t take_instance_w_condition (
      ::UATM::flightChangeRecSeq & received_data,
      ::DDS::SampleInfoSeq & sample_infos,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t a_handle,
      ::DDS::ReadCondition_ptr a_condition) = 0;

    virtual ::DDS::ReturnCode_t read_next_instance (
      ::UATM::flightChangeRecSeq & received_data,
      ::DDS::SampleInfoSeq & info_seq,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t a_handle,
      ::DDS::SampleStateMask sample_states,
      ::DDS::ViewStateMask view_states,
      ::DDS::InstanceStateMask instance_states) = 0;

    virtual ::DDS::ReturnCode_t take_next_instance (
      ::UATM::flightChangeRecSeq & received_data,
      ::DDS::SampleInfoSeq & info_seq,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t a_handle,
      ::DDS::SampleStateMask sample_states,
      ::DDS::ViewStateMask view_states,
      ::DDS::InstanceStateMask instance_states) = 0;

    virtual ::DDS::ReturnCode_t read_next_instance_w_condition (
      ::UATM::flightChangeRecSeq & data_values,
      ::DDS::SampleInfoSeq & sample_infos,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t previous_handle,
      ::DDS::ReadCondition_ptr a_condition) = 0;

    virtual ::DDS::ReturnCode_t take_next_instance_w_condition (
      ::UATM::flightChangeRecSeq & data_values,
      ::DDS::SampleInfoSeq & sample_infos,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t previous_handle,
      ::DDS::ReadCondition_ptr a_condition) = 0;

    virtual ::DDS::ReturnCode_t return_loan (
      ::UATM::flightChangeRecSeq & received_data,
      ::DDS::SampleInfoSeq & info_seq) = 0;

    virtual ::DDS::ReturnCode_t get_key_value (
      ::UATM::flightChangeRec & key_holder,
      ::DDS::InstanceHandle_t handle) = 0;

    virtual ::DDS::InstanceHandle_t lookup_instance (
      const ::UATM::flightChangeRec & instance_data) = 0;

    
    // TAO_IDL - Generated from
    // C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_interface\interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    flightChangeRecDataReader (void);

    

    virtual ~flightChangeRecDataReader (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    ACE_UNIMPLEMENTED_FUNC (flightChangeRecDataReader (const flightChangeRecDataReader &))
#if defined (ACE_HAS_CPP11)
    ACE_UNIMPLEMENTED_FUNC (flightChangeRecDataReader (flightChangeRecDataReader &&))
#endif /* ACE_HAS_CPP11 */
    ACE_UNIMPLEMENTED_FUNC (flightChangeRecDataReader &operator= (const flightChangeRecDataReader &))
#if defined (ACE_HAS_CPP11)
    ACE_UNIMPLEMENTED_FUNC (flightChangeRecDataReader &operator= (flightChangeRecDataReader &&))
#endif /* ACE_HAS_CPP11 */
  };


// TAO_IDL - Generated from
// C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_module\module_ch.cpp:62


} // module UATM
// TAO_IDL - Generated from
// C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_arg_traits.cpp:64



TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_visitor_traits.cpp:58



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_UATM_FLIGHTAUTHORIZATIONTYPESUPPORT__TRAITS_)
#define _UATM_FLIGHTAUTHORIZATIONTYPESUPPORT__TRAITS_

  template<>
  struct UATM_Export Objref_Traits< ::UATM::flightAuthorizationTypeSupport>
  {
    static ::UATM::flightAuthorizationTypeSupport_ptr duplicate (
        ::UATM::flightAuthorizationTypeSupport_ptr p);
    static void release (
        ::UATM::flightAuthorizationTypeSupport_ptr p);
    static ::UATM::flightAuthorizationTypeSupport_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::UATM::flightAuthorizationTypeSupport_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_UATM_FLIGHTAUTHORIZATIONDATAWRITER__TRAITS_)
#define _UATM_FLIGHTAUTHORIZATIONDATAWRITER__TRAITS_

  template<>
  struct UATM_Export Objref_Traits< ::UATM::flightAuthorizationDataWriter>
  {
    static ::UATM::flightAuthorizationDataWriter_ptr duplicate (
        ::UATM::flightAuthorizationDataWriter_ptr p);
    static void release (
        ::UATM::flightAuthorizationDataWriter_ptr p);
    static ::UATM::flightAuthorizationDataWriter_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::UATM::flightAuthorizationDataWriter_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_UATM_FLIGHTAUTHORIZATIONDATAREADER__TRAITS_)
#define _UATM_FLIGHTAUTHORIZATIONDATAREADER__TRAITS_

  template<>
  struct UATM_Export Objref_Traits< ::UATM::flightAuthorizationDataReader>
  {
    static ::UATM::flightAuthorizationDataReader_ptr duplicate (
        ::UATM::flightAuthorizationDataReader_ptr p);
    static void release (
        ::UATM::flightAuthorizationDataReader_ptr p);
    static ::UATM::flightAuthorizationDataReader_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::UATM::flightAuthorizationDataReader_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_UATM_FLIGHTCHANGERECTYPESUPPORT__TRAITS_)
#define _UATM_FLIGHTCHANGERECTYPESUPPORT__TRAITS_

  template<>
  struct UATM_Export Objref_Traits< ::UATM::flightChangeRecTypeSupport>
  {
    static ::UATM::flightChangeRecTypeSupport_ptr duplicate (
        ::UATM::flightChangeRecTypeSupport_ptr p);
    static void release (
        ::UATM::flightChangeRecTypeSupport_ptr p);
    static ::UATM::flightChangeRecTypeSupport_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::UATM::flightChangeRecTypeSupport_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_UATM_FLIGHTCHANGERECDATAWRITER__TRAITS_)
#define _UATM_FLIGHTCHANGERECDATAWRITER__TRAITS_

  template<>
  struct UATM_Export Objref_Traits< ::UATM::flightChangeRecDataWriter>
  {
    static ::UATM::flightChangeRecDataWriter_ptr duplicate (
        ::UATM::flightChangeRecDataWriter_ptr p);
    static void release (
        ::UATM::flightChangeRecDataWriter_ptr p);
    static ::UATM::flightChangeRecDataWriter_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::UATM::flightChangeRecDataWriter_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_UATM_FLIGHTCHANGERECDATAREADER__TRAITS_)
#define _UATM_FLIGHTCHANGERECDATAREADER__TRAITS_

  template<>
  struct UATM_Export Objref_Traits< ::UATM::flightChangeRecDataReader>
  {
    static ::UATM::flightChangeRecDataReader_ptr duplicate (
        ::UATM::flightChangeRecDataReader_ptr p);
    static void release (
        ::UATM::flightChangeRecDataReader_ptr p);
    static ::UATM::flightChangeRecDataReader_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::UATM::flightChangeRecDataReader_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\ace_wrappers\tao\TAO_IDL\be\be_codegen.cpp:1649

#if defined (__ACE_INLINE__)
#include "UATMTypeSupportC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

