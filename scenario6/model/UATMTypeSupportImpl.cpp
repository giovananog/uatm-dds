/* Generated by C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\bin\opendds_idl version 3.29.1 (ACE version 6.5.21) running on input file UATM.idl */
#include "UATMTypeSupportImpl.h"

#include <cstring>
#include <stdexcept>
#include "dds/DCPS/BuiltInTopicUtils.h"
#include "dds/DCPS/ContentFilteredTopicImpl.h"
#include "dds/DCPS/DataReaderImpl_T.h"
#include "dds/DCPS/DataWriterImpl_T.h"
#include "dds/DCPS/FilterEvaluator.h"
#include "dds/DCPS/MultiTopicDataReader_T.h"
#include "dds/DCPS/PoolAllocator.h"
#include "dds/DCPS/PublicationInstance.h"
#include "dds/DCPS/PublisherImpl.h"
#include "dds/DCPS/Qos_Helper.h"
#include "dds/DCPS/RakeData.h"
#include "dds/DCPS/RakeResults_T.h"
#include "dds/DCPS/ReceivedDataElementList.h"
#include "dds/DCPS/Registered_Data_Types.h"
#include "dds/DCPS/Service_Participant.h"
#include "dds/DCPS/SubscriberImpl.h"
#include "dds/DCPS/Util.h"
#include "dds/DCPS/XTypes/TypeObject.h"
#include "dds/DCPS/debug.h"
#include "dds/DdsDcpsDomainC.h"
#include "dds/DCPS/JsonValueReader.h"
#include "dds/DCPS/JsonValueWriter.h"

#ifdef OPENDDS_IDL_FILE_SPECIFIC
#  undef OPENDDS_IDL_FILE_SPECIFIC
#endif
#define OPENDDS_IDL_FILE_SPECIFIC(base, index) opendds_idl_generated_uatmtypesupportimpl_cpp_di94tj##_##base##index



/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: UATM */



/* Begin STRUCT-FWD: flightAuthorization */


/* End STRUCT-FWD: flightAuthorization */


/* Begin STRUCT-FWD: flightChangeRec */


/* End STRUCT-FWD: flightChangeRec */

/* End MODULE: UATM */


/* Begin MODULE: UATM */



/* Begin STRUCT: flightAuthorization */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> const XTypes::TypeIdentifier& getMinimalTypeIdentifier<UATM_flightAuthorization_xtag>()
{
  static XTypes::TypeIdentifier ti;
  ACE_GUARD_RETURN(ACE_Thread_Mutex, guard, TheServiceParticipant->get_static_xtypes_lock(), ti);
  if (ti.kind() == XTypes::TK_NONE) {
    ti = XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(224, 2, 25, 151, 93, 69, 55, 8, 242, 60, 174, 242, 37, 244));
  }
  return ti;
}

static const XTypes::TypeMap& OPENDDS_IDL_FILE_SPECIFIC(get_minimal_type_map, 0)();
template<> const XTypes::TypeMap& getMinimalTypeMap<UATM_flightAuthorization_xtag>()
{
  return OPENDDS_IDL_FILE_SPECIFIC(get_minimal_type_map, 0)();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool vread(OpenDDS::DCPS::ValueReader& value_reader,  ::UATM::flightAuthorization& value)
{
  ACE_UNUSED_ARG(value_reader);
  ACE_UNUSED_ARG(value);
  static const ListMemberHelper::Pair pairs[] = {{"authorization_id",0},{"flight_id",1},{"approved_route_id",2},{"authority",3},{"authorization_time",4},{"valid_until",5},{0,0}};
  ListMemberHelper helper(pairs);
  if (!value_reader.begin_struct(OpenDDS::DCPS::APPENDABLE)) return false;
  XTypes::MemberId member_id;
  while (value_reader.members_remaining()) {
    if (!value_reader.begin_struct_member(member_id, helper)) return false;
    switch (member_id) {
    case 0: {
      if (!value_reader.read_int32(value.authorization_id)) return false;
      break;
    }
    case 1: {
      if (!value_reader.read_int32(value.flight_id)) return false;
      break;
    }
    case 2: {
      if (!value_reader.read_int32(value.approved_route_id)) return false;
      break;
    }
    case 3: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.authority = x.c_str();
      }
      break;
    }
    case 4: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.authorization_time = x.c_str();
      }
      break;
    }
    case 5: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.valid_until = x.c_str();
      }
      break;
    }
    }
    if (!value_reader.end_struct_member()) return false;
  }
  if (!value_reader.end_struct()) return false;
  return true;
}

bool vread(OpenDDS::DCPS::ValueReader& value_reader, const NestedKeyOnly< ::UATM::flightAuthorization>& value)
{
  ACE_UNUSED_ARG(value_reader);
  ACE_UNUSED_ARG(value);
  static const ListMemberHelper::Pair pairs[] = {{"authorization_id",0},{"flight_id",1},{"approved_route_id",2},{"authority",3},{"authorization_time",4},{"valid_until",5},{0,0}};
  ListMemberHelper helper(pairs);
  if (!value_reader.begin_struct(OpenDDS::DCPS::APPENDABLE)) return false;
  XTypes::MemberId member_id;
  while (value_reader.members_remaining()) {
    if (!value_reader.begin_struct_member(member_id, helper)) return false;
    switch (member_id) {
    case 0: {
      if (!value_reader.read_int32(value.value.authorization_id)) return false;
      break;
    }
    case 1: {
      if (!value_reader.read_int32(value.value.flight_id)) return false;
      break;
    }
    case 2: {
      if (!value_reader.read_int32(value.value.approved_route_id)) return false;
      break;
    }
    case 3: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.value.authority = x.c_str();
      }
      break;
    }
    case 4: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.value.authorization_time = x.c_str();
      }
      break;
    }
    case 5: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.value.valid_until = x.c_str();
      }
      break;
    }
    }
    if (!value_reader.end_struct_member()) return false;
  }
  if (!value_reader.end_struct()) return false;
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const  ::UATM::flightAuthorization& value)
{
  ACE_UNUSED_ARG(value_writer);
  ACE_UNUSED_ARG(value);
  if (!value_writer.begin_struct(OpenDDS::DCPS::APPENDABLE)) {
    return false;
  }
  {
    MemberParam param(0, false, "authorization_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.authorization_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(1, false, "flight_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.flight_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(2, false, "approved_route_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.approved_route_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(3, false, "authority", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.authority)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(4, false, "authorization_time", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.authorization_time)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(5, false, "valid_until", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.valid_until)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  return value_writer.end_struct();
}

bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const NestedKeyOnly<const  ::UATM::flightAuthorization>& value)
{
  ACE_UNUSED_ARG(value_writer);
  ACE_UNUSED_ARG(value);
  if (!value_writer.begin_struct(OpenDDS::DCPS::APPENDABLE)) {
    return false;
  }
  {
    MemberParam param(0, false, "authorization_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.value.authorization_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(1, false, "flight_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.value.flight_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(2, false, "approved_route_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.value.approved_route_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(3, false, "authority", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.value.authority)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(4, false, "authorization_time", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.value.authorization_time)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(5, false, "valid_until", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.value.valid_until)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  return value_writer.end_struct();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> void set_default( ::UATM::flightAuthorization& stru)
{
  ACE_UNUSED_ARG(stru);
  stru.authorization_id = 0;
  stru.flight_id = 0;
  stru.approved_route_id = 0;
  stru.authority = "";
  stru.authorization_time = "";
  stru.valid_until = "";
}

void serialized_size(const Encoding& encoding, size_t& size, const ::UATM::flightAuthorization& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
  primitive_serialized_size(encoding, size, stru.authorization_id);
  primitive_serialized_size(encoding, size, stru.flight_id);
  primitive_serialized_size(encoding, size, stru.approved_route_id);
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.authority.in()) + 1;
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.authorization_time.in()) + 1;
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.valid_until.in()) + 1;
}

bool operator<<(Serializer& strm, const ::UATM::flightAuthorization& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
  return (strm << stru.authorization_id)
    && (strm << stru.flight_id)
    && (strm << stru.approved_route_id)
    && (strm << ACE_OutputCDR::from_string(stru.authority.in(), 20))
    && (strm << ACE_OutputCDR::from_string(stru.authorization_time.in(), 20))
    && (strm << ACE_OutputCDR::from_string(stru.valid_until.in(), 20));
}

bool operator>>(Serializer& strm,  ::UATM::flightAuthorization& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  bool reached_end_of_struct = false;
  ACE_UNUSED_ARG(reached_end_of_struct);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.authorization_id = 0;
  } else {
    if (!(strm >> stru.authorization_id)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.flight_id = 0;
  } else {
    if (!(strm >> stru.flight_id)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.approved_route_id = 0;
  } else {
    if (!(strm >> stru.approved_route_id)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.authority = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.authority.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.authorization_time = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.authorization_time.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.valid_until = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.valid_until.out(), 20))) {
      return false;
    }
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const ::UATM::flightAuthorization>& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
  primitive_serialized_size(encoding, size, stru.value.authorization_id);
  primitive_serialized_size(encoding, size, stru.value.flight_id);
  primitive_serialized_size(encoding, size, stru.value.approved_route_id);
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.value.authority.in()) + 1;
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.value.authorization_time.in()) + 1;
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.value.valid_until.in()) + 1;
}

bool operator<<(Serializer& strm, const NestedKeyOnly<const ::UATM::flightAuthorization>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
  return (strm << stru.value.authorization_id)
    && (strm << stru.value.flight_id)
    && (strm << stru.value.approved_route_id)
    && (strm << ACE_OutputCDR::from_string(stru.value.authority.in(), 20))
    && (strm << ACE_OutputCDR::from_string(stru.value.authorization_time.in(), 20))
    && (strm << ACE_OutputCDR::from_string(stru.value.valid_until.in(), 20));
}

bool operator>>(Serializer& strm, const NestedKeyOnly< ::UATM::flightAuthorization>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  bool reached_end_of_struct = false;
  ACE_UNUSED_ARG(reached_end_of_struct);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.authorization_id = 0;
  } else {
    if (!(strm >> stru.value.authorization_id)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.flight_id = 0;
  } else {
    if (!(strm >> stru.value.flight_id)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.approved_route_id = 0;
  } else {
    if (!(strm >> stru.value.approved_route_id)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.authority = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.value.authority.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.authorization_time = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.value.authorization_time.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.valid_until = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.value.valid_until.out(), 20))) {
      return false;
    }
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

void serialized_size(const Encoding& encoding, size_t& size, const KeyOnly<const  ::UATM::flightAuthorization> stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  switch (encoding.xcdr_version()) {
  case Encoding::XCDR_VERSION_1:
    {
    primitive_serialized_size(encoding, size, stru.value.authorization_id);
    break;
    }
  case Encoding::XCDR_VERSION_2:
    {
    primitive_serialized_size(encoding, size, stru.value.authorization_id);
    break;
    }
  case Encoding::XCDR_VERSION_NONE:
    {
    primitive_serialized_size(encoding, size, stru.value.authorization_id);
    break;
    }
  }
}

bool operator<<(Serializer& strm, KeyOnly<const  ::UATM::flightAuthorization> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.value.authorization_id);
}

bool operator>>(Serializer& strm, KeyOnly< ::UATM::flightAuthorization> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.value.authorization_id);
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace DCPS {
bool DDSTraits< ::UATM::flightAuthorization>::is_key(const char* field)
{
  ACE_UNUSED_ARG(field);
  if (!ACE_OS::strcmp(field, "authorization_id")) {
    return true;
  }
  return false;
}
} // namespace DCPS
} // namespace OpenDDS
OPENDDS_END_VERSIONED_NAMESPACE_DECL

namespace UATM {
::DDS::DataWriter_ptr flightAuthorizationTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<flightAuthorization> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}

::DDS::DataReader_ptr flightAuthorizationTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<flightAuthorization> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}

#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr flightAuthorizationTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<flightAuthorization> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<flightAuthorization, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */

#ifndef OPENDDS_SAFETY_PROFILE
flightAuthorization* flightAuthorizationTypeSupportImpl::create_sample(::DDS::DynamicData_ptr src)
{
  flightAuthorization* value = new flightAuthorization;
  const ::DDS::ReturnCode_t rc = OpenDDS::DCPS::TypeSupportImpl_T<flightAuthorization>::create_sample_rc(*value, src);
  if (rc != ::DDS::RETCODE_OK && OpenDDS::DCPS::log_level >= OpenDDS::DCPS::LogLevel::Warning) {
    ACE_ERROR((LM_WARNING, "(%P|%t) WARNING: flightAuthorizationTypeSupportImpl::create_sample: "
      "create_sample_rc failed: %C\n", OpenDDS::DCPS::retcode_to_string(rc)));
  }
  return value;
}
#endif

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& flightAuthorizationTypeSupportImpl::getMetaStructForType() const
{
  return OpenDDS::DCPS::getMetaStruct<flightAuthorization>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */

namespace {
  OpenDDS::DCPS::TypeSupportInitializer<flightAuthorizationTypeSupportImpl> ts_init_UATM_flightAuthorization;
}

const OpenDDS::XTypes::TypeIdentifier& flightAuthorizationTypeSupportImpl::getMinimalTypeIdentifier() const
{
  return OpenDDS::DCPS::getMinimalTypeIdentifier<OpenDDS::DCPS::UATM_flightAuthorization_xtag>();
}

const OpenDDS::XTypes::TypeMap& flightAuthorizationTypeSupportImpl::getMinimalTypeMap() const
{
  return OpenDDS::DCPS::getMinimalTypeMap<OpenDDS::DCPS::UATM_flightAuthorization_xtag>();
}

const OpenDDS::XTypes::TypeIdentifier& flightAuthorizationTypeSupportImpl::getCompleteTypeIdentifier() const
{
  static OpenDDS::XTypes::TypeIdentifier ti;
  return ti;
}

const OpenDDS::XTypes::TypeMap& flightAuthorizationTypeSupportImpl::getCompleteTypeMap() const
{
  static OpenDDS::XTypes::TypeMap tm;
  return tm;
}

::DDS::ReturnCode_t flightAuthorizationTypeSupportImpl::encode_to_string(const flightAuthorization& in, CORBA::String_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
#if OPENDDS_HAS_JSON_VALUE_WRITER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    rapidjson::StringBuffer buffer;
    rapidjson::Writer<rapidjson::StringBuffer> writer(buffer);
    OpenDDS::DCPS::JsonValueWriter<rapidjson::Writer<rapidjson::StringBuffer> > jvw(writer);
    if (!vwrite(jvw, in)) {
      return ::DDS::RETCODE_ERROR;
    }
    out = buffer.GetString();
    return ::DDS::RETCODE_OK;
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  out = "";
  return ::DDS::RETCODE_UNSUPPORTED;
}

::DDS::ReturnCode_t flightAuthorizationTypeSupportImpl::encode_to_bytes(const flightAuthorization& in, ::DDS::OctetSeq_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
#if OPENDDS_HAS_JSON_VALUE_WRITER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    CORBA::String_var buffer;
    const ::DDS::ReturnCode_t ret = encode_to_string(in, buffer, format);
    if (ret == ::DDS::RETCODE_OK) {
      const ::DDS::UInt32 len = static_cast< ::DDS::UInt32>(std::strlen(buffer));
      out = new ::DDS::OctetSeq(len);
      out->length(len);
      std::memcpy(out->get_buffer(), buffer, len);
      return ::DDS::RETCODE_OK;
    } else {
      out = new ::DDS::OctetSeq();
      return ret;
    }
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  out = new ::DDS::OctetSeq();
  return ::DDS::RETCODE_UNSUPPORTED;
}

::DDS::ReturnCode_t flightAuthorizationTypeSupportImpl::decode_from_string(const char* in, flightAuthorization_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
  out = new flightAuthorization;
  OpenDDS::DCPS::set_default(*out);
#if OPENDDS_HAS_JSON_VALUE_READER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    rapidjson::StringStream buffer(in);
    OpenDDS::DCPS::JsonValueReader<> jvr(buffer);
    return vread(jvr, *out) ? ::DDS::RETCODE_OK : ::DDS::RETCODE_ERROR;
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  return ::DDS::RETCODE_UNSUPPORTED;
}

::DDS::ReturnCode_t flightAuthorizationTypeSupportImpl::decode_from_bytes(const ::DDS::OctetSeq& in, flightAuthorization_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
#if OPENDDS_HAS_JSON_VALUE_READER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    return decode_from_string(reinterpret_cast<const char*>(in.get_buffer()), out, format);
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  out = new flightAuthorization();
  return ::DDS::RETCODE_UNSUPPORTED;
}

flightAuthorizationTypeSupport::_ptr_type flightAuthorizationTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl< ::UATM::flightAuthorization> : MetaStruct {
  typedef  ::UATM::flightAuthorization T;

#ifndef OPENDDS_NO_MULTI_TOPIC
  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 1; }

#endif /* OPENDDS_NO_MULTI_TOPIC */

  Value getValue(const void* stru, const char* field) const
  {
    const ::UATM::flightAuthorization& typed = *static_cast<const ::UATM::flightAuthorization*>(stru);
    ACE_UNUSED_ARG(typed);
    if (std::strcmp(field, "authorization_id") == 0) {
      return typed.authorization_id;
    }
    if (std::strcmp(field, "flight_id") == 0) {
      return typed.flight_id;
    }
    if (std::strcmp(field, "approved_route_id") == 0) {
      return typed.approved_route_id;
    }
    if (std::strcmp(field, "authority") == 0) {
      return typed.authority.in();
    }
    if (std::strcmp(field, "authorization_time") == 0) {
      return typed.authorization_time.in();
    }
    if (std::strcmp(field, "valid_until") == 0) {
      return typed.valid_until.in();
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::flightAuthorization)");
  }

  Value getValue(Serializer& strm, const char* field, TypeSupportImpl* = 0) const
  {
    const Encoding& encoding = strm.encoding();
    ACE_UNUSED_ARG(encoding);
    size_t total_size = 0;
    if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
      if (!strm.read_delimiter(total_size)) {
        throw std::runtime_error("Unable to reader delimiter in getValue");
      }
    }
    std::string base_field = field;
    const size_t index = base_field.find('.');
    std::string subfield;
    if (index != std::string::npos) {
      subfield = base_field.substr(index + 1);
      base_field = base_field.substr(0, index);
    }
    if (base_field == "authorization_id") {
      ACE_CDR::Long val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'authorization_id' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'authorization_id' could not be skipped");
      }
    }
    if (base_field == "flight_id") {
      ACE_CDR::Long val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'flight_id' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'flight_id' could not be skipped");
      }
    }
    if (base_field == "approved_route_id") {
      ACE_CDR::Long val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'approved_route_id' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'approved_route_id' could not be skipped");
      }
    }
    if (base_field == "authority") {
      TAO::String_Manager val;
      if (!(strm >> val.out())) {
        throw std::runtime_error("Field 'authority' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(strm >> len)) {
        throw std::runtime_error("String 'authority' length could not be deserialized");
      }
      if (!strm.skip(len)) {
        throw std::runtime_error("String 'authority' contents could not be skipped");
      }
    }
    if (base_field == "authorization_time") {
      TAO::String_Manager val;
      if (!(strm >> val.out())) {
        throw std::runtime_error("Field 'authorization_time' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(strm >> len)) {
        throw std::runtime_error("String 'authorization_time' length could not be deserialized");
      }
      if (!strm.skip(len)) {
        throw std::runtime_error("String 'authorization_time' contents could not be skipped");
      }
    }
    if (base_field == "valid_until") {
      TAO::String_Manager val;
      if (!(strm >> val.out())) {
        throw std::runtime_error("Field 'valid_until' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(strm >> len)) {
        throw std::runtime_error("String 'valid_until' length could not be deserialized");
      }
      if (!strm.skip(len)) {
        throw std::runtime_error("String 'valid_until' contents could not be skipped");
      }
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Did not find field in getValue");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "authorization_id") == 0) {
      return make_field_cmp(&T::authorization_id, next);
    }
    if (std::strcmp(field, "flight_id") == 0) {
      return make_field_cmp(&T::flight_id, next);
    }
    if (std::strcmp(field, "approved_route_id") == 0) {
      return make_field_cmp(&T::approved_route_id, next);
    }
    if (std::strcmp(field, "authority") == 0) {
      return make_field_cmp(&T::authority, next);
    }
    if (std::strcmp(field, "authorization_time") == 0) {
      return make_field_cmp(&T::authorization_time, next);
    }
    if (std::strcmp(field, "valid_until") == 0) {
      return make_field_cmp(&T::valid_until, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::flightAuthorization)");
  }

#ifndef OPENDDS_NO_MULTI_TOPIC
  const char** getFieldNames() const
  {
    static const char* names[] = {"authorization_id", "flight_id", "approved_route_id", "authority", "authorization_time", "valid_until", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "authorization_id") == 0) {
      return &static_cast<const T*>(stru)->authorization_id;
    }
    if (std::strcmp(field, "flight_id") == 0) {
      return &static_cast<const T*>(stru)->flight_id;
    }
    if (std::strcmp(field, "approved_route_id") == 0) {
      return &static_cast<const T*>(stru)->approved_route_id;
    }
    if (std::strcmp(field, "authority") == 0) {
      return &static_cast<const T*>(stru)->authority;
    }
    if (std::strcmp(field, "authorization_time") == 0) {
      return &static_cast<const T*>(stru)->authorization_time;
    }
    if (std::strcmp(field, "valid_until") == 0) {
      return &static_cast<const T*>(stru)->valid_until;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::flightAuthorization)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "authorization_id") == 0) {
      static_cast<T*>(lhs)->authorization_id = *static_cast<const  ::CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "flight_id") == 0) {
      static_cast<T*>(lhs)->flight_id = *static_cast<const  ::CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "approved_route_id") == 0) {
      static_cast<T*>(lhs)->approved_route_id = *static_cast<const  ::CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "authority") == 0) {
      static_cast<T*>(lhs)->authority = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "authorization_time") == 0) {
      static_cast<T*>(lhs)->authorization_time = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "valid_until") == 0) {
      static_cast<T*>(lhs)->valid_until = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::flightAuthorization)");
  }

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "authorization_id") == 0) {
      return static_cast<const T*>(lhs)->authorization_id == static_cast<const T*>(rhs)->authorization_id;
    }
    if (std::strcmp(field, "flight_id") == 0) {
      return static_cast<const T*>(lhs)->flight_id == static_cast<const T*>(rhs)->flight_id;
    }
    if (std::strcmp(field, "approved_route_id") == 0) {
      return static_cast<const T*>(lhs)->approved_route_id == static_cast<const T*>(rhs)->approved_route_id;
    }
    if (std::strcmp(field, "authority") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->authority.in(), static_cast<const T*>(rhs)->authority.in());
    }
    if (std::strcmp(field, "authorization_time") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->authorization_time.in(), static_cast<const T*>(rhs)->authorization_time.in());
    }
    if (std::strcmp(field, "valid_until") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->valid_until.in(), static_cast<const T*>(rhs)->valid_until.in());
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::flightAuthorization)");
  }
#endif /* OPENDDS_NO_MULTI_TOPIC */

};

template<>
const MetaStruct& getMetaStruct< ::UATM::flightAuthorization>()
{
  static MetaStructImpl< ::UATM::flightAuthorization> msi;
  return msi;
}

bool gen_skip_over(Serializer& ser,  ::UATM::flightAuthorization*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl< ::UATM::flightAuthorization>().getValue(ser, "");
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif // ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace XTypes {

#ifndef OPENDDS_SAFETY_PROFILE
#if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
template <>
class DynamicDataAdapterImpl< ::UATM::flightAuthorization,  ::UATM::flightAuthorization > : public DynamicDataAdapter_T< ::UATM::flightAuthorization> {
public:
  DynamicDataAdapterImpl(DDS::DynamicType_ptr type,  ::UATM::flightAuthorization& value)
    : DynamicDataAdapter_T< ::UATM::flightAuthorization>(type, value)
  {
  }

  DynamicDataAdapterImpl(DDS::DynamicType_ptr type, const  ::UATM::flightAuthorization& value)
    : DynamicDataAdapter_T< ::UATM::flightAuthorization>(type, value)
  {
  }

  DDS::ReturnCode_t clear_all_values()
  {
    const DDS::ReturnCode_t rc = assert_mutable("DynamicDataAdapter::clear_all_values");
    if (rc == DDS::RETCODE_OK) {
      OpenDDS::DCPS::set_default(value_);
    }
    return rc;
  }

  DDS::UInt32 get_item_count()
  {
    return 6;
  }

  bool serialized_size(const OpenDDS::DCPS::Encoding& enc, size_t& size, OpenDDS::DCPS::Sample::Extent ext) const
  {
    using namespace OpenDDS::DCPS;
    if (ext == Sample::Full) {
      DCPS::serialized_size(enc, size, value_);
    } else if (ext == Sample::NestedKeyOnly) {
      const NestedKeyOnly<const  ::UATM::flightAuthorization> nested_key_only(value_);
      DCPS::serialized_size(enc, size, nested_key_only);
    } else {
      return false; // Non-topic type
    }
    return true;
  }

  bool serialize(OpenDDS::DCPS::Serializer& ser, OpenDDS::DCPS::Sample::Extent ext) const
  {
    using namespace OpenDDS::DCPS;
    if (ext == Sample::Full) {
      return ser << value_;
    } else if (ext == Sample::NestedKeyOnly) {
      NestedKeyOnly<const  ::UATM::flightAuthorization> nested_key_only(value_);
      return ser << nested_key_only;
    } else {
      return false; // Non-topic type
    }
  }

protected:
  DDS::ReturnCode_t get_raw_value(const char* method, void* dest, DDS::TypeKind tk, DDS::MemberId id)
  {
    switch (id) {
    case 0:
      {
        return get_simple_raw_value(method, dest, tk, value_.authorization_id, id);
      }
    case 1:
      {
        return get_simple_raw_value(method, dest, tk, value_.flight_id, id);
      }
    case 2:
      {
        return get_simple_raw_value(method, dest, tk, value_.approved_route_id, id);
      }
    case 3:
      {
        return get_s8_raw_value(method, dest, tk, value_.authority, id);
      }
    case 4:
      {
        return get_s8_raw_value(method, dest, tk, value_.authorization_time, id);
      }
    case 5:
      {
        return get_s8_raw_value(method, dest, tk, value_.valid_until, id);
      }
    default:
      return invalid_id(method, id);
    }
  }

  DDS::ReturnCode_t set_raw_value(const char* method, DDS::MemberId id, const void* source, DDS::TypeKind tk)
  {
    DDS::ReturnCode_t rc = assert_mutable(method);
    if (rc != DDS::RETCODE_OK) {
      return rc;
    }
    switch (id) {
    case 0:
      {
        return set_simple_raw_value(method, value_.authorization_id, id, source, tk);
      }
    case 1:
      {
        return set_simple_raw_value(method, value_.flight_id, id, source, tk);
      }
    case 2:
      {
        return set_simple_raw_value(method, value_.approved_route_id, id, source, tk);
      }
    case 3:
      {
        return set_s8_raw_value(method, value_.authority.inout(), id, source, tk);
      }
    case 4:
      {
        return set_s8_raw_value(method, value_.authorization_time.inout(), id, source, tk);
      }
    case 5:
      {
        return set_s8_raw_value(method, value_.valid_until.inout(), id, source, tk);
      }
    default:
      return invalid_id(method, id);
    }
  }
};

#endif // if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER

template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::flightAuthorization,  ::UATM::flightAuthorization>(DDS::DynamicType_ptr type, const  ::UATM::flightAuthorization& value)
{
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  if (type) {
    return new DynamicDataAdapterImpl< ::UATM::flightAuthorization,  ::UATM::flightAuthorization>(type, value);
  }
#  else
  ACE_UNUSED_ARG(type);
  ACE_UNUSED_ARG(value);
#  endif
  return 0;
}

template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::flightAuthorization,  ::UATM::flightAuthorization>(DDS::DynamicType_ptr type,  ::UATM::flightAuthorization& value)
{
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  if (type) {
    return new DynamicDataAdapterImpl< ::UATM::flightAuthorization,  ::UATM::flightAuthorization>(type, value);
  }
#  else
  ACE_UNUSED_ARG(type);
  ACE_UNUSED_ARG(value);
#  endif
  return 0;
}

template <>
const  ::UATM::flightAuthorization* get_dynamic_data_adapter_value< ::UATM::flightAuthorization,  ::UATM::flightAuthorization>(DDS::DynamicData_ptr dd)
{
  ACE_UNUSED_ARG(dd);
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  typedef DynamicDataAdapterImpl< ::UATM::flightAuthorization,  ::UATM::flightAuthorization> Dda;
  const Dda* const dda = dynamic_cast<Dda*>(dd);
  if (dda) {
    return &dda->wrapped();
  }
#  endif
  return 0;
}
#endif // ifndef OPENDDS_SAFETY_PROFILE

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End STRUCT: flightAuthorization */

/* End MODULE: UATM */


/* Begin MODULE: UATM */



/* Begin STRUCT: flightChangeRec */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> const XTypes::TypeIdentifier& getMinimalTypeIdentifier<UATM_flightChangeRec_xtag>()
{
  static XTypes::TypeIdentifier ti;
  ACE_GUARD_RETURN(ACE_Thread_Mutex, guard, TheServiceParticipant->get_static_xtypes_lock(), ti);
  if (ti.kind() == XTypes::TK_NONE) {
    ti = XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(211, 98, 125, 223, 213, 233, 80, 196, 229, 198, 141, 11, 233, 143));
  }
  return ti;
}

template<> const XTypes::TypeMap& getMinimalTypeMap<UATM_flightChangeRec_xtag>()
{
  return OPENDDS_IDL_FILE_SPECIFIC(get_minimal_type_map, 0)();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool vread(OpenDDS::DCPS::ValueReader& value_reader,  ::UATM::flightChangeRec& value)
{
  ACE_UNUSED_ARG(value_reader);
  ACE_UNUSED_ARG(value);
  static const ListMemberHelper::Pair pairs[] = {{"recommendation_id",0},{"flight_id",1},{"change_type",2},{"reason",3},{"recommended_by",4},{"recommendation_time",5},{"request_status",6},{0,0}};
  ListMemberHelper helper(pairs);
  if (!value_reader.begin_struct(OpenDDS::DCPS::APPENDABLE)) return false;
  XTypes::MemberId member_id;
  while (value_reader.members_remaining()) {
    if (!value_reader.begin_struct_member(member_id, helper)) return false;
    switch (member_id) {
    case 0: {
      if (!value_reader.read_int32(value.recommendation_id)) return false;
      break;
    }
    case 1: {
      if (!value_reader.read_int32(value.flight_id)) return false;
      break;
    }
    case 2: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.change_type = x.c_str();
      }
      break;
    }
    case 3: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.reason = x.c_str();
      }
      break;
    }
    case 4: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.recommended_by = x.c_str();
      }
      break;
    }
    case 5: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.recommendation_time = x.c_str();
      }
      break;
    }
    case 6: {
      {
         ::CORBA::Boolean bx;
        if (!value_reader.read_boolean(bx)) return false;
        value.request_status = bx;
      }
      break;
    }
    }
    if (!value_reader.end_struct_member()) return false;
  }
  if (!value_reader.end_struct()) return false;
  return true;
}

bool vread(OpenDDS::DCPS::ValueReader& value_reader, const NestedKeyOnly< ::UATM::flightChangeRec>& value)
{
  ACE_UNUSED_ARG(value_reader);
  ACE_UNUSED_ARG(value);
  static const ListMemberHelper::Pair pairs[] = {{"recommendation_id",0},{"flight_id",1},{"change_type",2},{"reason",3},{"recommended_by",4},{"recommendation_time",5},{"request_status",6},{0,0}};
  ListMemberHelper helper(pairs);
  if (!value_reader.begin_struct(OpenDDS::DCPS::APPENDABLE)) return false;
  XTypes::MemberId member_id;
  while (value_reader.members_remaining()) {
    if (!value_reader.begin_struct_member(member_id, helper)) return false;
    switch (member_id) {
    case 0: {
      if (!value_reader.read_int32(value.value.recommendation_id)) return false;
      break;
    }
    case 1: {
      if (!value_reader.read_int32(value.value.flight_id)) return false;
      break;
    }
    case 2: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.value.change_type = x.c_str();
      }
      break;
    }
    case 3: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.value.reason = x.c_str();
      }
      break;
    }
    case 4: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.value.recommended_by = x.c_str();
      }
      break;
    }
    case 5: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.value.recommendation_time = x.c_str();
      }
      break;
    }
    case 6: {
      {
         ::CORBA::Boolean bx;
        if (!value_reader.read_boolean(bx)) return false;
        value.value.request_status = bx;
      }
      break;
    }
    }
    if (!value_reader.end_struct_member()) return false;
  }
  if (!value_reader.end_struct()) return false;
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const  ::UATM::flightChangeRec& value)
{
  ACE_UNUSED_ARG(value_writer);
  ACE_UNUSED_ARG(value);
  if (!value_writer.begin_struct(OpenDDS::DCPS::APPENDABLE)) {
    return false;
  }
  {
    MemberParam param(0, false, "recommendation_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.recommendation_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(1, false, "flight_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.flight_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(2, false, "change_type", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.change_type)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(3, false, "reason", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.reason)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(4, false, "recommended_by", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.recommended_by)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(5, false, "recommendation_time", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.recommendation_time)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(6, false, "request_status", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_boolean(value.request_status)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  return value_writer.end_struct();
}

bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const NestedKeyOnly<const  ::UATM::flightChangeRec>& value)
{
  ACE_UNUSED_ARG(value_writer);
  ACE_UNUSED_ARG(value);
  if (!value_writer.begin_struct(OpenDDS::DCPS::APPENDABLE)) {
    return false;
  }
  {
    MemberParam param(0, false, "recommendation_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.value.recommendation_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(1, false, "flight_id", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_int32(value.value.flight_id)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(2, false, "change_type", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.value.change_type)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(3, false, "reason", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.value.reason)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(4, false, "recommended_by", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.value.recommended_by)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(5, false, "recommendation_time", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_string(value.value.recommendation_time)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  {
    MemberParam param(6, false, "request_status", 0, true);
    if (!value_writer.begin_struct_member(param)) {
      return false;
    }
    if (param.present) {
      if (!value_writer.write_boolean(value.value.request_status)) {
        return false;
      }
    } else {
      value_writer.write_absent_value();
    }
    if (!value_writer.end_struct_member()) {
      return false;
    }
  }
  return value_writer.end_struct();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> void set_default( ::UATM::flightChangeRec& stru)
{
  ACE_UNUSED_ARG(stru);
  stru.recommendation_id = 0;
  stru.flight_id = 0;
  stru.change_type = "";
  stru.reason = "";
  stru.recommended_by = "";
  stru.recommendation_time = "";
  stru.request_status = 0;
}

void serialized_size(const Encoding& encoding, size_t& size, const ::UATM::flightChangeRec& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
  primitive_serialized_size(encoding, size, stru.recommendation_id);
  primitive_serialized_size(encoding, size, stru.flight_id);
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.change_type.in()) + 1;
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.reason.in()) + 1;
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.recommended_by.in()) + 1;
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.recommendation_time.in()) + 1;
  primitive_serialized_size(encoding, size, ACE_OutputCDR::from_boolean(stru.request_status));
}

bool operator<<(Serializer& strm, const ::UATM::flightChangeRec& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
  return (strm << stru.recommendation_id)
    && (strm << stru.flight_id)
    && (strm << ACE_OutputCDR::from_string(stru.change_type.in(), 20))
    && (strm << ACE_OutputCDR::from_string(stru.reason.in(), 20))
    && (strm << ACE_OutputCDR::from_string(stru.recommended_by.in(), 20))
    && (strm << ACE_OutputCDR::from_string(stru.recommendation_time.in(), 20))
    && (strm << ACE_OutputCDR::from_boolean(stru.request_status));
}

bool operator>>(Serializer& strm,  ::UATM::flightChangeRec& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  bool reached_end_of_struct = false;
  ACE_UNUSED_ARG(reached_end_of_struct);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.recommendation_id = 0;
  } else {
    if (!(strm >> stru.recommendation_id)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.flight_id = 0;
  } else {
    if (!(strm >> stru.flight_id)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.change_type = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.change_type.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.reason = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.reason.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.recommended_by = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.recommended_by.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.recommendation_time = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.recommendation_time.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.request_status = 0;
  } else {
    if (!(strm >> ACE_InputCDR::to_boolean(stru.request_status))) {
      return false;
    }
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const ::UATM::flightChangeRec>& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
  primitive_serialized_size(encoding, size, stru.value.recommendation_id);
  primitive_serialized_size(encoding, size, stru.value.flight_id);
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.value.change_type.in()) + 1;
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.value.reason.in()) + 1;
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.value.recommended_by.in()) + 1;
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.value.recommendation_time.in()) + 1;
  primitive_serialized_size(encoding, size, ACE_OutputCDR::from_boolean(stru.value.request_status));
}

bool operator<<(Serializer& strm, const NestedKeyOnly<const ::UATM::flightChangeRec>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
  return (strm << stru.value.recommendation_id)
    && (strm << stru.value.flight_id)
    && (strm << ACE_OutputCDR::from_string(stru.value.change_type.in(), 20))
    && (strm << ACE_OutputCDR::from_string(stru.value.reason.in(), 20))
    && (strm << ACE_OutputCDR::from_string(stru.value.recommended_by.in(), 20))
    && (strm << ACE_OutputCDR::from_string(stru.value.recommendation_time.in(), 20))
    && (strm << ACE_OutputCDR::from_boolean(stru.value.request_status));
}

bool operator>>(Serializer& strm, const NestedKeyOnly< ::UATM::flightChangeRec>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  bool reached_end_of_struct = false;
  ACE_UNUSED_ARG(reached_end_of_struct);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.recommendation_id = 0;
  } else {
    if (!(strm >> stru.value.recommendation_id)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.flight_id = 0;
  } else {
    if (!(strm >> stru.value.flight_id)) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.change_type = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.value.change_type.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.reason = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.value.reason.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.recommended_by = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.value.recommended_by.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.recommendation_time = "";
  } else {
    if (!(strm >> ACE_InputCDR::to_string(stru.value.recommendation_time.out(), 20))) {
      return false;
    }
  }
  reached_end_of_struct |= (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() >= end_of_struct);
  if (reached_end_of_struct) {
    stru.value.request_status = 0;
  } else {
    if (!(strm >> ACE_InputCDR::to_boolean(stru.value.request_status))) {
      return false;
    }
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 && strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

void serialized_size(const Encoding& encoding, size_t& size, const KeyOnly<const  ::UATM::flightChangeRec> stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  switch (encoding.xcdr_version()) {
  case Encoding::XCDR_VERSION_1:
    {
    primitive_serialized_size(encoding, size, stru.value.recommendation_id);
    break;
    }
  case Encoding::XCDR_VERSION_2:
    {
    primitive_serialized_size(encoding, size, stru.value.recommendation_id);
    break;
    }
  case Encoding::XCDR_VERSION_NONE:
    {
    primitive_serialized_size(encoding, size, stru.value.recommendation_id);
    break;
    }
  }
}

bool operator<<(Serializer& strm, KeyOnly<const  ::UATM::flightChangeRec> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.value.recommendation_id);
}

bool operator>>(Serializer& strm, KeyOnly< ::UATM::flightChangeRec> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.value.recommendation_id);
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace DCPS {
bool DDSTraits< ::UATM::flightChangeRec>::is_key(const char* field)
{
  ACE_UNUSED_ARG(field);
  if (!ACE_OS::strcmp(field, "recommendation_id")) {
    return true;
  }
  return false;
}
} // namespace DCPS
} // namespace OpenDDS
OPENDDS_END_VERSIONED_NAMESPACE_DECL

namespace UATM {
::DDS::DataWriter_ptr flightChangeRecTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<flightChangeRec> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}

::DDS::DataReader_ptr flightChangeRecTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<flightChangeRec> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}

#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr flightChangeRecTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<flightChangeRec> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<flightChangeRec, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */

#ifndef OPENDDS_SAFETY_PROFILE
flightChangeRec* flightChangeRecTypeSupportImpl::create_sample(::DDS::DynamicData_ptr src)
{
  flightChangeRec* value = new flightChangeRec;
  const ::DDS::ReturnCode_t rc = OpenDDS::DCPS::TypeSupportImpl_T<flightChangeRec>::create_sample_rc(*value, src);
  if (rc != ::DDS::RETCODE_OK && OpenDDS::DCPS::log_level >= OpenDDS::DCPS::LogLevel::Warning) {
    ACE_ERROR((LM_WARNING, "(%P|%t) WARNING: flightChangeRecTypeSupportImpl::create_sample: "
      "create_sample_rc failed: %C\n", OpenDDS::DCPS::retcode_to_string(rc)));
  }
  return value;
}
#endif

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& flightChangeRecTypeSupportImpl::getMetaStructForType() const
{
  return OpenDDS::DCPS::getMetaStruct<flightChangeRec>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */

namespace {
  OpenDDS::DCPS::TypeSupportInitializer<flightChangeRecTypeSupportImpl> ts_init_UATM_flightChangeRec;
}

const OpenDDS::XTypes::TypeIdentifier& flightChangeRecTypeSupportImpl::getMinimalTypeIdentifier() const
{
  return OpenDDS::DCPS::getMinimalTypeIdentifier<OpenDDS::DCPS::UATM_flightChangeRec_xtag>();
}

const OpenDDS::XTypes::TypeMap& flightChangeRecTypeSupportImpl::getMinimalTypeMap() const
{
  return OpenDDS::DCPS::getMinimalTypeMap<OpenDDS::DCPS::UATM_flightChangeRec_xtag>();
}

const OpenDDS::XTypes::TypeIdentifier& flightChangeRecTypeSupportImpl::getCompleteTypeIdentifier() const
{
  static OpenDDS::XTypes::TypeIdentifier ti;
  return ti;
}

const OpenDDS::XTypes::TypeMap& flightChangeRecTypeSupportImpl::getCompleteTypeMap() const
{
  static OpenDDS::XTypes::TypeMap tm;
  return tm;
}

::DDS::ReturnCode_t flightChangeRecTypeSupportImpl::encode_to_string(const flightChangeRec& in, CORBA::String_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
#if OPENDDS_HAS_JSON_VALUE_WRITER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    rapidjson::StringBuffer buffer;
    rapidjson::Writer<rapidjson::StringBuffer> writer(buffer);
    OpenDDS::DCPS::JsonValueWriter<rapidjson::Writer<rapidjson::StringBuffer> > jvw(writer);
    if (!vwrite(jvw, in)) {
      return ::DDS::RETCODE_ERROR;
    }
    out = buffer.GetString();
    return ::DDS::RETCODE_OK;
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  out = "";
  return ::DDS::RETCODE_UNSUPPORTED;
}

::DDS::ReturnCode_t flightChangeRecTypeSupportImpl::encode_to_bytes(const flightChangeRec& in, ::DDS::OctetSeq_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
#if OPENDDS_HAS_JSON_VALUE_WRITER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    CORBA::String_var buffer;
    const ::DDS::ReturnCode_t ret = encode_to_string(in, buffer, format);
    if (ret == ::DDS::RETCODE_OK) {
      const ::DDS::UInt32 len = static_cast< ::DDS::UInt32>(std::strlen(buffer));
      out = new ::DDS::OctetSeq(len);
      out->length(len);
      std::memcpy(out->get_buffer(), buffer, len);
      return ::DDS::RETCODE_OK;
    } else {
      out = new ::DDS::OctetSeq();
      return ret;
    }
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  out = new ::DDS::OctetSeq();
  return ::DDS::RETCODE_UNSUPPORTED;
}

::DDS::ReturnCode_t flightChangeRecTypeSupportImpl::decode_from_string(const char* in, flightChangeRec_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
  out = new flightChangeRec;
  OpenDDS::DCPS::set_default(*out);
#if OPENDDS_HAS_JSON_VALUE_READER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    rapidjson::StringStream buffer(in);
    OpenDDS::DCPS::JsonValueReader<> jvr(buffer);
    return vread(jvr, *out) ? ::DDS::RETCODE_OK : ::DDS::RETCODE_ERROR;
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  return ::DDS::RETCODE_UNSUPPORTED;
}

::DDS::ReturnCode_t flightChangeRecTypeSupportImpl::decode_from_bytes(const ::DDS::OctetSeq& in, flightChangeRec_out out, OpenDDS::DCPS::RepresentationFormat* format)
{
#if OPENDDS_HAS_JSON_VALUE_READER
  OpenDDS::DCPS::JsonRepresentationFormat_var jrf = OpenDDS::DCPS::JsonRepresentationFormat::_narrow(format);
  if (jrf) {
    return decode_from_string(reinterpret_cast<const char*>(in.get_buffer()), out, format);
  }
#else
  ACE_UNUSED_ARG(in);
  ACE_UNUSED_ARG(format);
#endif
  out = new flightChangeRec();
  return ::DDS::RETCODE_UNSUPPORTED;
}

flightChangeRecTypeSupport::_ptr_type flightChangeRecTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl< ::UATM::flightChangeRec> : MetaStruct {
  typedef  ::UATM::flightChangeRec T;

#ifndef OPENDDS_NO_MULTI_TOPIC
  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 1; }

#endif /* OPENDDS_NO_MULTI_TOPIC */

  Value getValue(const void* stru, const char* field) const
  {
    const ::UATM::flightChangeRec& typed = *static_cast<const ::UATM::flightChangeRec*>(stru);
    ACE_UNUSED_ARG(typed);
    if (std::strcmp(field, "recommendation_id") == 0) {
      return typed.recommendation_id;
    }
    if (std::strcmp(field, "flight_id") == 0) {
      return typed.flight_id;
    }
    if (std::strcmp(field, "change_type") == 0) {
      return typed.change_type.in();
    }
    if (std::strcmp(field, "reason") == 0) {
      return typed.reason.in();
    }
    if (std::strcmp(field, "recommended_by") == 0) {
      return typed.recommended_by.in();
    }
    if (std::strcmp(field, "recommendation_time") == 0) {
      return typed.recommendation_time.in();
    }
    if (std::strcmp(field, "request_status") == 0) {
      return typed.request_status;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::flightChangeRec)");
  }

  Value getValue(Serializer& strm, const char* field, TypeSupportImpl* = 0) const
  {
    const Encoding& encoding = strm.encoding();
    ACE_UNUSED_ARG(encoding);
    size_t total_size = 0;
    if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
      if (!strm.read_delimiter(total_size)) {
        throw std::runtime_error("Unable to reader delimiter in getValue");
      }
    }
    std::string base_field = field;
    const size_t index = base_field.find('.');
    std::string subfield;
    if (index != std::string::npos) {
      subfield = base_field.substr(index + 1);
      base_field = base_field.substr(0, index);
    }
    if (base_field == "recommendation_id") {
      ACE_CDR::Long val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'recommendation_id' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'recommendation_id' could not be skipped");
      }
    }
    if (base_field == "flight_id") {
      ACE_CDR::Long val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'flight_id' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'flight_id' could not be skipped");
      }
    }
    if (base_field == "change_type") {
      TAO::String_Manager val;
      if (!(strm >> val.out())) {
        throw std::runtime_error("Field 'change_type' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(strm >> len)) {
        throw std::runtime_error("String 'change_type' length could not be deserialized");
      }
      if (!strm.skip(len)) {
        throw std::runtime_error("String 'change_type' contents could not be skipped");
      }
    }
    if (base_field == "reason") {
      TAO::String_Manager val;
      if (!(strm >> val.out())) {
        throw std::runtime_error("Field 'reason' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(strm >> len)) {
        throw std::runtime_error("String 'reason' length could not be deserialized");
      }
      if (!strm.skip(len)) {
        throw std::runtime_error("String 'reason' contents could not be skipped");
      }
    }
    if (base_field == "recommended_by") {
      TAO::String_Manager val;
      if (!(strm >> val.out())) {
        throw std::runtime_error("Field 'recommended_by' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(strm >> len)) {
        throw std::runtime_error("String 'recommended_by' length could not be deserialized");
      }
      if (!strm.skip(len)) {
        throw std::runtime_error("String 'recommended_by' contents could not be skipped");
      }
    }
    if (base_field == "recommendation_time") {
      TAO::String_Manager val;
      if (!(strm >> val.out())) {
        throw std::runtime_error("Field 'recommendation_time' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(strm >> len)) {
        throw std::runtime_error("String 'recommendation_time' length could not be deserialized");
      }
      if (!strm.skip(len)) {
        throw std::runtime_error("String 'recommendation_time' contents could not be skipped");
      }
    }
    if (base_field == "request_status") {
      ACE_CDR::Boolean val;
      if (!(strm >> ACE_InputCDR::to_boolean(val))) {
        throw std::runtime_error("Field 'request_status' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  1 )) {
        throw std::runtime_error("Field 'request_status' could not be skipped");
      }
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Did not find field in getValue");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "recommendation_id") == 0) {
      return make_field_cmp(&T::recommendation_id, next);
    }
    if (std::strcmp(field, "flight_id") == 0) {
      return make_field_cmp(&T::flight_id, next);
    }
    if (std::strcmp(field, "change_type") == 0) {
      return make_field_cmp(&T::change_type, next);
    }
    if (std::strcmp(field, "reason") == 0) {
      return make_field_cmp(&T::reason, next);
    }
    if (std::strcmp(field, "recommended_by") == 0) {
      return make_field_cmp(&T::recommended_by, next);
    }
    if (std::strcmp(field, "recommendation_time") == 0) {
      return make_field_cmp(&T::recommendation_time, next);
    }
    if (std::strcmp(field, "request_status") == 0) {
      return make_field_cmp(&T::request_status, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::flightChangeRec)");
  }

#ifndef OPENDDS_NO_MULTI_TOPIC
  const char** getFieldNames() const
  {
    static const char* names[] = {"recommendation_id", "flight_id", "change_type", "reason", "recommended_by", "recommendation_time", "request_status", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "recommendation_id") == 0) {
      return &static_cast<const T*>(stru)->recommendation_id;
    }
    if (std::strcmp(field, "flight_id") == 0) {
      return &static_cast<const T*>(stru)->flight_id;
    }
    if (std::strcmp(field, "change_type") == 0) {
      return &static_cast<const T*>(stru)->change_type;
    }
    if (std::strcmp(field, "reason") == 0) {
      return &static_cast<const T*>(stru)->reason;
    }
    if (std::strcmp(field, "recommended_by") == 0) {
      return &static_cast<const T*>(stru)->recommended_by;
    }
    if (std::strcmp(field, "recommendation_time") == 0) {
      return &static_cast<const T*>(stru)->recommendation_time;
    }
    if (std::strcmp(field, "request_status") == 0) {
      return &static_cast<const T*>(stru)->request_status;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::flightChangeRec)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "recommendation_id") == 0) {
      static_cast<T*>(lhs)->recommendation_id = *static_cast<const  ::CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "flight_id") == 0) {
      static_cast<T*>(lhs)->flight_id = *static_cast<const  ::CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "change_type") == 0) {
      static_cast<T*>(lhs)->change_type = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "reason") == 0) {
      static_cast<T*>(lhs)->reason = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "recommended_by") == 0) {
      static_cast<T*>(lhs)->recommended_by = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "recommendation_time") == 0) {
      static_cast<T*>(lhs)->recommendation_time = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "request_status") == 0) {
      static_cast<T*>(lhs)->request_status = *static_cast<const  ::CORBA::Boolean*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::flightChangeRec)");
  }

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "recommendation_id") == 0) {
      return static_cast<const T*>(lhs)->recommendation_id == static_cast<const T*>(rhs)->recommendation_id;
    }
    if (std::strcmp(field, "flight_id") == 0) {
      return static_cast<const T*>(lhs)->flight_id == static_cast<const T*>(rhs)->flight_id;
    }
    if (std::strcmp(field, "change_type") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->change_type.in(), static_cast<const T*>(rhs)->change_type.in());
    }
    if (std::strcmp(field, "reason") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->reason.in(), static_cast<const T*>(rhs)->reason.in());
    }
    if (std::strcmp(field, "recommended_by") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->recommended_by.in(), static_cast<const T*>(rhs)->recommended_by.in());
    }
    if (std::strcmp(field, "recommendation_time") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->recommendation_time.in(), static_cast<const T*>(rhs)->recommendation_time.in());
    }
    if (std::strcmp(field, "request_status") == 0) {
      return static_cast<const T*>(lhs)->request_status == static_cast<const T*>(rhs)->request_status;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::UATM::flightChangeRec)");
  }
#endif /* OPENDDS_NO_MULTI_TOPIC */

};

template<>
const MetaStruct& getMetaStruct< ::UATM::flightChangeRec>()
{
  static MetaStructImpl< ::UATM::flightChangeRec> msi;
  return msi;
}

bool gen_skip_over(Serializer& ser,  ::UATM::flightChangeRec*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl< ::UATM::flightChangeRec>().getValue(ser, "");
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif // ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace XTypes {

#ifndef OPENDDS_SAFETY_PROFILE
#if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
template <>
class DynamicDataAdapterImpl< ::UATM::flightChangeRec,  ::UATM::flightChangeRec > : public DynamicDataAdapter_T< ::UATM::flightChangeRec> {
public:
  DynamicDataAdapterImpl(DDS::DynamicType_ptr type,  ::UATM::flightChangeRec& value)
    : DynamicDataAdapter_T< ::UATM::flightChangeRec>(type, value)
  {
  }

  DynamicDataAdapterImpl(DDS::DynamicType_ptr type, const  ::UATM::flightChangeRec& value)
    : DynamicDataAdapter_T< ::UATM::flightChangeRec>(type, value)
  {
  }

  DDS::ReturnCode_t clear_all_values()
  {
    const DDS::ReturnCode_t rc = assert_mutable("DynamicDataAdapter::clear_all_values");
    if (rc == DDS::RETCODE_OK) {
      OpenDDS::DCPS::set_default(value_);
    }
    return rc;
  }

  DDS::UInt32 get_item_count()
  {
    return 7;
  }

  bool serialized_size(const OpenDDS::DCPS::Encoding& enc, size_t& size, OpenDDS::DCPS::Sample::Extent ext) const
  {
    using namespace OpenDDS::DCPS;
    if (ext == Sample::Full) {
      DCPS::serialized_size(enc, size, value_);
    } else if (ext == Sample::NestedKeyOnly) {
      const NestedKeyOnly<const  ::UATM::flightChangeRec> nested_key_only(value_);
      DCPS::serialized_size(enc, size, nested_key_only);
    } else {
      return false; // Non-topic type
    }
    return true;
  }

  bool serialize(OpenDDS::DCPS::Serializer& ser, OpenDDS::DCPS::Sample::Extent ext) const
  {
    using namespace OpenDDS::DCPS;
    if (ext == Sample::Full) {
      return ser << value_;
    } else if (ext == Sample::NestedKeyOnly) {
      NestedKeyOnly<const  ::UATM::flightChangeRec> nested_key_only(value_);
      return ser << nested_key_only;
    } else {
      return false; // Non-topic type
    }
  }

protected:
  DDS::ReturnCode_t get_raw_value(const char* method, void* dest, DDS::TypeKind tk, DDS::MemberId id)
  {
    switch (id) {
    case 0:
      {
        return get_simple_raw_value(method, dest, tk, value_.recommendation_id, id);
      }
    case 1:
      {
        return get_simple_raw_value(method, dest, tk, value_.flight_id, id);
      }
    case 2:
      {
        return get_s8_raw_value(method, dest, tk, value_.change_type, id);
      }
    case 3:
      {
        return get_s8_raw_value(method, dest, tk, value_.reason, id);
      }
    case 4:
      {
        return get_s8_raw_value(method, dest, tk, value_.recommended_by, id);
      }
    case 5:
      {
        return get_s8_raw_value(method, dest, tk, value_.recommendation_time, id);
      }
    case 6:
      {
        return get_simple_raw_value(method, dest, tk, value_.request_status, id);
      }
    default:
      return invalid_id(method, id);
    }
  }

  DDS::ReturnCode_t set_raw_value(const char* method, DDS::MemberId id, const void* source, DDS::TypeKind tk)
  {
    DDS::ReturnCode_t rc = assert_mutable(method);
    if (rc != DDS::RETCODE_OK) {
      return rc;
    }
    switch (id) {
    case 0:
      {
        return set_simple_raw_value(method, value_.recommendation_id, id, source, tk);
      }
    case 1:
      {
        return set_simple_raw_value(method, value_.flight_id, id, source, tk);
      }
    case 2:
      {
        return set_s8_raw_value(method, value_.change_type.inout(), id, source, tk);
      }
    case 3:
      {
        return set_s8_raw_value(method, value_.reason.inout(), id, source, tk);
      }
    case 4:
      {
        return set_s8_raw_value(method, value_.recommended_by.inout(), id, source, tk);
      }
    case 5:
      {
        return set_s8_raw_value(method, value_.recommendation_time.inout(), id, source, tk);
      }
    case 6:
      {
        return set_simple_raw_value(method, value_.request_status, id, source, tk);
      }
    default:
      return invalid_id(method, id);
    }
  }
};

#endif // if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER

template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::flightChangeRec,  ::UATM::flightChangeRec>(DDS::DynamicType_ptr type, const  ::UATM::flightChangeRec& value)
{
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  if (type) {
    return new DynamicDataAdapterImpl< ::UATM::flightChangeRec,  ::UATM::flightChangeRec>(type, value);
  }
#  else
  ACE_UNUSED_ARG(type);
  ACE_UNUSED_ARG(value);
#  endif
  return 0;
}

template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::flightChangeRec,  ::UATM::flightChangeRec>(DDS::DynamicType_ptr type,  ::UATM::flightChangeRec& value)
{
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  if (type) {
    return new DynamicDataAdapterImpl< ::UATM::flightChangeRec,  ::UATM::flightChangeRec>(type, value);
  }
#  else
  ACE_UNUSED_ARG(type);
  ACE_UNUSED_ARG(value);
#  endif
  return 0;
}

template <>
const  ::UATM::flightChangeRec* get_dynamic_data_adapter_value< ::UATM::flightChangeRec,  ::UATM::flightChangeRec>(DDS::DynamicData_ptr dd)
{
  ACE_UNUSED_ARG(dd);
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  typedef DynamicDataAdapterImpl< ::UATM::flightChangeRec,  ::UATM::flightChangeRec> Dda;
  const Dda* const dda = dynamic_cast<Dda*>(dd);
  if (dda) {
    return &dda->wrapped();
  }
#  endif
  return 0;
}
#endif // ifndef OPENDDS_SAFETY_PROFILE

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End STRUCT: flightChangeRec */

/* End MODULE: UATM */


/* Begin MODULE: UATM */



/* Begin TYPEDEF: ArrayString */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> const XTypes::TypeIdentifier& getMinimalTypeIdentifier<UATM_ArrayString_xtag>()
{
  static XTypes::TypeIdentifier ti;
  ACE_GUARD_RETURN(ACE_Thread_Mutex, guard, TheServiceParticipant->get_static_xtypes_lock(), ti);
  if (ti.kind() == XTypes::TK_NONE) {
    ti = XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(126, 198, 253, 33, 84, 187, 219, 157, 152, 51, 230, 44, 169, 26));
  }
  return ti;
}

template<> const XTypes::TypeMap& getMinimalTypeMap<UATM_ArrayString_xtag>()
{
  return OPENDDS_IDL_FILE_SPECIFIC(get_minimal_type_map, 0)();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> void set_default( ::UATM::ArrayString_forany& arr)
{
  ACE_UNUSED_ARG(arr);
  for (CORBA::ULong i0 = 0; i0 < 2; ++i0) {
    arr[i0] = "";
  }
}

void serialized_size(const Encoding& encoding, size_t& size, const  ::UATM::ArrayString_forany& arr)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(arr);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
  for (CORBA::ULong i0 = 0; i0 < 2; ++i0) {
    primitive_serialized_size_ulong(encoding, size);
    size += ACE_OS::strlen(arr[i0].in()) + 1;
  }
}

bool operator<<(Serializer& strm, const  ::UATM::ArrayString_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
serialized_size(encoding, total_size, arr);if (!strm.write_delimiter(total_size)) {  return false;}  }
  for (CORBA::ULong i0 = 0; i0 < 2; ++i0) {
    if (!(strm << arr[i0])) {
      return false;
    }
  }
  return true;
}

bool operator>>(Serializer& strm,  ::UATM::ArrayString_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  bool discard_flag = false;
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_arr = strm.rpos() + total_size;
  for (CORBA::ULong i0 = 0; i0 < 2; ++i0) {
    if (!(strm >> ACE_InputCDR::to_string(arr[i0].out(), 10))) {
      if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
        strm.set_construction_status(Serializer::ElementConstructionFailure);
        strm.skip(end_of_arr - strm.rpos());
        return false;
      } else {
        strm.set_construction_status(Serializer::ConstructionSuccessful);
        discard_flag = true;
      }
    }
  }
  if (discard_flag) {
    strm.set_construction_status(Serializer::ElementConstructionFailure);
    return false;
  }
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser,  ::UATM::ArrayString_forany*)
{
  ACE_UNUSED_ARG(ser);
  const Encoding& encoding = ser.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!ser.read_delimiter(total_size)) {
      return false;
    }
  }
  for (ACE_CDR::ULong i = 0; i < 2; ++i) {
    ACE_CDR::ULong strlength;
    if (!(ser >> strlength && ser.skip(strlength))) return false;
  }
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif // ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace XTypes {

#ifndef OPENDDS_SAFETY_PROFILE
#if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
template <>
class DynamicDataAdapterImpl< ::UATM::ArrayString, UATM_ArrayString_dda_tag > : public DynamicDataAdapter_T< ::UATM::ArrayString> {
public:
  DynamicDataAdapterImpl(DDS::DynamicType_ptr type,  ::UATM::ArrayString& value)
    : DynamicDataAdapter_T< ::UATM::ArrayString>(type, value)
  {
  }

  DynamicDataAdapterImpl(DDS::DynamicType_ptr type, const  ::UATM::ArrayString& value)
    : DynamicDataAdapter_T< ::UATM::ArrayString>(type, value)
  {
  }

  DDS::ReturnCode_t clear_all_values()
  {
    const DDS::ReturnCode_t rc = assert_mutable("DynamicDataAdapter::clear_all_values");
    if (rc == DDS::RETCODE_OK) {
      OpenDDS::DCPS::set_default(value_);
    }
    return rc;
  }

  DDS::UInt32 get_item_count()
  {
    return 2;
  }

  bool serialized_size(const OpenDDS::DCPS::Encoding& enc, size_t& size, OpenDDS::DCPS::Sample::Extent ext) const
  {
    ACE_UNUSED_ARG(ext);
    OpenDDS::DCPS::serialized_size(enc, size,  ::UATM::ArrayString_forany(value_));
    return true;
  }

  bool serialize(OpenDDS::DCPS::Serializer& ser, OpenDDS::DCPS::Sample::Extent ext) const
  {
    ACE_UNUSED_ARG(ext);
    using namespace OpenDDS::DCPS;
    return ser <<  ::UATM::ArrayString_forany(value_);
  }

protected:
  DDS::ReturnCode_t get_raw_value(const char* method, void* dest, DDS::TypeKind tk, DDS::MemberId id)
  {
    const DDS::ReturnCode_t rc = check_index(method, id, 2);
    if (rc != DDS::RETCODE_OK) {
      return rc;
    }
    return get_s8_raw_value(method, dest, tk, (&value_[0])[id], id);
  }

  DDS::ReturnCode_t set_raw_value(const char* method, DDS::MemberId id, const void* source, DDS::TypeKind tk)
  {
    DDS::ReturnCode_t rc = assert_mutable(method);
    if (rc != DDS::RETCODE_OK) {
      return rc;
    }
    rc = check_index(method, id, 2);
    if (rc != DDS::RETCODE_OK) {
      return rc;
    }
    return set_s8_raw_value(method, (&value_[0])[id].inout(), id, source, tk);
  }
};

#endif // if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER

template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::ArrayString, UATM_ArrayString_dda_tag>(DDS::DynamicType_ptr type, const  ::UATM::ArrayString& value)
{
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  if (type) {
    return new DynamicDataAdapterImpl< ::UATM::ArrayString, UATM_ArrayString_dda_tag>(type, value);
  }
#  else
  ACE_UNUSED_ARG(type);
  ACE_UNUSED_ARG(value);
#  endif
  return 0;
}

template <>
DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::ArrayString, UATM_ArrayString_dda_tag>(DDS::DynamicType_ptr type,  ::UATM::ArrayString& value)
{
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  if (type) {
    return new DynamicDataAdapterImpl< ::UATM::ArrayString, UATM_ArrayString_dda_tag>(type, value);
  }
#  else
  ACE_UNUSED_ARG(type);
  ACE_UNUSED_ARG(value);
#  endif
  return 0;
}

template <>
const  ::UATM::ArrayString* get_dynamic_data_adapter_value< ::UATM::ArrayString, UATM_ArrayString_dda_tag>(DDS::DynamicData_ptr dd)
{
  ACE_UNUSED_ARG(dd);
#  if OPENDDS_HAS_DYNAMIC_DATA_ADAPTER
  typedef DynamicDataAdapterImpl< ::UATM::ArrayString, UATM_ArrayString_dda_tag> Dda;
  const Dda* const dda = dynamic_cast<Dda*>(dd);
  if (dda) {
    return &dda->wrapped();
  }
#  endif
  return 0;
}
#endif // ifndef OPENDDS_SAFETY_PROFILE

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End TYPEDEF: ArrayString */

/* End MODULE: UATM */
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

namespace {
XTypes::TypeObject OPENDDS_IDL_FILE_SPECIFIC(minimal_to, 0)()
{
  static const unsigned char to_bytes[] = { 27, 0, 0, 0, 241, 48, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 144, 243, 1, 0, 0, 0, 1, 0, 0, 0, 2, 112, 10  };
  XTypes::TypeObject to;
  if (!to_type_object(to_bytes, sizeof(to_bytes), to)) {
    throw std::runtime_error("Could not deserialize minimal Type Object 0");
  }
  return to;
}

XTypes::TypeObject OPENDDS_IDL_FILE_SPECIFIC(minimal_to, 1)()
{
  static const unsigned char to_bytes[] = { 131, 0, 0, 0, 241, 81, 10, 0, 1, 0, 0, 0, 0, 0, 0, 0, 115, 0, 0, 0, 7, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 198, 93, 92, 77, 0, 11, 0, 0, 0, 1, 0, 0, 0, 1, 0, 4, 114, 20, 76, 242, 0, 12, 0, 0, 0, 2, 0, 0, 0, 1, 0, 112, 20, 83, 135, 3, 91, 12, 0, 0, 0, 3, 0, 0, 0, 1, 0, 112, 20, 64, 190, 168, 214, 12, 0, 0, 0, 4, 0, 0, 0, 1, 0, 112, 20, 177, 42, 92, 88, 12, 0, 0, 0, 5, 0, 0, 0, 1, 0, 112, 20, 172, 32, 183, 134, 11, 0, 0, 0, 6, 0, 0, 0, 1, 0, 1, 248, 29, 85, 195  };
  XTypes::TypeObject to;
  if (!to_type_object(to_bytes, sizeof(to_bytes), to)) {
    throw std::runtime_error("Could not deserialize minimal Type Object 1");
  }
  return to;
}

XTypes::TypeObject OPENDDS_IDL_FILE_SPECIFIC(minimal_to, 2)()
{
  static const unsigned char to_bytes[] = { 116, 0, 0, 0, 241, 81, 10, 0, 1, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 6, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 134, 178, 224, 224, 0, 11, 0, 0, 0, 1, 0, 0, 0, 1, 0, 4, 114, 20, 76, 242, 0, 11, 0, 0, 0, 2, 0, 0, 0, 1, 0, 4, 145, 232, 53, 28, 0, 12, 0, 0, 0, 3, 0, 0, 0, 1, 0, 112, 20, 135, 62, 156, 11, 12, 0, 0, 0, 4, 0, 0, 0, 1, 0, 112, 20, 237, 158, 128, 165, 12, 0, 0, 0, 5, 0, 0, 0, 1, 0, 112, 20, 53, 26, 91, 37  };
  XTypes::TypeObject to;
  if (!to_type_object(to_bytes, sizeof(to_bytes), to)) {
    throw std::runtime_error("Could not deserialize minimal Type Object 2");
  }
  return to;
}

XTypes::TypeMap OPENDDS_IDL_FILE_SPECIFIC(get_minimal_type_map_private, 0)()
{
  XTypes::TypeMap tm;
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(126, 198, 253, 33, 84, 187, 219, 157, 152, 51, 230, 44, 169, 26))] = OPENDDS_IDL_FILE_SPECIFIC(minimal_to, 0)();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(211, 98, 125, 223, 213, 233, 80, 196, 229, 198, 141, 11, 233, 143))] = OPENDDS_IDL_FILE_SPECIFIC(minimal_to, 1)();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL, XTypes::EquivalenceHashWrapper(224, 2, 25, 151, 93, 69, 55, 8, 242, 60, 174, 242, 37, 244))] = OPENDDS_IDL_FILE_SPECIFIC(minimal_to, 2)();
  return tm;
}

}

const XTypes::TypeMap& OPENDDS_IDL_FILE_SPECIFIC(get_minimal_type_map, 0)()
{
  static XTypes::TypeMap tm;
  ACE_GUARD_RETURN(ACE_Thread_Mutex, guard, TheServiceParticipant->get_static_xtypes_lock(), tm);
  if (tm.empty()) {
    tm = OPENDDS_IDL_FILE_SPECIFIC(get_minimal_type_map_private, 0)();
  }
  return tm;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

