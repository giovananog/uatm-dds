/* Generated by C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\bin\opendds_idl version 3.29.1 (ACE version 6.5.21) running on input file UATM.idl */
#ifndef OPENDDS_IDL_GENERATED_UATMTYPESUPPORT_IDL_9K4XMN
#define OPENDDS_IDL_GENERATED_UATMTYPESUPPORT_IDL_9K4XMN
#define __OPENDDS_IDL_HAS_FIXED
#include "UATM.idl"

#include "dds/DdsDcpsInfrastructure.idl"
#include "dds/DdsDcpsPublication.idl"
#include "dds/DdsDcpsSubscriptionExt.idl"
#include "dds/DdsDcpsTopic.idl"
#include "dds/DdsDcpsTypeSupportExt.idl"
#include "dds/DdsDynamicData.idl"


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: UATM */



/* Begin STRUCT-FWD: flightAuthorization */


/* End STRUCT-FWD: flightAuthorization */


/* Begin STRUCT-FWD: flightChangeRec */


/* End STRUCT-FWD: flightChangeRec */

/* End MODULE: UATM */


/* Begin MODULE: UATM */



/* Begin STRUCT: flightAuthorization */

module UATM {
#pragma DCPS_SUPPORT_ZERO_COPY_READ
#pragma DCPS_GEN_ZERO_COPY_READ
#pragma DCPS_DATA_SEQUENCE_TYPE "UATM::flightAuthorizationSeq"
typedef sequence< ::UATM::flightAuthorization> flightAuthorizationSeq;

/** Support topic registration for flightAuthorization data type.
 *
 * See the DDS specification, OMG formal/2015-04-10, for a description of
 * this interface.
 */
local interface flightAuthorizationTypeSupport : OpenDDS::DCPS::TypeSupport {
#ifndef OPENDDS_SAFETY_PROFILE
    // TODO: valuetype isn't supported in Java.
    @OpenDDS::internal::hidden_op_in_java(0)
    ::DDS::ReturnCode_t create_sample_rc(inout  ::UATM::flightAuthorization dst, in ::DDS::DynamicData src);
    @OpenDDS::internal::hidden_op_in_java(0)
     ::UATM::flightAuthorization create_sample(in ::DDS::DynamicData src);
    @OpenDDS::internal::hidden_op_in_java(0)
    ::DDS::ReturnCode_t create_dynamic_sample_rc(inout ::DDS::DynamicData dst, in  ::UATM::flightAuthorization src);
    @OpenDDS::internal::hidden_op_in_java(0)
    ::DDS::DynamicData create_dynamic_sample(in  ::UATM::flightAuthorization src);
#endif

    ::DDS::ReturnCode_t encode_to_string(in  ::UATM::flightAuthorization sample, out string encoded, in OpenDDS::DCPS::RepresentationFormat format);
    ::DDS::ReturnCode_t encode_to_bytes(in  ::UATM::flightAuthorization sample, out ::DDS::OctetSeq encoded, in OpenDDS::DCPS::RepresentationFormat format);

    ::DDS::ReturnCode_t decode_from_string(in string encoded, out  ::UATM::flightAuthorization sample, in OpenDDS::DCPS::RepresentationFormat format);
    ::DDS::ReturnCode_t decode_from_bytes(in ::DDS::OctetSeq encoded, out  ::UATM::flightAuthorization sample, in OpenDDS::DCPS::RepresentationFormat format);
};

/** DataWriter interface for flightAuthorization data type.
 *
 * See the DDS specifications, OMG formal/2015-04-10 and formal/07-01-01,
 * for a description of this interface.
 */
local interface flightAuthorizationDataWriter : ::DDS::DataWriter {
    ::DDS::InstanceHandle_t register_instance(
                in  ::UATM::flightAuthorization instance);

    ::DDS::InstanceHandle_t register_instance_w_timestamp(
                in  ::UATM::flightAuthorization instance,
                in ::DDS::Time_t timestamp);

    ::DDS::ReturnCode_t unregister_instance(
                in  ::UATM::flightAuthorization instance,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::ReturnCode_t unregister_instance_w_timestamp(
                in  ::UATM::flightAuthorization instance,
                in ::DDS::InstanceHandle_t handle,
                in ::DDS::Time_t timestamp);

    //WARNING: If the handle is non-nil and the instance is not registered
    //         then this operation may cause an access violation.
    //         This lack of safety helps performance.
    ::DDS::ReturnCode_t write(
                in  ::UATM::flightAuthorization instance_data,
                in ::DDS::InstanceHandle_t handle);

    //WARNING: If the handle is non-nil and the instance is not registered
    //         then this operation may cause an access violation.
    //         This lack of safety helps performance.
    ::DDS::ReturnCode_t write_w_timestamp(
                in  ::UATM::flightAuthorization instance_data,
                in ::DDS::InstanceHandle_t handle,
                in ::DDS::Time_t source_timestamp);

    ::DDS::ReturnCode_t dispose(
                in  ::UATM::flightAuthorization instance_data,
                in ::DDS::InstanceHandle_t instance_handle);

    ::DDS::ReturnCode_t dispose_w_timestamp(
                in  ::UATM::flightAuthorization instance_data,
                in ::DDS::InstanceHandle_t instance_handle,
                in ::DDS::Time_t source_timestamp);

    ::DDS::ReturnCode_t get_key_value(
                inout  ::UATM::flightAuthorization key_holder,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::InstanceHandle_t lookup_instance(
                in  ::UATM::flightAuthorization instance_data);
};

/** DataReader interface for flightAuthorization data type.
 *
 * See the DDS specification, OMG formal/2015-04-10, for a description of
 * this interface.
 */
local interface flightAuthorizationDataReader : OpenDDS::DCPS::DataReaderEx {
    ::DDS::ReturnCode_t read(
                inout flightAuthorizationSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take(
                inout flightAuthorizationSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_w_condition(
                inout flightAuthorizationSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_w_condition(
                inout flightAuthorizationSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t read_next_sample(
                inout  ::UATM::flightAuthorization received_data,
                inout ::DDS::SampleInfo sample_info);

    ::DDS::ReturnCode_t take_next_sample(
                inout  ::UATM::flightAuthorization received_data,
                inout ::DDS::SampleInfo sample_info);

    ::DDS::ReturnCode_t read_instance(
                inout flightAuthorizationSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take_instance(
                inout flightAuthorizationSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_instance_w_condition(
                inout flightAuthorizationSeq received_data,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_instance_w_condition(
                inout flightAuthorizationSeq received_data,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t read_next_instance(
                inout flightAuthorizationSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take_next_instance(
                inout flightAuthorizationSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_next_instance_w_condition(
                inout flightAuthorizationSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t previous_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_next_instance_w_condition(
                inout flightAuthorizationSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t previous_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t return_loan(
                inout flightAuthorizationSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq);

    ::DDS::ReturnCode_t get_key_value(
                inout  ::UATM::flightAuthorization key_holder,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::InstanceHandle_t lookup_instance(
                in  ::UATM::flightAuthorization instance_data);
};
};

/* End STRUCT: flightAuthorization */

/* End MODULE: UATM */


/* Begin MODULE: UATM */



/* Begin STRUCT: flightChangeRec */

module UATM {
#pragma DCPS_SUPPORT_ZERO_COPY_READ
#pragma DCPS_GEN_ZERO_COPY_READ
#pragma DCPS_DATA_SEQUENCE_TYPE "UATM::flightChangeRecSeq"
typedef sequence< ::UATM::flightChangeRec> flightChangeRecSeq;

/** Support topic registration for flightChangeRec data type.
 *
 * See the DDS specification, OMG formal/2015-04-10, for a description of
 * this interface.
 */
local interface flightChangeRecTypeSupport : OpenDDS::DCPS::TypeSupport {
#ifndef OPENDDS_SAFETY_PROFILE
    // TODO: valuetype isn't supported in Java.
    @OpenDDS::internal::hidden_op_in_java(0)
    ::DDS::ReturnCode_t create_sample_rc(inout  ::UATM::flightChangeRec dst, in ::DDS::DynamicData src);
    @OpenDDS::internal::hidden_op_in_java(0)
     ::UATM::flightChangeRec create_sample(in ::DDS::DynamicData src);
    @OpenDDS::internal::hidden_op_in_java(0)
    ::DDS::ReturnCode_t create_dynamic_sample_rc(inout ::DDS::DynamicData dst, in  ::UATM::flightChangeRec src);
    @OpenDDS::internal::hidden_op_in_java(0)
    ::DDS::DynamicData create_dynamic_sample(in  ::UATM::flightChangeRec src);
#endif

    ::DDS::ReturnCode_t encode_to_string(in  ::UATM::flightChangeRec sample, out string encoded, in OpenDDS::DCPS::RepresentationFormat format);
    ::DDS::ReturnCode_t encode_to_bytes(in  ::UATM::flightChangeRec sample, out ::DDS::OctetSeq encoded, in OpenDDS::DCPS::RepresentationFormat format);

    ::DDS::ReturnCode_t decode_from_string(in string encoded, out  ::UATM::flightChangeRec sample, in OpenDDS::DCPS::RepresentationFormat format);
    ::DDS::ReturnCode_t decode_from_bytes(in ::DDS::OctetSeq encoded, out  ::UATM::flightChangeRec sample, in OpenDDS::DCPS::RepresentationFormat format);
};

/** DataWriter interface for flightChangeRec data type.
 *
 * See the DDS specifications, OMG formal/2015-04-10 and formal/07-01-01,
 * for a description of this interface.
 */
local interface flightChangeRecDataWriter : ::DDS::DataWriter {
    ::DDS::InstanceHandle_t register_instance(
                in  ::UATM::flightChangeRec instance);

    ::DDS::InstanceHandle_t register_instance_w_timestamp(
                in  ::UATM::flightChangeRec instance,
                in ::DDS::Time_t timestamp);

    ::DDS::ReturnCode_t unregister_instance(
                in  ::UATM::flightChangeRec instance,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::ReturnCode_t unregister_instance_w_timestamp(
                in  ::UATM::flightChangeRec instance,
                in ::DDS::InstanceHandle_t handle,
                in ::DDS::Time_t timestamp);

    //WARNING: If the handle is non-nil and the instance is not registered
    //         then this operation may cause an access violation.
    //         This lack of safety helps performance.
    ::DDS::ReturnCode_t write(
                in  ::UATM::flightChangeRec instance_data,
                in ::DDS::InstanceHandle_t handle);

    //WARNING: If the handle is non-nil and the instance is not registered
    //         then this operation may cause an access violation.
    //         This lack of safety helps performance.
    ::DDS::ReturnCode_t write_w_timestamp(
                in  ::UATM::flightChangeRec instance_data,
                in ::DDS::InstanceHandle_t handle,
                in ::DDS::Time_t source_timestamp);

    ::DDS::ReturnCode_t dispose(
                in  ::UATM::flightChangeRec instance_data,
                in ::DDS::InstanceHandle_t instance_handle);

    ::DDS::ReturnCode_t dispose_w_timestamp(
                in  ::UATM::flightChangeRec instance_data,
                in ::DDS::InstanceHandle_t instance_handle,
                in ::DDS::Time_t source_timestamp);

    ::DDS::ReturnCode_t get_key_value(
                inout  ::UATM::flightChangeRec key_holder,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::InstanceHandle_t lookup_instance(
                in  ::UATM::flightChangeRec instance_data);
};

/** DataReader interface for flightChangeRec data type.
 *
 * See the DDS specification, OMG formal/2015-04-10, for a description of
 * this interface.
 */
local interface flightChangeRecDataReader : OpenDDS::DCPS::DataReaderEx {
    ::DDS::ReturnCode_t read(
                inout flightChangeRecSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take(
                inout flightChangeRecSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_w_condition(
                inout flightChangeRecSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_w_condition(
                inout flightChangeRecSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t read_next_sample(
                inout  ::UATM::flightChangeRec received_data,
                inout ::DDS::SampleInfo sample_info);

    ::DDS::ReturnCode_t take_next_sample(
                inout  ::UATM::flightChangeRec received_data,
                inout ::DDS::SampleInfo sample_info);

    ::DDS::ReturnCode_t read_instance(
                inout flightChangeRecSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take_instance(
                inout flightChangeRecSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_instance_w_condition(
                inout flightChangeRecSeq received_data,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_instance_w_condition(
                inout flightChangeRecSeq received_data,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t read_next_instance(
                inout flightChangeRecSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take_next_instance(
                inout flightChangeRecSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_next_instance_w_condition(
                inout flightChangeRecSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t previous_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_next_instance_w_condition(
                inout flightChangeRecSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t previous_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t return_loan(
                inout flightChangeRecSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq);

    ::DDS::ReturnCode_t get_key_value(
                inout  ::UATM::flightChangeRec key_holder,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::InstanceHandle_t lookup_instance(
                in  ::UATM::flightChangeRec instance_data);
};
};

/* End STRUCT: flightChangeRec */

/* End MODULE: UATM */


/* Begin MODULE: UATM */



/* Begin TYPEDEF: ArrayString */


/* End TYPEDEF: ArrayString */

/* End MODULE: UATM */
#endif /* OPENDDS_IDL_GENERATED_UATMTYPESUPPORT_IDL_9K4XMN */
