/* -*- C++ -*- */
/* Generated by C:\Users\ongio_1lak36v\Downloads\OpenDDS-3.29.1\bin\opendds_idl version 3.29.1 (ACE version 6.5.21) running on input file UATM.idl */
#ifndef OPENDDS_IDL_GENERATED_UATMTYPESUPPORTIMPL_H_JG3VUL
#define OPENDDS_IDL_GENERATED_UATMTYPESUPPORTIMPL_H_JG3VUL

#include <dds/Version.h>
#if !OPENDDS_VERSION_EXACTLY(3, 29, 1)
#  error "This file should be regenerated with opendds_idl"
#endif
#include <dds/DCPS/Definitions.h>

#include <dds/DdsDcpsC.h>

#include "UATMC.h"
#include "UATMTypeSupportC.h"
#include "dds/DCPS/Serializer.h"
#include "dds/DCPS/Service_Participant.h"
#include "dds/DCPS/TypeSupportImpl.h"
#include "dds/DCPS/TypeSupportImpl_T.h"
#include "dds/DCPS/Util.h"
#include "dds/DCPS/ValueDispatcher.h"
#include "dds/DCPS/ValueReader.h"
#include "dds/DCPS/ValueWriter.h"
#include "dds/DCPS/XTypes/DynamicDataAdapter.h"
#include "dds/DCPS/XTypes/TypeObject.h"


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: UATM */



/* Begin STRUCT-FWD: availabilityInfo */


/* End STRUCT-FWD: availabilityInfo */


/* Begin STRUCT-FWD: tolPadRequest */


/* End STRUCT-FWD: tolPadRequest */

/* End MODULE: UATM */


/* Begin MODULE: UATM */



/* Begin STRUCT: availabilityInfo */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

struct UATM_availabilityInfo_xtag {};
template<> UATM_Export
const XTypes::TypeIdentifier& getMinimalTypeIdentifier<UATM_availabilityInfo_xtag>();

template<> UATM_Export
const XTypes::TypeMap& getMinimalTypeMap<UATM_availabilityInfo_xtag>();

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

UATM_Export
bool vread(OpenDDS::DCPS::ValueReader& value_reader,  ::UATM::availabilityInfo& value);

UATM_Export
bool vread(OpenDDS::DCPS::ValueReader& value_reader, const NestedKeyOnly< ::UATM::availabilityInfo>& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

UATM_Export
bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const  ::UATM::availabilityInfo& value);

UATM_Export
bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const NestedKeyOnly<const  ::UATM::availabilityInfo>& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> UATM_Export
void set_default( ::UATM::availabilityInfo& stru);

UATM_Export
void serialized_size(const Encoding& encoding, size_t& size, const ::UATM::availabilityInfo& stru);

UATM_Export
bool operator<<(Serializer& strm, const ::UATM::availabilityInfo& stru);

UATM_Export
bool operator>>(Serializer& strm,  ::UATM::availabilityInfo& stru);

UATM_Export
void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const ::UATM::availabilityInfo>& stru);

UATM_Export
bool operator<<(Serializer& strm, const NestedKeyOnly<const ::UATM::availabilityInfo>& stru);

UATM_Export
bool operator>>(Serializer& strm, const NestedKeyOnly< ::UATM::availabilityInfo>& stru);

template <>
struct MarshalTraits< ::UATM::availabilityInfo> {
  static void representations_allowed_by_type(DDS::DataRepresentationIdSeq& seq)
  {
    seq.length(4);
    seq[0] = DDS::XCDR_DATA_REPRESENTATION;
    seq[1] = DDS::XCDR2_DATA_REPRESENTATION;
    seq[2] = DDS::XML_DATA_REPRESENTATION;
    seq[3] = OpenDDS::DCPS::UNALIGNED_CDR_DATA_REPRESENTATION;
  }

  static SerializedSizeBound serialized_size_bound(const Encoding& encoding)
  {
    switch (encoding.kind()) {
    case Encoding::KIND_XCDR1:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR2:
      return SerializedSizeBound();
    case Encoding::KIND_UNALIGNED_CDR:
      return SerializedSizeBound(80);
    default:
      OPENDDS_ASSERT(false);
      return SerializedSizeBound();
    }
  }

  static SerializedSizeBound key_only_serialized_size_bound(const Encoding& encoding)
  {
    switch (encoding.kind()) {
    case Encoding::KIND_XCDR1:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR2:
      return SerializedSizeBound();
    case Encoding::KIND_UNALIGNED_CDR:
      return SerializedSizeBound(4);
    default:
      OPENDDS_ASSERT(false);
      return SerializedSizeBound();
    }
  }

  static bool to_message_block(ACE_Message_Block&, const  ::UATM::availabilityInfo&) { return false; }
  static bool from_message_block( ::UATM::availabilityInfo&, const ACE_Message_Block&) { return false; }
  static Extensibility extensibility() { return APPENDABLE; }
  static Extensibility max_extensibility_level() { return APPENDABLE; }
};
UATM_Export
void serialized_size(const Encoding& encoding, size_t& size, const KeyOnly<const  ::UATM::availabilityInfo> stru);

UATM_Export
bool operator<<(Serializer& strm, KeyOnly<const  ::UATM::availabilityInfo> stru);

UATM_Export
bool operator>>(Serializer& strm, KeyOnly< ::UATM::availabilityInfo> stru);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace UATM {
/// This structure supports use of std::map with one or more keys.
struct UATM_Export availabilityInfo_OpenDDS_KeyLessThan {
  bool operator()(const  ::UATM::availabilityInfo& v1, const  ::UATM::availabilityInfo& v2) const
  {
    using ::operator<; // TAO::String_Manager's operator< is in global NS
    if (v1.resource_id < v2.resource_id) return true;
    if (v2.resource_id < v1.resource_id) return false;
    return false;
  }
};
}

namespace UATM {
class availabilityInfoTypeSupportImpl;
}
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace DCPS {
template <>
struct DDSTraits< ::UATM::availabilityInfo> {
  typedef  ::UATM::availabilityInfo MessageType;
  typedef  ::UATM::availabilityInfoSeq MessageSequenceType;
  typedef  ::UATM::availabilityInfoSeq::PrivateMemberAccess MessageSequenceAdapterType;
  typedef  ::UATM::availabilityInfoTypeSupport TypeSupportType;
  typedef  ::UATM::availabilityInfoTypeSupportImpl TypeSupportImplType;
  typedef  ::UATM::availabilityInfoDataWriter DataWriterType;
  typedef  ::UATM::availabilityInfoDataReader DataReaderType;
  typedef  ::UATM::availabilityInfo_OpenDDS_KeyLessThan LessThanType;
  typedef OpenDDS::DCPS::KeyOnly<const  ::UATM::availabilityInfo> KeyOnlyType;
  typedef OpenDDS::DCPS::UATM_availabilityInfo_xtag XtagType;

  static const char* type_name() { return "UATM::availabilityInfo"; }
  static size_t key_count() { return 1; }
  static bool is_key(const char*);
};
} // namespace DCPS
} // namespace OpenDDS
OPENDDS_END_VERSIONED_NAMESPACE_DECL

namespace UATM {
class UATM_Export availabilityInfoTypeSupportImpl
  : public virtual OpenDDS::DCPS::TypeSupportImpl_T<availabilityInfo>
  , public virtual OpenDDS::DCPS::ValueDispatcher_T<availabilityInfo>
{
public:
  typedef availabilityInfoTypeSupport TypeSupportType;
  typedef availabilityInfoTypeSupport::_var_type _var_type;
  typedef availabilityInfoTypeSupport::_ptr_type _ptr_type;

  availabilityInfoTypeSupportImpl() {}
  virtual ~availabilityInfoTypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_SAFETY_PROFILE
  availabilityInfo* create_sample(::DDS::DynamicData_ptr src);
#endif
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType() const;
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */

  virtual const OpenDDS::XTypes::TypeIdentifier& getMinimalTypeIdentifier() const;
  virtual const OpenDDS::XTypes::TypeMap& getMinimalTypeMap() const;

  virtual const OpenDDS::XTypes::TypeIdentifier& getCompleteTypeIdentifier() const;
  virtual const OpenDDS::XTypes::TypeMap& getCompleteTypeMap() const;

  ::DDS::ReturnCode_t encode_to_string(const availabilityInfo& in, CORBA::String_out out, OpenDDS::DCPS::RepresentationFormat* format);
  ::DDS::ReturnCode_t encode_to_bytes(const availabilityInfo& in, ::DDS::OctetSeq_out out, OpenDDS::DCPS::RepresentationFormat* format);
  ::DDS::ReturnCode_t decode_from_string(const char* in, availabilityInfo_out out, OpenDDS::DCPS::RepresentationFormat* format);
  ::DDS::ReturnCode_t decode_from_bytes(const ::DDS::OctetSeq& in, availabilityInfo_out out, OpenDDS::DCPS::RepresentationFormat* format);

  static availabilityInfoTypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};

}
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

class MetaStruct;

template<typename T>
const MetaStruct& getMetaStruct();

template<>
UATM_Export
const MetaStruct& getMetaStruct< ::UATM::availabilityInfo>();
UATM_Export
bool gen_skip_over(Serializer& ser,  ::UATM::availabilityInfo*);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif // ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace XTypes {

#ifndef OPENDDS_SAFETY_PROFILE
template <>
UATM_Export DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::availabilityInfo,  ::UATM::availabilityInfo>(DDS::DynamicType_ptr type, const  ::UATM::availabilityInfo& value);

template <>
UATM_Export DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::availabilityInfo,  ::UATM::availabilityInfo>(DDS::DynamicType_ptr type,  ::UATM::availabilityInfo& value);

template <>
UATM_Export const  ::UATM::availabilityInfo* get_dynamic_data_adapter_value< ::UATM::availabilityInfo,  ::UATM::availabilityInfo>(DDS::DynamicData_ptr dd);

#endif // ifndef OPENDDS_SAFETY_PROFILE

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End STRUCT: availabilityInfo */

/* End MODULE: UATM */


/* Begin MODULE: UATM */



/* Begin TYPEDEF: ArrayString */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

struct UATM_ArrayString_xtag {};
template<> UATM_Export
const XTypes::TypeIdentifier& getMinimalTypeIdentifier<UATM_ArrayString_xtag>();

template<> UATM_Export
const XTypes::TypeMap& getMinimalTypeMap<UATM_ArrayString_xtag>();

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> UATM_Export
void set_default( ::UATM::ArrayString_forany& arr);

UATM_Export
void serialized_size(const Encoding& encoding, size_t& size, const  ::UATM::ArrayString_forany& arr);

UATM_Export
bool operator<<(Serializer& strm, const  ::UATM::ArrayString_forany& arr);

UATM_Export
bool operator>>(Serializer& strm,  ::UATM::ArrayString_forany& arr);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

UATM_Export
bool gen_skip_over(Serializer& ser,  ::UATM::ArrayString_forany*);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif // ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace XTypes {

#ifndef OPENDDS_SAFETY_PROFILE
struct UATM_ArrayString_dda_tag {};

template <>
UATM_Export DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::ArrayString, UATM_ArrayString_dda_tag>(DDS::DynamicType_ptr type, const  ::UATM::ArrayString& value);

template <>
UATM_Export DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::ArrayString, UATM_ArrayString_dda_tag>(DDS::DynamicType_ptr type,  ::UATM::ArrayString& value);

template <>
UATM_Export const  ::UATM::ArrayString* get_dynamic_data_adapter_value< ::UATM::ArrayString, UATM_ArrayString_dda_tag>(DDS::DynamicData_ptr dd);

#endif // ifndef OPENDDS_SAFETY_PROFILE

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End TYPEDEF: ArrayString */

/* End MODULE: UATM */


/* Begin MODULE: UATM */



/* Begin STRUCT: tolPadRequest */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

struct UATM_tolPadRequest_xtag {};
template<> UATM_Export
const XTypes::TypeIdentifier& getMinimalTypeIdentifier<UATM_tolPadRequest_xtag>();

template<> UATM_Export
const XTypes::TypeMap& getMinimalTypeMap<UATM_tolPadRequest_xtag>();

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

UATM_Export
bool vread(OpenDDS::DCPS::ValueReader& value_reader,  ::UATM::tolPadRequest& value);

UATM_Export
bool vread(OpenDDS::DCPS::ValueReader& value_reader, const NestedKeyOnly< ::UATM::tolPadRequest>& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

UATM_Export
bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const  ::UATM::tolPadRequest& value);

UATM_Export
bool vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const NestedKeyOnly<const  ::UATM::tolPadRequest>& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> UATM_Export
void set_default( ::UATM::tolPadRequest& stru);

UATM_Export
void serialized_size(const Encoding& encoding, size_t& size, const ::UATM::tolPadRequest& stru);

UATM_Export
bool operator<<(Serializer& strm, const ::UATM::tolPadRequest& stru);

UATM_Export
bool operator>>(Serializer& strm,  ::UATM::tolPadRequest& stru);

UATM_Export
void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const ::UATM::tolPadRequest>& stru);

UATM_Export
bool operator<<(Serializer& strm, const NestedKeyOnly<const ::UATM::tolPadRequest>& stru);

UATM_Export
bool operator>>(Serializer& strm, const NestedKeyOnly< ::UATM::tolPadRequest>& stru);

template <>
struct MarshalTraits< ::UATM::tolPadRequest> {
  static void representations_allowed_by_type(DDS::DataRepresentationIdSeq& seq)
  {
    seq.length(4);
    seq[0] = DDS::XCDR_DATA_REPRESENTATION;
    seq[1] = DDS::XCDR2_DATA_REPRESENTATION;
    seq[2] = DDS::XML_DATA_REPRESENTATION;
    seq[3] = OpenDDS::DCPS::UNALIGNED_CDR_DATA_REPRESENTATION;
  }

  static SerializedSizeBound serialized_size_bound(const Encoding& encoding)
  {
    switch (encoding.kind()) {
    case Encoding::KIND_XCDR1:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR2:
      return SerializedSizeBound();
    case Encoding::KIND_UNALIGNED_CDR:
      return SerializedSizeBound(37);
    default:
      OPENDDS_ASSERT(false);
      return SerializedSizeBound();
    }
  }

  static SerializedSizeBound key_only_serialized_size_bound(const Encoding& encoding)
  {
    switch (encoding.kind()) {
    case Encoding::KIND_XCDR1:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR2:
      return SerializedSizeBound();
    case Encoding::KIND_UNALIGNED_CDR:
      return SerializedSizeBound(4);
    default:
      OPENDDS_ASSERT(false);
      return SerializedSizeBound();
    }
  }

  static bool to_message_block(ACE_Message_Block&, const  ::UATM::tolPadRequest&) { return false; }
  static bool from_message_block( ::UATM::tolPadRequest&, const ACE_Message_Block&) { return false; }
  static Extensibility extensibility() { return APPENDABLE; }
  static Extensibility max_extensibility_level() { return APPENDABLE; }
};
UATM_Export
void serialized_size(const Encoding& encoding, size_t& size, const KeyOnly<const  ::UATM::tolPadRequest> stru);

UATM_Export
bool operator<<(Serializer& strm, KeyOnly<const  ::UATM::tolPadRequest> stru);

UATM_Export
bool operator>>(Serializer& strm, KeyOnly< ::UATM::tolPadRequest> stru);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace UATM {
/// This structure supports use of std::map with one or more keys.
struct UATM_Export tolPadRequest_OpenDDS_KeyLessThan {
  bool operator()(const  ::UATM::tolPadRequest& v1, const  ::UATM::tolPadRequest& v2) const
  {
    using ::operator<; // TAO::String_Manager's operator< is in global NS
    if (v1.assign_id < v2.assign_id) return true;
    if (v2.assign_id < v1.assign_id) return false;
    return false;
  }
};
}

namespace UATM {
class tolPadRequestTypeSupportImpl;
}
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace DCPS {
template <>
struct DDSTraits< ::UATM::tolPadRequest> {
  typedef  ::UATM::tolPadRequest MessageType;
  typedef  ::UATM::tolPadRequestSeq MessageSequenceType;
  typedef  ::UATM::tolPadRequestSeq::PrivateMemberAccess MessageSequenceAdapterType;
  typedef  ::UATM::tolPadRequestTypeSupport TypeSupportType;
  typedef  ::UATM::tolPadRequestTypeSupportImpl TypeSupportImplType;
  typedef  ::UATM::tolPadRequestDataWriter DataWriterType;
  typedef  ::UATM::tolPadRequestDataReader DataReaderType;
  typedef  ::UATM::tolPadRequest_OpenDDS_KeyLessThan LessThanType;
  typedef OpenDDS::DCPS::KeyOnly<const  ::UATM::tolPadRequest> KeyOnlyType;
  typedef OpenDDS::DCPS::UATM_tolPadRequest_xtag XtagType;

  static const char* type_name() { return "UATM::tolPadRequest"; }
  static size_t key_count() { return 1; }
  static bool is_key(const char*);
};
} // namespace DCPS
} // namespace OpenDDS
OPENDDS_END_VERSIONED_NAMESPACE_DECL

namespace UATM {
class UATM_Export tolPadRequestTypeSupportImpl
  : public virtual OpenDDS::DCPS::TypeSupportImpl_T<tolPadRequest>
  , public virtual OpenDDS::DCPS::ValueDispatcher_T<tolPadRequest>
{
public:
  typedef tolPadRequestTypeSupport TypeSupportType;
  typedef tolPadRequestTypeSupport::_var_type _var_type;
  typedef tolPadRequestTypeSupport::_ptr_type _ptr_type;

  tolPadRequestTypeSupportImpl() {}
  virtual ~tolPadRequestTypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_SAFETY_PROFILE
  tolPadRequest* create_sample(::DDS::DynamicData_ptr src);
#endif
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType() const;
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */

  virtual const OpenDDS::XTypes::TypeIdentifier& getMinimalTypeIdentifier() const;
  virtual const OpenDDS::XTypes::TypeMap& getMinimalTypeMap() const;

  virtual const OpenDDS::XTypes::TypeIdentifier& getCompleteTypeIdentifier() const;
  virtual const OpenDDS::XTypes::TypeMap& getCompleteTypeMap() const;

  ::DDS::ReturnCode_t encode_to_string(const tolPadRequest& in, CORBA::String_out out, OpenDDS::DCPS::RepresentationFormat* format);
  ::DDS::ReturnCode_t encode_to_bytes(const tolPadRequest& in, ::DDS::OctetSeq_out out, OpenDDS::DCPS::RepresentationFormat* format);
  ::DDS::ReturnCode_t decode_from_string(const char* in, tolPadRequest_out out, OpenDDS::DCPS::RepresentationFormat* format);
  ::DDS::ReturnCode_t decode_from_bytes(const ::DDS::OctetSeq& in, tolPadRequest_out out, OpenDDS::DCPS::RepresentationFormat* format);

  static tolPadRequestTypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};

}
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
UATM_Export
const MetaStruct& getMetaStruct< ::UATM::tolPadRequest>();
UATM_Export
bool gen_skip_over(Serializer& ser,  ::UATM::tolPadRequest*);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif // ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace XTypes {

#ifndef OPENDDS_SAFETY_PROFILE
template <>
UATM_Export DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::tolPadRequest,  ::UATM::tolPadRequest>(DDS::DynamicType_ptr type, const  ::UATM::tolPadRequest& value);

template <>
UATM_Export DDS::DynamicData_ptr get_dynamic_data_adapter< ::UATM::tolPadRequest,  ::UATM::tolPadRequest>(DDS::DynamicType_ptr type,  ::UATM::tolPadRequest& value);

template <>
UATM_Export const  ::UATM::tolPadRequest* get_dynamic_data_adapter_value< ::UATM::tolPadRequest,  ::UATM::tolPadRequest>(DDS::DynamicData_ptr dd);

#endif // ifndef OPENDDS_SAFETY_PROFILE

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End STRUCT: tolPadRequest */

/* End MODULE: UATM */
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif /* OPENDDS_IDL_GENERATED_UATMTYPESUPPORTIMPL_H_JG3VUL */
